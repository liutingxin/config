;; -*- mode: emacs-lisp; coding: utf-8-unix -*-
;; Minibuffer history file, automatically generated by ‘savehist’.

(setq savehist-minibuffer-history-variables '(xref--read-identifier-history eww-prompt-history helm-ag--helm-history helm-make-target-history helm-grep-history magit-revision-history empty-history ivy-history buffer-name-history file-name-history counsel-M-x-history read-from-kill-ring-history tmm--history woman-topic-history ido-buffer-history command-history read-number-history shell-command-history evil-ex-history evil-ex-search-history compile-history helm-file-name-history minibuffer-history helm-M-x-input-history))
(setq xref--read-identifier-history '("6" "backdrops" "launch" "config"))
(setq eww-prompt-history '("os.org"))
(setq helm-make-target-history '("CMake" "--" #("0" 0 1 (face highlight-numbers-number fontified t)) "Compatibility" #("set" 0 3 (face font-lock-function-name-face fontified t)) #("CMAKE_LIBRARY_OUTPUT_DIRECTORY" 0 30 (fontified t))))
(setq helm-grep-history '("scro" "scroll" "user-config"))
(setq ivy-history '(#("clangd" 0 6 (ivy-index 0)) #("flyspell-lazy" 0 13 (ivy-index 13))))
(setq buffer-name-history '("*ansi-term*" "*ansi-term*<2>" "evil-tutor-24042024.txt" "*Keys*" "*compilation*" "CMakeLists.txt" "CMakeLists.txt<boost>" "*Shell Command Output*" "*Messages*" "*scratch*" "*spacemacs*" "*cmakels::stderr*" "*info*" " *Treemacs-Scoped-Buffer-#<frame F1 0x558e98c68128>*" "*helm M-x*" "*Help*" ".spacemacs" "TUTORIAL.cn" #("c:/" 0 3 (ivy-index 0)) #(".emacs.d" 0 8 (ivy-index 0))))
(setq file-name-history '("~/.spacemacs" "~/atk-tools/binary/simpleSection.c" "/run/media/edward/Black-Ops-III/video/逆向/滴水和NCK以及内核/malloc系统安全高级班/资料/密码.txt" "~/dif" "~/config/init.vim" "~/opt/git_clone/doublecmd-plugins/plugins/wlx/hx_webkit_crap/src/plugin.c" "/usr/share/applications/wps-office-pdf.desktop" "~/.local/share/applications/wps-office-wps.desktop" "~/opt/git_clone/doublecmd-plugins/plugins/wlx/yet_another_vte_plugin/src/Makefile" "~/opt/git_clone/doublecmd-plugins/plugins/wlx/gtksourceview/src/Makefile" "~/opt/git_clone/doublecmd-plugins/plugins/wlx/gtksourceview/Makefile" "~/opt/git_clone/doublecmd-plugins/plugins/wlx/gtksourceview/src/gtksourceview.c" "~/Documents/knowledge-garden-sub/0-INDEX.md" "~/.config/zathura/zathurarc" "/etc/zathurarc" "~/opt/git_clone/doubleCmd-plugins/plugins/wlx/gtkimgview/src/Makefile" "~/opt/git_clone/doubleCmd-plugins/plugins/wlx/gtkimgview/readme.md" "~/atk-tools/binary/b.c" "~/atk-tools/binary/a.c" "/run/media/edward/Black-Ops-III/video/逆向/吾爱破解工具包/Rolan.skin" "~/.config/wezterm/utils/backdrops.lua" "/mnt/IDE注册/You Know.txt" "/mnt/messy/win/笔记/Ollydbg/吾爱破解专用版 Ollydbg/ollydbg_白底黑字配置.ini" "/mnt/messy/win/笔记/Ollydbg/吾爱破解专用版 Ollydbg/使用说明.txt" "/mnt/messy/win/笔记/nmap扫描.txt" "/mnt/study/IT/Bok/手册/nethack/NetHack.txt" "/mnt/study/IT/Bok/手册/资料/软件破解逆向全阶段（汇编破解+游戏逆向+透视+作弊）.txt" "~/.config/wezterm/wezterm.lua" "~/Downloads/ventoy-1.0.99/log.txt" "~/Code/ky/test.org" "~/Code/ky/os.org" "~/Code/ky/os.txt" "~/.config/mpv/mpv.conf" "~/Code/python-math/a.c" "~/Code/python-math/a.py" "~/Desktop/a.css" "~/Desktop/文本文件.txt" "~/.config/flameshot/flameshot.ini" "~/Documents/Calibre Books/calibre_theme.css" "~/Downloads/CTF竞赛权威指南（Pwn篇）(书签带目录) (杨超) (Z-Library).pdf" "~/Project/dishui/c/day_one/Main.cpp" "~/Project/didui/c/dat_one/Main.cpp" "~/Project/boost_test/chkfile.cpp" "~/pro/test_1/CMakeLists.txt" "~/pro/test_1/a.cpp" "~/Project/boost/chkfile.cpp" "~/Project/boost/CMakeLists.txt" "~/pro/test_1/CmakeLists.txt" "~/Project/boost/CmakeLists.txt" "~/pro/test_1/Makefile" "~/config/.emacs.d/README.org" "~/a.cpp" "~/config/.git/COMMIT_EDITMSG" "~/config/README.md" "~/.emacs.d/core/banners/998-banner.txt" "~/.emacs.d/core/banners/999-banner.txt" "~/.emacs.d/core/banners/997-banner.txt" "~/.emacs.d/core/banners/100-banner.txt" "~/.emacs.d/core/banners/003-banner.txt" "~/.emacs.d/core/banners/004-banner.txt" "~/.emacs.d/core/banners/002-banner.txt" "~/.emacs.d/core/banners/001-banner.txt" "~/.emacs.d/core/banners/000-banner.txt" "~/config/.spacemacs" #("c:/Users/Ltx/a.cpp" 0 18 (ivy-index 0)) #("c:/" 0 3 (ivy-index 0)) #("c:/Users/Ltx/.emacs.d/" 0 22 (ivy-index 0)) "d:/Software/Work/Emacs/a.cpp" "~/.emacs.d/.cache/.custom-settings" "~/.emacs.d__/init.el"))
(setq counsel-M-x-history '(#("^package-install" 0 16 (ivy-index 0)) "package-install"))
(setq tmm--history '("h==>Help" "y==>YASnippet" "P==>Projectile" "p==>Perspectives" "t==>Tools" "b==>Buffers" "o==>Options" "e==>Edit" "f==>File"))
(setq ido-buffer-history '("*ansi-term*" "*ansi-term*<2>" "evil-tutor-24042024.txt" "*Keys*" "*compilation*" "CMakeLists.txt" "CMakeLists.txt<boost>" "*Shell Command Output*" "*Messages*" "*scratch*" "*spacemacs*" "*cmakels::stderr*" "*info*" " *Treemacs-Scoped-Buffer-#<frame F1 0x558e98c68128>*" "*helm M-x*" "*Help*" ".spacemacs" "TUTORIAL.cn" "*Compile-Log*"))
(setq command-history '((evil-yank 6548 6594 'line) (evil-find-char nil 115) (evil-yank 31395 31499 'line) (evil-delete 1785 1805 'line) (evil-delete 1785 1786 'line) (evil-delete 1785 1803 'line) (evil-yank 49 94 'line) (evil-record-macro 24) (evil-replace 105 106 'exclusive 35) (evil-yank 53 103 'line) (evil-record-macro 113) (evil-replace 130 131 'exclusive 114) (evil-yank 53 113 'line) (evil-delete 841 842 'line) (evil-delete 841 858 'line) (evil-delete 972 972 'line) (evil-delete 973 973 'line) (evil-yank 8658 8720 'line) (evil-delete 8658 8663 'line) (evil-yank 6912 6978 'line) (evil-replace 37295 37296 'exclusive 95) (evil-replace 37289 37290 'exclusive 95) (evil-replace 37471 37472 'exclusive 95) (evil-replace 37477 37478 'exclusive 95) (evil-replace 37265 37266 'exclusive 95) (evil-replace 37259 37260 'exclusive 95) (evil-replace 37096 37097 'exclusive 95) (evil-replace 37090 37091 'exclusive 95) (evil-replace 37282 37283 'exclusive 114) (evil-replace 37457 37458 'exclusive 114) (evil-yank 37202 37272 'line) (evil-delete 6851 6884 'line) (evil-delete 101 101 'exclusive) (evil-delete 31 67 'line) (evil-yank 12 31 'line) (ansi-term "/usr/bin/zsh") (shell-command "gcc -o ./a.c  a.o\\" nil nil) (evil-delete 46 70 'line) (evil-replace 5 6 'exclusive 97) (shell-command "cp ./b.c  ./a.c" nil nil) (shell-command "gcc -o ./a.c  a.o" nil nil) (shell-command "gcc -o ./a.c  ./a.o" nil nil) (evil-delete 56 78 'line) (evil-delete 56 57 'line) (evil-delete 56 71 'line) (evil-replace 5 6 'exclusive 98) (evil-find-char nil 102) (shell-command "cp ./a.c  ./b.c" nil nil) (shell-command "rm ./b.c" nil nil) (evil-replace 67 68 'exclusive 109) (shell-command "cp ./a.c ./b.c" nil nil) (evil-yank 474 500 'line) (xref-find-definitions "6") (xref-find-definitions "backdrops") (xref-find-definitions "launch") (xref-find-definitions "config") (projectile-run-shell-command-in-root "ls") (projectile-add-known-project "/home/edward/.config/wezterm/.git/") (projectile-add-known-project "/home/edward/.config/wezterm/config/.git/") (evil-goto-mark-line 27) (shell-command "gcc -c simpleSection.c " nil nil) (shell-command "pwd" nil nil) (evil-replace 144 145 'exclusive 32) (evil-replace 150 151 'exclusive 32) (evil-find-char nil 116) (evil-find-char-to nil 32) (shell-command "ls" nil nil) (evil-indent 351 409) (evil-indent 1 450) (evil-replace 24 25 'exclusive 32) (evil-replace 28 29 'exclusive 32) (evil-replace 86 87 'exclusive 32) (evil-replace 83 84 'exclusive 32) (evil-replace 82 83 'exclusive 32) (evil-replace 81 82 'exclusive 32) (evil-replace 69 70 'exclusive 32) (evil-replace 38 39 'exclusive 32) (evil-replace 39 40 'exclusive 32) (evil-replace 40 41 'exclusive 32) (evil-replace 44 45 'exclusive 32) (evil-replace 47 48 'exclusive 32) (evil-replace 102 103 'exclusive 32) (evil-replace 105 106 'exclusive 32) (evil-replace 151 152 'exclusive 32) (evil-replace 147 148 'exclusive 32) (evil-replace 139 140 'exclusive 32) (evil-replace 308 309 'exclusive 32) (evil-replace 306 307 'exclusive 32) (evil-replace 302 303 'exclusive 95) (evil-replace 334 335 'exclusive 95) (evil-replace 334 335 'exclusive 32) (evil-replace 401 402 'exclusive 32) (evil-replace 397 398 'exclusive 95) (evil-replace 410 411 'exclusive 95) (evil-replace 423 424 'exclusive 32) (evil-replace 421 422 'exclusive 32) (evil-replace 419 420 'exclusive 32) (evil-replace 417 418 'exclusive 32) (evil-replace 415 416 'exclusive 32) (evil-replace 416 417 'exclusive 32) (evil-replace 410 411 'exclusive 32) (evil-replace 403 404 'exclusive 32) (evil-replace 397 398 'exclusive 32) (evil-replace 390 391 'exclusive 32) (evil-replace 440 441 'exclusive 32) (evil-replace 433 434 'exclusive 32) (evil-replace 432 433 'exclusive 32) (evil-replace 431 432 'exclusive 32) (evil-replace 430 431 'exclusive 32) (evil-replace 446 447 'exclusive 32) (evil-replace 380 381 'exclusive 32) (evil-replace 383 384 'exclusive 32) (evil-replace 382 383 'exclusive 32) (evil-replace 381 382 'exclusive 32) (evil-replace 177 178 'exclusive 32) (evil-replace 175 176 'exclusive 32) (evil-replace 118 119 'exclusive 32) (evil-replace 159 160 'exclusive 32) (evil-replace 302 303 'exclusive 32) (evil-replace 369 370 'exclusive 32) (evil-replace 375 376 'exclusive 32) (evil-replace 362 363 'exclusive 32) (evil-replace 363 364 'exclusive 32) (evil-replace 364 365 'exclusive 32) (evil-replace 365 366 'exclusive 32) (evil-replace 347 348 'exclusive 32) (evil-replace 346 347 'exclusive 32) (evil-replace 344 345 'exclusive 32) (evil-replace 345 346 'exclusive 32) (evil-replace 351 352 'exclusive 32) (evil-replace 353 354 'exclusive 32) (evil-replace 355 356 'exclusive 32) (evil-replace 327 328 'exclusive 32) (evil-replace 295 296 'exclusive 32) (evil-replace 291 292 'exclusive 32) (evil-replace 323 324 'exclusive 32) (evil-replace 316 317 'exclusive 32) (evil-replace 284 285 'exclusive 32) (evil-replace 283 284 'exclusive 32) (evil-replace 281 282 'exclusive 32) (evil-replace 282 283 'exclusive 32) (evil-replace 263 264 'exclusive 32) (evil-replace 233 234 'exclusive 32) (evil-replace 234 235 'exclusive 32) (evil-replace 242 243 'exclusive 32) (evil-replace 243 244 'exclusive 32) (evil-replace 253 254 'exclusive 32) (evil-replace 250 251 'exclusive 32) (evil-replace 251 252 'exclusive 32) (evil-replace 224 225 'exclusive 32) (evil-replace 222 223 'exclusive 32) (evil-replace 218 219 'exclusive 32) (evil-replace 211 212 'exclusive 32) (evil-replace 186 187 'exclusive 32) (make-directory "/home/edward/atk-tools/binary/" t) (evil-record-macro 127) (evil-org-delete 188 189 'line) (evil-yank 43 50 'line) (evil-org-delete 153 154 'line) (evil-delete 31464 31469 'line) (clang-format 31672 31672) (evil-org-delete 32 53 'line) (evil-delete 31683 31693 'line) (evil-delete 31704 31789 'line) (evil-delete 31704 31748 'line) (evil-delete 31693 31733 'line) (evil-org-delete 32 47 'line) (eww "os.org" nil) (eww-switch-to-buffer) (shell-command "rm ./os.html " nil nil) (evil-org-delete 143 147 'line) (evil-org-delete 167 168 'line) (evil-org-delete 180 212 'line) (evil-org-delete 180 205 'line) (evil-org-delete 180 196 'line) (evil-org-delete 180 187 'line) (evil-org-delete 180 198 'line) (evil-record-macro 32) (evil-set-marker 27) (evil-surround-region 51 52 'inclusive 100) (markdown-live-preview-mode 'toggle) (browse-url-of-buffer) (evil-find-char nil 101) (eww "" nil) (shell-command "eww" nil nil) (evil-org-delete 259 271 'line) (evil-org-delete 259 262 'line) (evil-find-char nil 32) (evil-delete 31650 31651 'line) (evil-delete 31973 32006 'line) (evil-org-delete 32 50 'line) (evil-org-delete 32 52 'line) (evil-org-delete 178 178 'line) (evil-org-delete 179 179 'line) (evil-org-delete 179 180 'line) (evil-org-delete 180 189 'line) (evil-mode 'toggle) (eval-buffer) (evil-org-delete 110 116 'line) (evil-delete 31749 31754 'line) (evil-delete 31717 31722 'line) (evil-delete 31679 31680 'line) (evil-delete 31679 31703 'line) (evil-org-delete 12 19 'line) (evil-delete 31714 31715 'line) (evil-delete 31475 31506 'line) (evil-delete 31567 31568 'line) (evil-delete 31680 31681 'line) (evil-org-delete 12 13 'line) (evil-delete 19707 19804 'line) (evil-delete 19593 19594 'line) (evil-yank 19674 19737 'line) (describe-variable 'which-key-side-window-max-width) (evil-delete 31890 31921 'line) (evil-delete 31890 31922 'line) (evil-delete 31890 31930 'line) (evil-yank 31701 31807 'line) (evil-delete 31876 31948 'line) (evil-delete 32405 32406 'line) (evil-delete 32662 32705 'line) (evil-delete 32662 32680 'line) (evil-delete 2886 2887 'line) (evil-goto-mark 9) (evil-org-delete 12 17 'line) (evil-org-delete 12 16 'line) (evil-delete 31888 31935 'line) (evil-org-delete 13 32 'line) (evil-org-delete 13 22 'line) (evil-org-delete 13 21 'line) (evil-org-delete 13 20 'line) (evil-yank 31620 31740 'line) (evil-org-delete 28 32 'line) (evil-org-delete 28 37 'line) (describe-variable 'org-odd-levels-only) (evil-delete 31513 31550 'line) (evil-delete 31642 31643 'line) (evil-delete 32051 32093 'line) (evil-delete 32051 32137 'line) (evil-yank 31848 31894 'line) (evil-delete 31848 31893 'line) (describe-function 'helm-themes--load-theme) (evil-find-char-backward nil 71) (evil-find-char-to-backward nil 106) (evil-find-char-to-backward nil 32) (evil-delete 32066 32108 'line) (evil-delete 32146 32189 'line) (evil-yank 31943 31989 'line) (evil-delete 31943 31986 'line) (evil-delete 31821 31821 'exclusive) (evil-yank 31943 31987 'line) (evil-set-marker 109) (evil-delete 31861 31862 'line) (evil-delete 31862 31865 'line) (evil-delete 31847 31864 'line) (evil-yank 14179 14219 'line) (evil-delete 31623 31624 'line) (evil-yank 36196 36266 'line) (evil-yank 31231 31335 'line) (evil-delete 31510 31511 'line) (evil-org-delete 1 26 'line) (evil-org-delete 1 2 'line) (evil-delete 1804 1816 'line) (evil-delete 31308 31365 'line) (evil-delete 1 26 'line) (evil-delete 31561 31609 'line) (evil-delete 31461 31477 'line) (evil-delete 31305 31306 'line) (evil-delete 31430 31440 'line) (evil-delete 31520 31553 'line) (evil-org-delete 110 111 'line) (evil-org-delete 111 112 'line) (evil-org-delete 196 199 'line) (evil-org-delete 126 140 'line) (evil-org-delete 126 139 'line) (org-mode) (markdown-mode) (evil-delete 1804 1813 'line) (evil-yank 30371 30474 'line) (shell-command "mv ./os.txt ./os.org" nil nil) (make-directory "/home/edward/Code/ky/" t) (evil-yank 498 533 'line) (evil-yank 2336 2357 'line) (shell-command "rm ./a.c " nil nil) (evil-delete 26 30 'line) (evil-record-macro 106) (shell-command "python ./a.py " nil nil) (compile "make -k " nil) (evil-delete 1 6 'line) (evil-change 3060 3060 'exclusive) (evil-delete 81 90 'line) (evil-delete 141 145 'line) (shell-command "make -k -C ./build/ -f Makefile" nil nil) (shell-command "_cmake " nil nil) (evil-replace 104 105 'exclusive 97) (shell-command "rm ./build/boost_test " nil nil) (shell-command "make -C ./build/ -f Makefile -k clean" nil nil) (shell-command "make -K -C ./build/ -f Makefile" nil nil) (shell-command "make -K -C ./build/ -f MakeFile" nil nil) (shell-command "make -k -C ./build/ -f MakeFile" nil nil) (shell-command "./build/boost_test" nil nil) (shell-command "make -k -C ./build/ -f MakeFiles" nil nil) (shell-command "make -k -f -C ./build/Makefile " nil nil) (shell-command "make -k -C ./build/ -f Main.cpp " nil nil) (evil-record-macro 10) (shell-command "make -k -C ./build/Makefile -f" nil nil) (kill-buffer "*ansi-term*") (evil-record-macro 107) (shell-command "make ./build/" nil nil) (evil-set-marker 97) (shell-command "make ./build/Makefile " nil nil) (shell-command "make" nil nil) (shell-command "cp ~/Project/boost/CMakeLists.txt ~/Project/dishui/c/day_one/" nil nil) (kill-buffer "*ansi-term*<2>") (evil-goto-mark 96) (shell-command "./main " nil nil) (shell-command "g++ -o main ./Main.cpp" nil nil) (evil-shell-command 92 94 'line) (shell-command "g++ -o main ./Main.c" nil nil) (compile "make" nil) (kill-buffer "Main.cpp") (hexl-find-file "/home/cam/Project/didui/c/dat_one/Main.cpp") (mkdir "/home/cam/Project/didui/c/dat_one/" t) (kill-buffer "evil-tutor-24042024.txt") (evil-goto-mark-line 106) (load-library "2048") (evil-delete 504 545 'line) (evil-delete 322 29434) (package-install 'treemacs-all-the-icons nil) (evil-delete 2664 2671 'line) (evil-record-macro 58) (kill-buffer "*Keys*") (lsp-workspace-folders-switch "/home/cam/Project/boost_test") (evil-delete 1208 1264 'line) (shell-command "./build/boost_test " nil nil) (shell-command "_cmake" nil nil) (shell-command "./build/sample" nil nil) (evil-yank 14102 14151 'line) (evil-find-char nil 106) (evil-find-char-to nil 106) (lsp-describe-session) (evil-delete 1298 1299 'exclusive) (evil-delete 1323 1397 'line) (shell-command " rm -rf ./build" nil nil) (shell-command "cmake" nil nil) (shell-command "_cmkae" nil nil) (evil-yank 1252 1320 'line) (shell-command "rm -rf ./build" nil nil) (eaf-install) (shell-command "rm ./build -rf" nil nil) (evil-yank 940 970 'line) (evil-set-marker 32) (kill-buffer "*compilation*") (shell-command " rm -rf ./build/" nil nil) (evil-delete 2128 2174 'line) (evil-set-marker 103) (shell-command " rm -rf CMakeCache.txt ./CMakeFiles/ ./build/ ./Makefile ./cmake_install.cmake " nil nil) (shell-command " pwd" nil nil) (shell-command "cd .." nil nil) (kill-buffer "CMakeLists.txt") (kill-buffer "CMakeLists.txt<boost>") (kill-buffer "*Shell Command Output*") (kill-buffer "*Messages*") (kill-buffer "*scratch*") (kill-buffer "*spacemacs*") (evil-delete 28557 28601 'line) (shell nil nil) (shell-command "nethack" nil nil) (kill-buffer "*cmakels::stderr*") (kill-buffer "*info*") (shell-command "which ls" nil nil) (shell-command "echo $SHELL" nil nil) (shell-command "_cmake()" nil nil) (shell-command "source ~/.zshrc" nil nil) (evil-shell-command 222 222 'exclusive) (shell-command "echo $PATH" nil nil) (shell-command "cmake ." nil nil) (shell-command "rm -rf .cmake/ ./CMakeFiles/  ./build/ ./CMakeCache.txt  ./Makefile  ./cmake_install.cmake " nil nil) (shell-command "rm -rf ./.cmake/ ./CMakeFiles/  ./build/ ./CMakeCache.txt  ./Makefile  ./cmake_install.cmake " nil nil) (evil-delete 235 236 'line) (evil-delete 235 278 'line) (evil-yank 85 126 'line) (shell-command "rm -rf ./build/" nil nil) (shell-command "rm -rf ./.cmake/ ./CMakeFiles/ ./CMakeCache.txt  ./cmake_install.cmake CmakeLists.txt " nil nil) (kill-buffer " *Treemacs-Scoped-Buffer-#<frame F1 0x558e98c68128>*") (shell-command "rm -rf .cmake/ ./CMakeFiles/ ./CMakeCache.txt  ./cmake_install.cmake CmakeLists.txt " nil nil) (evil-delete 1 1 'line) (evil-delete 955 1013 'line) (shell-command "rm -rf .cmake/ ./CMakeFiles/ ./CMakeCache.txt  ./cmake_install.cmake " nil nil) (evil-shell-command 1 1) (shell-command "rmdir build/" nil nil) (shell-command "mkdir build" nil nil) (shell-command "rm Makefile" nil nil) (shell-command "rm ./.CMakeCache.txt" nil nil) (shell-command "rm -rf ./CMakeFiles .cmake ./.CMakeCache.txt cmake_install.cmake " nil nil) (evil-delete 59 89 'line) (evil-delete 59 88 'line) (shell-command "ll" nil nil) (evil-shell-command 84 84 'exclusive) (shell-command "cd ../" nil nil) (evil-change 84 84 'exclusive) (shell-command "mv Makefile Makefile.bak" nil nil) (shell-command "mv ./Makefile ./Makefile.bak" nil nil) (shell-command "mv ./Makfile ./Makefile.bak" nil nil) (evil-delete 248 249 'line) (evil-yank 106 138 'line) (evil-change 2810 2811 'exclusive) (compile "make -k clean" nil) (shell-command "./sample " nil nil) (evil-delete 234 335 'line) (evil-delete 2875 2876 'line) (evil-yank 2755 2796 'line) (evil-delete 2796 2857 'line) (evil-yank 2661 2731 'line) (evil-shell-command 115 115 'exclusive) (shell-command "cmake --help" nil nil) (evil-change 115 115 'exclusive) (compile "cmake " nil) (shell-command "./samlpe.out " nil nil) (compile "g++ -o samlpe.out  ./chkfile.cpp  -I$BOOST_INCLUDE -L$BOOST_LIB -lboost_thread" nil) (evil-replace 328 329 'exclusive 34) (evil-replace 313 314 'exclusive 34) (evil-replace 176 177 'exclusive 34) (evil-replace 176 177 'exclusive 58) (evil-replace 127 128 'exclusive 34) (evil-set-marker 98) (treemacs--setup-fringe-indicator-mode 'always) (evil-find-char-to-backward nil 115) (treemacs--setup-git-mode 'extended) (evil-find-char-to nil 102) (evil-replace 2030 2031 'exclusive 97) (evil-replace 3455 3456 'exclusive 115) (evil-replace 3455 3456 'exclusive 83) (evil-yank 2648 2718 'line) (evil-delete 3273 3344 'line) (evil-change 3273 3274 'exclusive) (evil-yank 9406 9459 'line) (evil-yank 9406 9453 'line) (evil-delete 3272 3283 'line) (evil-delete 3273 3308 'line) (shell-command "ls -la" nil nil) (shell-command "ls -l" nil nil) (evil-find-char nil 97) (evil-change 3181 3182 'exclusive) (evil-set-marker 110) (evil-find-char-to nil 116) (evil-delete 57 58 'line) (evil-delete 48 49 'line) (shell-command "a.py " nil nil) (shell-command "./a" nil nil) (shell-command "a.out" nil nil) (compile "make -k a" nil) (shell-command "mkdir  pro/test_1 && mv ./a.cpp ./pro/test_1" nil nil) (shell-command "mkdir  pro" nil nil) (shell-command "mkdir -r pro/test_1 && mv ./a.cpp ./pro/test_1" nil nil) (shell-command "mkdir pro/test_1 && mv ./a.cpp ./pro/test_1" nil nil) (kill-buffer "*helm M-x*") (evil-delete 27269 27290 'line) (evil-delete 2323 2329 'line) (evil-delete 2117 2128 'line) (evil-set-marker 44) (evil-delete 2203 2204 'line) (evil-find-char nil 103) (kill-buffer "*Help*") (evil-delete 172 29988) (evil-delete 2042 2059 'line) (evil-delete 1 19 'line) (kill-buffer ".spacemacs") (kill-buffer "TUTORIAL.cn") (evil-yank 8292 8346 'line) (package-install 'monokai-theme nil) (package-install 'farmhouse-themes nil) (evil-yank 17388 17427 'line) (evil-find-char nil 100) (evil-yank 16919 16961 'line) (evilnc-comment-operator 16919 17003 'line) (evil-goto-mark-line 39) (evil-yank 8248 8291 'line) (evilnc-comment-operator 20238 20239 'exclusive) (evilnc-comment-operator 20235 20301 'line) (evil-yank 20235 20268 'line) (evil-find-char-to nil 117) (evil-replace 6371 6371 'exclusive 9) (evil-record-macro 117) (evil-find-char nil 117) (kill-buffer "*Compile-Log*") (evil-yank 20927 20960 'line nil nil) (package-install 'dracula-theme nil) (evil-yank 12495 12565 'line nil nil) (evil-delete 26338 26342 'line nil nil) (evil-delete 12494 12534 'line nil nil) (evil-record-macro 81) (evil-goto-mark-line 13) (kill-buffer "c:/") (find-file-literally "c:/") (package-install 'flyspell-lazy nil) (kill-buffer ".emacs.d") (evil-delete 2138 2147 'line) (evil-delete 11162 11195 'line) (evil-delete 11195 11236 'line) (evil-delete 11394 11395 'line) (evil-delete 11268 11309 'line) (evil-delete 11268 11308 'line) (evil-delete 12652 12735 'line) (evil-yank 12316 12371 'line) (evil-record-macro 82) (evil-delete 20506 20573 'line) (evil-goto-mark-line 127) (Info-goto-emacs-command-node 'dotspacemacs-line-numbers t) (Info-goto-emacs-command-node 'visual-line--saved-state t) (evil-delete 12807 12808 'line) (evil-delete 12762 12763 'line) (evil-delete 12716 12717 'line) (evil-delete 12676 12677 'line) (evil-replace 12861 12862 'exclusive 53) (evil-yank 12234 12258 'line) (evil-yank 12306 12359 'line) (evil-delete 12340 12389 'line) (evil-yank 12232 12281 'line) (evil-yank 12281 12323 'line) (evil-replace 12319 12320 'exclusive 53) (evil-replace 12319 12320 'exclusive 52) (evil-yank 20227 20260 'line) (evil-delete 78 79 'line) (evil-indent 33 35) (kill-buffer "init.el") (evil-record-macro 44) (evil-find-char nil 98) (kill-buffer "*Process List*") (shell-command "./a.exe " nil nil) (compile "g++ -o a a.cpp " nil)))
(setq shell-command-history '("gcc -o ./a.c  a.o\\" "cp ./b.c  ./a.c" "gcc -o ./a.c  a.o" "gcc -o ./a.c  ./a.o" "cp ./a.c  ./b.c" "rm ./b.c" "cp ./a.c ./b.c" "ls" "gcc -c simpleSection.c " "pwd" "rm ./os.html " "eww" "mv ./os.txt ./os.org" "rm ./a.c " "python ./a.py " "make -k -C ./build/ -f Makefile" "_cmake " "rm ./build/boost_test " "make -C ./build/ -f Makefile -k clean" "make -K -C ./build/ -f Makefile" "make -K -C ./build/ -f MakeFile" "make -k -C ./build/ -f MakeFile" "./build/boost_test" "make -k -C ./build/ -f MakeFiles" "make -k -f -C ./build/Makefile " "make -k -C ./build/ -f Main.cpp " "make -k -C ./build/Makefile -f" "make ./build/" "make ./build/Makefile " "make" "cp ~/Project/boost/CMakeLists.txt ~/Project/dishui/c/day_one/" "./main " "g++ -o main ./Main.cpp" "g++ -o main ./Main.c" "./build/boost_test " "_cmake" "./build/sample" " rm -rf ./build" "cmake" "_cmkae" "rm -rf ./build" "rm ./build -rf" " rm -rf ./build/" " rm -rf CMakeCache.txt ./CMakeFiles/ ./build/ ./Makefile ./cmake_install.cmake " " pwd" "ll" "cd .." "nethack" "which ls" "echo $SHELL" "_cmake()" "source ~/.zshrc" "echo $PATH" "cmake ." "rm -rf .cmake/ ./CMakeFiles/  ./build/ ./CMakeCache.txt  ./Makefile  ./cmake_install.cmake " "rm -rf ./.cmake/ ./CMakeFiles/  ./build/ ./CMakeCache.txt  ./Makefile  ./cmake_install.cmake " "rm -rf ./build/" "rm -rf ./.cmake/ ./CMakeFiles/ ./CMakeCache.txt  ./cmake_install.cmake CmakeLists.txt " "rm -rf .cmake/ ./CMakeFiles/ ./CMakeCache.txt  ./cmake_install.cmake CmakeLists.txt " "rm -rf .cmake/ ./CMakeFiles/ ./CMakeCache.txt  ./cmake_install.cmake " "rmdir build/" "mkdir build" "rm Makefile" "rm ./.CMakeCache.txt" "rm -rf ./CMakeFiles .cmake ./.CMakeCache.txt cmake_install.cmake " "cd ../" "mv Makefile Makefile.bak" "mv ./Makefile ./Makefile.bak" "mv ./Makfile ./Makefile.bak" "./sample " "cmake --help" "./samlpe.out " "ls -la" "ls -l" "a.py " "./a" "a.out" "mkdir  pro/test_1 && mv ./a.cpp ./pro/test_1" "mkdir  pro" "mkdir -r pro/test_1 && mv ./a.cpp ./pro/test_1" "mkdir pro/test_1 && mv ./a.cpp ./pro/test_1" "./a.exe "))
(setq evil-ex-history '(".!" "q" "w" "q" "wq" "noh"))
(setq evil-ex-search-history '("user-config" "holo" "gc" "gcpc" "function" "fez" "noh" "_" "f" "with-" "which-key" "which" "keys" "with" "quit" "q" "theme" "switch" "modus" "font" "git" "configuration" "layers" "org" "eval" "-k" "configuration-layers" "configuration-layer" "user-init" "init" "sideline" "lsp-ui" "user-con" "dia" "kbd" "diaster" "tree" "ivy" "gdb" "998" "line" "random" "treemacs" "position" "scroll" "scrolling" "lsp" "layer" "user" "leader-key" "non-nil" "key" "rand" "farm" "My add config start" "fullscree" "full" "max" "add config" "banner" "30" "user-ini" "melpa" "eaf" "26" "'visual" "relative" "'relative" "line-number" "https"))
(setq compile-history '("make -k " "make" "make -k clean" "cmake " "g++ -o samlpe.out  ./chkfile.cpp  -I$BOOST_INCLUDE -L$BOOST_LIB -lboost_thread" "make -k a" "g++ -o a a.cpp "))
(setq helm-file-name-history '(".spacemacs" "init.vim" "chkfile.cpp" "a.cpp" "c:" ".emacs.d" ".spacemacs" "a.cpp" ".custom-settings" "init.el"))
(setq minibuffer-history '("#" "/usr/bin/zsh" "/home/edward/atk-tools/binary/" "/home/edward/atk-tools/binary/b.c" "/home/edward/atk-tools/binary/a.c" "/home/edward/.config/wezterm/" "lua" "5" "6" "m" #("require" 0 7 (face font-lock-builtin-face fontified t)) "n" "wez" "2" #("backdrops" 0 2 (face font-lock-string-face fontified t) 2 6 (face font-lock-string-face fontified t) 6 9 (face font-lock-string-face fontified t)) #("font" 0 4 (face font-lock-variable-name-face fontified t)) #("config" 0 6 (face font-lock-string-face fontified t)) #("wezterm" 0 7 (fontified t help-echo "mouse-2: visit this file in other window" mouse-face highlight dired-filename t)) "/home/edward/.config/wezterm/config/" "pro" "/home/edward/atk-tools/binary/simpleSection.c" "/home/edward/" "os." "*eww*" "/home/edward/Code/ky/test.org" "/home/edward/Code/ky/os.org" "which-key-side-window-max-width" "/home/edward/.con" "org-odd-levels-only" "helm-themes--load-theme" #("monokai" 0 7 (fontified t)) "mo" #("**" 0 1 (face org-hide fontified t) 1 2 (composition (0 1 [9673]) face (org-superstar-header-bullet org-level-2) fontified t)) #("?▶" 0 2 (fontified t)) #("***" 0 2 (face org-hide isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show wrap-prefix #1=#("***** " 0 2 (face org-indent) 2 6 (face org-indent)) line-prefix #2=#("**" 0 2 (face org-indent)) fontified t) 2 3 (face org-level-2 isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show wrap-prefix #1# line-prefix #2# fontified t)) "3x5" "3*5" "/home/edward/Code/ky/" "/home/edward/Code/ky/os.txt" "/home/edward/.config/mpv/" "a.c" "/home/edward/Code/python-math/a.c" "/home/edward/Code/python-math/" "a" "/home/edward/Code/python-math/a.py" #("day_one" 0 7 (button (t) category t face treemacs-root-face :project #s(treemacs-project "day_one" #1="/home/cam/Project/dishui/c/day_one" local-readable nil) :default-face treemacs-root-face :key #1# :symlink nil :state root-node-open :path #1# :depth 0)) "/build/" "/" "/Project/dishui/c/day_one/" "/Project/dishui/c/" "/Project/dishui/" "/Project/" "/Project/boost/" "Main.cpp" "/home/cam/Project/didui/c/dat_one/" "~/project/c/dat_one/" "/home/cam/Project/didui/c/dat_one/Main.cpp" "2048" "treemacs-" "rain" "cmake_" "CM" "CMa" "cm" "Mak" "cma" "cmake ." "/home/cam/Project/boost/" "/home/cam/pro/test_1/" "../" "/home/cam/Project/boost/CMakeLists.txt" "/home/cam/Project/boost/CmakeLists.txt" "/home/cam/pro/test_1/CmakeLists.txt" "/home/cam/pro/test_1/Makefile" "chk" "di" #("the" 0 3 (face font-lock-comment-face fontified t)) #("int" 0 2 (face font-lock-type-face fontified t) 2 3 (face font-lock-type-face c-type c-decl-id-start fontified t)) #("-" 0 1 (face org-superstar-item composition (1 1 [8211]) fontified t)) "灯火" "/home/cam/pro/" #("dotspacemacs-scroll-bar-while-scrolling" 0 39 (fontified nil)) "/home/cam/a.cpp" "0" "d" "/home/cam/config/README.md" #("then" 0 4 (wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t)) "key" "message" "/home/cam/.emacs.d/core/banners/" "/home/cam/" "╋╋╋╋╋╋╋╋╋┃┃" "mess" "██║╚██████╗███████║" "monoka" #("spacemacs-light" 0 15 (fontified t)) #("farmhouse-theme" 0 15 (fontified nil)) "farmho" "vim" "git" "*Compile-Log*" "/home/cam/config/init.vim" "/home/cam/Project/boost/chkfi" "z" "drac" #("Spacemacs" 0 9 (face font-lock-function-name-face)) #("Documentation" 0 13 (face font-lock-keyword-face)) "spacemacs" "dra" "dotspacemacs-line-numbers" "visual-line--saved-state" #("terminal." 0 9 (face font-lock-comment-face fontified t)) #("prioritized" 0 11 (face font-lock-comment-face fontified t)) #("Code" 0 4 (face font-lock-comment-face fontified t)) #("can" 0 3 (face font-lock-comment-face fontified t)) #("because" 0 7 (face font-lock-comment-face fontified t)) #("Source" 0 6 (face font-lock-string-face fontified t)) #("16.0" 0 2 (face highlight-numbers-number fontified nil) 2 4 (face highlight-numbers-number fontified nil)) "book" "init.el" "book_makr test a.cpp" "*Messages*" "*Process List*" "a.cpp" "d:/Software/Work/Emacs/" "c:/Users/Ltx/.emacs.d_" "d:/hello.cpp"))
(setq helm-M-x-input-history '(#("config" 0 6 (face font-lock-string-face fontified t)) "projectile-add" "mk" "format" "eww" "eww-swi" "eww-buffer" "markd" "markdown-preview" "preview" #("meta" 0 4 (face font-lock-function-name-face fontified t)) "browse-url-bu" "evil-mode" "eva" "org-mo" "markdown" "make-di" "packins" "load-li" "pac" "pack" "lsp-desc" "eaf-install" "ansi" "shell" #("spacemacs-light" 0 15 (fontified t)) "packageinsta" "packainsta" "eval-buf" "com" "resrtart"))
(setq projectile-project-command-history '#s(hash-table size 65 test equal rehash-size 1.5 rehash-threshold 0.8125 data ()))
(setq evil-jumps-history '((12495 "/home/edward/.spacemacs") (6594 #1="/home/edward/.spacemacs") (5877 #1#) (30229 #1#) (29656 #1#) (5618 #1#) (5424 #1#) (37810 #1#) (32427 #1#) (31532 #1#) (38998 #2="/home/edward/.spacemacs") (42089 #2#) (40 #2#) (7383 #2#) (31296 #2#) (31296 #2#) (31402 #2#) (31402 #2#) (29608 #2#) (5618 #2#) (5424 #2#) (5051 #2#) (30181 #2#) (29608 #2#) (5618 #2#) (5424 #2#) (1848 #2#) (139 "/home/edward/opt/git_clone/doublecmd-plugins/plugins/wlx/hx_webkit_crap/src/plugin.c") (1652 "/usr/include/gtk-2.0/gtk/gtk.h") (75 #3="/home/edward/opt/git_clone/doublecmd-plugins/plugins/wlx/hx_webkit_crap/src/plugin.c") (49 #3#) (151 "/home/edward/.local/share/applications/wps-office-wps.desktop") (217 "/home/edward/opt/git_clone/doublecmd-plugins/plugins/wlx/gtksourceview/src/Makefile") (153 "/home/edward/opt/git_clone/doublecmd-plugins/plugins/wlx/yet_another_vte_plugin/src/Makefile") (8 #4="/home/edward/opt/git_clone/doublecmd-plugins/plugins/wlx/gtksourceview/src/Makefile") (130 #4#) (200 #4#) (195 #4#) (195 #4#) (3805 "/home/edward/opt/git_clone/doublecmd-plugins/plugins/wlx/gtksourceview/src/gtksourceview.c") (16 #5="/home/edward/.config/zathura/zathurarc") (19 #5#)))
(setq mark-ring 'nil)
(setq global-mark-ring 'nil)
(setq search-ring '(#("font" 0 4 (isearch-case-fold-search t isearch-regexp-function nil)) #("line-numbers" 0 12 (isearch-case-fold-search t isearch-regexp-function nil))))
(setq regexp-search-ring '(#("\\<选择题\\>" 0 7 (isearch-case-fold-search nil)) #("\\<*****\\>" 0 9 (isearch-case-fold-search nil)) #("\\_<Documentation\\_>" 0 19 (isearch-case-fold-search nil)) #("\\_<<main\\+0x57>\\_>" 0 18 (isearch-case-fold-search nil)) #("\\_<ttf-victor-mono-nerd\\_>" 0 26 (isearch-case-fold-search nil)) #("\\_<lsp-ui-sideline-{level}-{tags}-face\\_>" 0 41 (isearch-case-fold-search nil)) #("\\_<c-c\\+\\+\\_>" 0 13 (isearch-case-fold-search nil)) #("\\<\\>" 0 4 (isearch-case-fold-search nil)) #("\\_<filesystem\\_>" 0 16 (isearch-case-fold-search nil)) #("\\_<spell-checking\\_>" 0 20 (isearch-case-fold-search nil)) #("\\_<syntax-checking\\_>" 0 21 (isearch-case-fold-search nil)) #("\\<SHELL\\>" 0 9 (isearch-case-fold-search nil)) #("\\_<init-elpa\\_>" 0 15 (isearch-case-fold-search nil)) #("\\_<init-autoload\\_>" 0 19 (isearch-case-fold-search nil))))
(setq extended-command-history '("projectile-add-known-project" "make-directory" "clang-format" "eww" "eww-switch-to-buffer" "markdown-live-preview-mode" "browse-url-of-buffer" "evil-mode" "org-mode" "markdown-mode" "mkdir" "package-install" "lsp-describe-session" "eaf-install" "ansi-term" "shell" "eval-buffer" "restart-emacs-start-new-emacs"))
(setq kill-ring '(#(")" 0 1 (face (rainbow-delimiters-unmatched-face) fontified t)) #("   dotspacemacs-install-packages 'used-only))
" 0 43 (yank-handler #1=(evil-yank-line-handler nil t) fontified t) 43 44 (yank-handler #1# face (rainbow-delimiters-depth-1-face) fontified t) 44 45 (yank-handler #1# face (rainbow-delimiters-unmatched-face) fontified t) 45 46 (yank-handler #1# fontified t)) "   dotspacemacs-install-packages 'used-only))
" #("   dotspacemacs-install-packages 'used-only))
" 0 43 (yank-handler #2=(evil-yank-line-handler nil t) fontified t) 43 44 (yank-handler #2# face (rainbow-delimiters-depth-1-face) fontified t) 44 45 (yank-handler #2# face (rainbow-delimiters-unmatched-face) fontified t) 45 46 (yank-handler #2# fontified t)) "-rw-r--r--  1 edward edward    26326  6月10日 15:29" #("\"" 0 1 (face font-lock-string-face fontified t)) "~/.emacs.d/addLayer/holo-layer" #("-" 0 1 (face font-lock-comment-face fontified t)) #("-" 0 1 (face font-lock-comment-face fontified t)) #("-" 0 1 (face font-lock-comment-face fontified t)) #("-" 0 1 (face font-lock-comment-face fontified t)) #("-" 0 1 (face font-lock-comment-face fontified t)) #("-" 0 1 (face font-lock-comment-face fontified t)) #("-" 0 1 (face font-lock-comment-face fontified t)) #("-" 0 1 (face font-lock-comment-face fontified t)) #("-" 0 1 (face font-lock-comment-face fontified t)) #("s" 0 1 (face font-lock-comment-face fontified t)) #("-" 0 1 (face font-lock-comment-face fontified t)) #("-" 0 1 (face font-lock-comment-face fontified t)) #("-" 0 1 (face font-lock-comment-face fontified t)) #("-" 0 1 (face font-lock-comment-face fontified t)) #("s" 0 1 (face font-lock-comment-face fontified t)) #("-" 0 1 (face font-lock-comment-face fontified t)) #("  ;;------------------------------org config-----------------------------------------------------------
" 0 2 (yank-handler #3=(evil-yank-line-handler nil t) fontified t) 2 4 (yank-handler #3# face font-lock-comment-delimiter-face fontified t) 4 104 (yank-handler #3# face font-lock-comment-face fontified t)) #(" " 0 1 (fontified t)) #(" " 0 1 (fontified t)) #(" " 0 1 (fontified t)) #(" " 0 1 (fontified t)) #(" " 0 1 (fontified t)) #(" " 0 1 (fontified t)) #(" " 0 1 (fontified t)) "(add-to-list 'load-path \"<path-to-holo-layer>\")
(require 'holo-layer)
(holo-layer-enable)" #("    (org :variables
" 0 4 (yank-handler #4=(evil-yank-line-handler nil t) fontified t) 4 5 (yank-handler #4# face (rainbow-delimiters-depth-4-face) fontified t) 5 9 (yank-handler #4# fontified t) 9 19 (yank-handler #4# face font-lock-builtin-face fontified t) 19 20 (yank-handler #4# fontified t)) #("
" 0 1 (yank-handler (evil-yank-line-handler nil t) fontified t)) #("     web-beautify
" 0 17 (yank-handler #5=(evil-yank-line-handler nil t) fontified t) 17 18 (yank-handler #5# fontified t)) "(add-to-list 'load-path \"<path-to-holo-layer>\")
(require 'holo-layer)
(holo-layer-enable)
" #("#include <gtk-2.0/gtk/gtk.h> // In Archlinux
" 0 1 (yank-handler #6=(evil-yank-line-handler nil t) face font-lock-preprocessor-face c-in-sws t c-is-sws t fontified t) 1 2 (yank-handler #6# face font-lock-preprocessor-face c-in-sws t fontified t) 2 3 (yank-handler #6# face font-lock-preprocessor-face c-in-sws t fontified t) 3 4 (yank-handler #6# face font-lock-preprocessor-face c-in-sws t fontified t) 4 5 (yank-handler #6# face font-lock-preprocessor-face c-in-sws t fontified t) 5 6 (yank-handler #6# face font-lock-preprocessor-face c-in-sws t fontified t) 6 7 (yank-handler #6# face font-lock-preprocessor-face c-in-sws t fontified t) 7 8 (yank-handler #6# face font-lock-preprocessor-face c-in-sws t fontified t) 8 9 (yank-handler #6# c-in-sws t fontified t) 9 10 (yank-handler #6# face (rainbow-delimiters-depth-1-face font-lock-string-face) category c-<-as-paren-syntax c-in-sws t fontified t) 10 14 (yank-handler #6# face font-lock-string-face c-in-sws t fontified t) 14 17 (yank-handler #6# face font-lock-string-face c-in-sws t fontified t) 17 27 (yank-handler #6# face font-lock-string-face c-in-sws t fontified t) 27 28 (yank-handler #6# face (rainbow-delimiters-depth-1-face font-lock-string-face) category c->-as-paren-syntax c-in-sws t fontified t) 28 29 (yank-handler #6# c-in-sws t fontified t) 29 30 (yank-handler #6# face font-lock-comment-delimiter-face c-in-sws t fontified t) 30 31 (yank-handler #6# face font-lock-comment-delimiter-face c-in-sws t fontified t) 31 32 (yank-handler #6# face font-lock-comment-delimiter-face c-in-sws t fontified t) 32 33 (yank-handler #6# face font-lock-comment-face c-in-sws t fontified t) 33 34 (yank-handler #6# face font-lock-comment-face c-in-sws t fontified t) 34 35 (yank-handler #6# face font-lock-comment-face c-in-sws t fontified t) 35 36 (yank-handler #6# face font-lock-comment-face c-in-sws t fontified t) 36 37 (yank-handler #6# face font-lock-comment-face c-in-sws t fontified t) 37 38 (yank-handler #6# face font-lock-comment-face c-in-sws t fontified t) 38 39 (yank-handler #6# face font-lock-comment-face c-in-sws t fontified t) 39 40 (yank-handler #6# face font-lock-comment-face c-in-sws t fontified t) 40 41 (yank-handler #6# face font-lock-comment-face c-in-sws t fontified t) 41 42 (yank-handler #6# face font-lock-comment-face c-in-sws t fontified t) 42 43 (yank-handler #6# face font-lock-comment-face c-in-sws t fontified t) 43 44 (yank-handler #6# face font-lock-comment-face c-in-sws t fontified t) 44 45 (yank-handler #6# face font-lock-comment-face fontified t c-in-sws t)) #("#include <gtk-2.0/gtk/gtk.h> // In Archlinux
" 0 1 (yank-handler #7=(evil-yank-line-handler nil t) face font-lock-preprocessor-face c-in-sws t c-is-sws t fontified t) 1 2 (yank-handler #7# face font-lock-preprocessor-face c-in-sws t fontified t) 2 3 (yank-handler #7# face font-lock-preprocessor-face c-in-sws t fontified t) 3 4 (yank-handler #7# face font-lock-preprocessor-face c-in-sws t fontified t) 4 5 (yank-handler #7# face font-lock-preprocessor-face c-in-sws t fontified t) 5 6 (yank-handler #7# face font-lock-preprocessor-face c-in-sws t fontified t) 6 7 (yank-handler #7# face font-lock-preprocessor-face c-in-sws t fontified t) 7 8 (yank-handler #7# face font-lock-preprocessor-face c-in-sws t fontified t) 8 9 (yank-handler #7# c-in-sws t fontified t) 9 10 (yank-handler #7# face (rainbow-delimiters-depth-1-face font-lock-string-face) category c-<-as-paren-syntax c-in-sws t fontified t) 10 14 (yank-handler #7# face font-lock-string-face c-in-sws t fontified t) 14 17 (yank-handler #7# face font-lock-string-face c-in-sws t fontified t) 17 27 (yank-handler #7# face font-lock-string-face c-in-sws t fontified t) 27 28 (yank-handler #7# face (rainbow-delimiters-depth-1-face font-lock-string-face) category c->-as-paren-syntax c-in-sws t fontified t) 28 29 (yank-handler #7# c-in-sws t fontified t) 29 30 (yank-handler #7# face font-lock-comment-delimiter-face c-in-sws t fontified t) 30 31 (yank-handler #7# face font-lock-comment-delimiter-face c-in-sws t fontified t) 31 32 (yank-handler #7# face font-lock-comment-delimiter-face c-in-sws t fontified t) 32 33 (yank-handler #7# face font-lock-comment-face c-in-sws t fontified t) 33 34 (yank-handler #7# face font-lock-comment-face c-in-sws t fontified t) 34 35 (yank-handler #7# face font-lock-comment-face c-in-sws t fontified t) 35 36 (yank-handler #7# face font-lock-comment-face c-in-sws t fontified t) 36 37 (yank-handler #7# face font-lock-comment-face c-in-sws t fontified t) 37 38 (yank-handler #7# face font-lock-comment-face c-in-sws t fontified t) 38 39 (yank-handler #7# face font-lock-comment-face c-in-sws t fontified t) 39 40 (yank-handler #7# face font-lock-comment-face c-in-sws t fontified t) 40 41 (yank-handler #7# face font-lock-comment-face c-in-sws t fontified t) 41 42 (yank-handler #7# face font-lock-comment-face c-in-sws t fontified t) 42 43 (yank-handler #7# face font-lock-comment-face c-in-sws t fontified t) 43 44 (yank-handler #7# face font-lock-comment-face c-in-sws t fontified t) 44 45 (yank-handler #7# face font-lock-comment-face fontified t c-in-sws t)) #("#include <gtk-2.0/gtk/gtk.h> // In Archlinux
" 0 1 (yank-handler #8=(evil-yank-line-handler nil t) face font-lock-preprocessor-face c-in-sws t c-is-sws t fontified t) 1 2 (yank-handler #8# face font-lock-preprocessor-face c-in-sws t fontified t) 2 3 (yank-handler #8# face font-lock-preprocessor-face c-in-sws t fontified t) 3 4 (yank-handler #8# face font-lock-preprocessor-face c-in-sws t fontified t) 4 5 (yank-handler #8# face font-lock-preprocessor-face c-in-sws t fontified t) 5 6 (yank-handler #8# face font-lock-preprocessor-face c-in-sws t fontified t) 6 7 (yank-handler #8# face font-lock-preprocessor-face c-in-sws t fontified t) 7 8 (yank-handler #8# face font-lock-preprocessor-face c-in-sws t fontified t) 8 9 (yank-handler #8# c-in-sws t fontified t) 9 10 (yank-handler #8# face (rainbow-delimiters-depth-1-face font-lock-string-face) c-in-sws t category c-<-as-paren-syntax fontified t) 10 14 (yank-handler #8# face font-lock-string-face c-in-sws t fontified t) 14 17 (yank-handler #8# face font-lock-string-face c-in-sws t fontified t) 17 27 (yank-handler #8# face font-lock-string-face c-in-sws t fontified t) 27 28 (yank-handler #8# face (rainbow-delimiters-depth-1-face font-lock-string-face) c-in-sws t category c->-as-paren-syntax fontified t) 28 29 (yank-handler #8# c-in-sws t fontified t) 29 30 (yank-handler #8# face font-lock-comment-delimiter-face c-in-sws t fontified t) 30 31 (yank-handler #8# face font-lock-comment-delimiter-face c-in-sws t fontified t) 31 32 (yank-handler #8# face font-lock-comment-delimiter-face c-in-sws t fontified t) 32 33 (yank-handler #8# face font-lock-comment-face c-in-sws t fontified t) 33 34 (yank-handler #8# face font-lock-comment-face c-in-sws t fontified t) 34 35 (yank-handler #8# face font-lock-comment-face c-in-sws t fontified t) 35 36 (yank-handler #8# face font-lock-comment-face c-in-sws t fontified t) 36 37 (yank-handler #8# face font-lock-comment-face c-in-sws t fontified t) 37 38 (yank-handler #8# face font-lock-comment-face c-in-sws t fontified t) 38 39 (yank-handler #8# face font-lock-comment-face c-in-sws t fontified t) 39 40 (yank-handler #8# face font-lock-comment-face c-in-sws t fontified t) 40 41 (yank-handler #8# face font-lock-comment-face c-in-sws t fontified t) 41 42 (yank-handler #8# face font-lock-comment-face c-in-sws t fontified t) 42 43 (yank-handler #8# face font-lock-comment-face c-in-sws t fontified t) 43 44 (yank-handler #8# face font-lock-comment-face c-in-sws t fontified t) 44 45 (yank-handler #8# face font-lock-comment-face c-in-sws t fontified t)) "libs := `pkg-config --cflags --libs gtk+-2.0 webkit-1.0`
" " env QT_SCREEN_SCALE_FACTORS=1 " " env QT_SCREEN_SCALE_FACTORS=1 " #("libs := `pkg-config --cflags --libs gtk+-2.0 vte`
" 0 4 (yank-handler #9=(evil-yank-line-handler nil t) face font-lock-variable-name-face fontified t) 4 8 (yank-handler #9# fontified t) 8 49 (yank-handler #9# face font-lock-string-face fontified t) 49 50 (yank-handler #9# fontified t)) "webkitgtk2" #("libs := `pkg-config --cflags --libs gtksourceview-2.0 enca`
" 0 4 (yank-handler #10=(evil-yank-line-handler nil t) face font-lock-variable-name-face fontified t) 4 8 (yank-handler #10# fontified t) 8 59 (yank-handler #10# face font-lock-string-face fontified t) 59 60 (yank-handler #10# fontified t)) "gtk2fontsel" #("
" 0 1 (yank-handler (evil-yank-line-handler nil t))) #("set recolor true
" 0 17 (yank-handler (evil-yank-line-handler nil t))) "zathura-ps" "set selection-clipboard clipboard
set statusbar-home-tilde" #("
" 0 1 (yank-handler (evil-yank-line-handler nil t))) #("
" 0 1 (yank-handler (evil-yank-line-handler nil t))) #("作者：___邹忌修___
链接：https://www.jianshu.com/p/d2d5d3f01162
来源：简书
著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。
" 0 96 (yank-handler (evil-yank-line-handler nil t))) "set recolor true

set recolor-darkcolor\"#dcdccc\"

set recolor-lightcolor\"#1f1f1f\"

set window-title-basename\"true\"

set selection-clipboard\"clipboard\"



作者：___邹忌修___
链接：https://www.jianshu.com/p/d2d5d3f01162
来源：简书
著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。" "set recolor true

# midnight mode    
map <F1> focus_inputbar \":set recolor-lightcolor \\#002b36\"    
map <F2> focus_inputbar \":set recolor-darkcolor \\#839496\"    
map ! feedkeys \"<F1><Return><F2><Return>\"    
# amber on dark slate        
map <F3> focus_inputbar \":set recolor-lightcolor \\#0a0a12\"    
map <F4> focus_inputbar \":set recolor-darkcolor \\#ff9900\"    
map @ feedkeys \"<F3><Return><F4><Return>\"    
# green on black    
map <F6> focus_inputbar \":set recolor-lightcolor #000000\"    
map <F7> focus_inputbar \":set recolor-darkcolor \\#00B800\"    
map \\# feedkeys \"<F6><Return><F7><Return>\"    
# original (black on white)    
map <F8> focus_inputbar \":set recolor-lightcolor \\#ffffff\"    
map <F9> focus_inputbar \":set recolor-darkcolor \\#000000\"    
map $ feedkeys \"<F8><Return><F9><Return>\"  " "map ! feedkeys  \":set recolor-lightcolor \\#ffffff<Return>:set recolor-darkcolor \\#000000<Return>\" # original (black on white) 
map @ feedkeys  \":set recolor-lightcolor \\#0a0a12<Return>:set recolor-darkcolor \\#ff9900<Return>\" # amber on dark slate
map \\# feedkeys \":set recolor-lightcolor \\#000000<Return>:set recolor-darkcolor \\#00B800<Return>\" # green on black
map $ feedkeys  \":set recolor-lightcolor \\#002b36<Return>:set recolor-darkcolor \\#839496<Return>\" # bluish (midnight mode)" "" "~/.config/zathura/zathurarc" #("	" 0 1 (face font-lock-comment-delimiter-face fontified t)) #("    proxychains git clone $@ 2>&1 | grep -v \"\\[proxychains\\]\"
" 0 4 (yank-handler #11=(evil-yank-line-handler nil t) fontified t) 4 27 (yank-handler #11# fontified t) 27 28 (yank-handler #11# face font-lock-variable-name-face syntax-table #13=(3) fontified t) 28 29 (yank-handler #11# fontified t) 29 30 (yank-handler #11# face highlight-numbers-number fontified t) 30 32 (yank-handler #11# fontified t) 32 33 (yank-handler #11# face highlight-numbers-number fontified t) 33 34 (yank-handler #11# fontified t) 34 44 (yank-handler #11# fontified t) 44 45 (yank-handler #11# face font-lock-string-face fontified t) 45 46 (yank-handler #11# face font-lock-string-face fontified t) 46 47 (yank-handler #11# face font-lock-string-face fontified t) 47 58 (yank-handler #11# face font-lock-string-face fontified t) 58 59 (yank-handler #11# face font-lock-string-face fontified t) 59 60 (yank-handler #11# face font-lock-string-face fontified t) 60 61 (yank-handler #11# face font-lock-string-face fontified t) 61 62 (yank-handler #11# fontified t)) #("2" 0 1 (face highlight-numbers-number fontified t)) "proxychains git clone https://github.com/j2969719/doublecmd-plugins.git | sed '/proxychains/d'
" #("function pcgc() {
    proxychains git clone $@ 2>&1 | grep -v \"\\[proxychains\\]\"
}
" 0 8 (yank-handler #12=(evil-yank-line-handler nil t) face font-lock-keyword-face fontified t) 8 9 (yank-handler #12# fontified t) 9 13 (yank-handler #12# face font-lock-function-name-face fontified t) 13 14 (yank-handler #12# face #15=(rainbow-delimiters-depth-1-face) fontified t) 14 15 (yank-handler #12# face #14=(rainbow-delimiters-depth-1-face) fontified t) 15 16 (yank-handler #12# fontified t) 16 17 (yank-handler #12# face #16=(rainbow-delimiters-depth-1-face) fontified t) 17 18 (yank-handler #12# fontified t) 18 22 (yank-handler #12# fontified t) 22 45 (yank-handler #12# fontified t) 45 46 (yank-handler #12# face font-lock-variable-name-face syntax-table #13# fontified t) 46 47 (yank-handler #12# fontified t) 47 48 (yank-handler #12# face highlight-numbers-number fontified t) 48 50 (yank-handler #12# fontified t) 50 51 (yank-handler #12# face highlight-numbers-number fontified t) 51 52 (yank-handler #12# fontified t) 52 62 (yank-handler #12# fontified t) 62 63 (yank-handler #12# face font-lock-string-face fontified t) 63 64 (yank-handler #12# face font-lock-string-face fontified t) 64 65 (yank-handler #12# face font-lock-string-face fontified t) 65 76 (yank-handler #12# face font-lock-string-face fontified t) 76 77 (yank-handler #12# face font-lock-string-face fontified t) 77 78 (yank-handler #12# face font-lock-string-face fontified t) 78 79 (yank-handler #12# face font-lock-string-face fontified t) 79 80 (yank-handler #12# fontified t) 80 81 (yank-handler #12# face (rainbow-delimiters-depth-1-face) fontified t) 81 82 (yank-handler #12# fontified t)) "proxychains git clone $@ 命令的输出中并不包含 [proxychains] 这个字符串" #("function pcgc() {
    proxychains git clone $@ | grep -v \"\\[proxychains\\]\"
}
" 0 8 (face font-lock-keyword-face fontified t) 8 9 (fontified t) 9 13 (face font-lock-function-name-face fontified t) 13 14 (face #15# fontified t) 14 15 (face #14# fontified t) 15 16 (fontified t) 16 17 (face #16# fontified t) 17 18 (fontified t) 18 22 (fontified t) 22 45 (fontified t) 45 46 (face font-lock-variable-name-face syntax-table #13# fontified t) 46 57 (fontified t) 57 58 (face font-lock-string-face fontified t) 58 59 (face font-lock-string-face fontified t) 59 60 (face font-lock-string-face fontified t) 60 71 (face font-lock-string-face fontified t) 71 72 (face font-lock-string-face fontified t) 72 73 (face font-lock-string-face fontified t) 73 74 (face font-lock-string-face fontified t) 74 75 (fontified t) 75 76 (face #17=(rainbow-delimiters-depth-1-face) fontified t) 76 77 (fontified t)) "https://mojie.app/api/v1/client/subscribe?token=a661366dd2477c0cb8381de61ba085a3" #("function pcgc() {
    proxychains git clone $@ | grep -v \"\\[proxychains\\]\"
}
" 0 8 (face font-lock-keyword-face fontified t) 8 9 (fontified t) 9 13 (face font-lock-function-name-face fontified t) 13 14 (face #15# fontified t) 14 15 (face #14# fontified t) 15 16 (fontified t) 16 17 (face #16# fontified t) 17 18 (fontified t) 18 22 (fontified t) 22 45 (fontified t) 45 46 (face font-lock-variable-name-face syntax-table #13# fontified t) 46 57 (fontified t) 57 58 (face font-lock-string-face fontified t) 58 59 (face font-lock-string-face fontified t) 59 60 (face font-lock-string-face fontified t) 60 71 (face font-lock-string-face fontified t) 71 72 (face font-lock-string-face fontified t) 72 73 (face font-lock-string-face fontified t) 73 74 (face font-lock-string-face fontified t) 74 75 (fontified t) 75 76 (face #17# fontified t) 76 77 (fontified t)) #("'" 0 1 (face font-lock-string-face fontified t rear-nonsticky t)) #("'" 0 1 (face font-lock-string-face fontified t)) #("    
" 0 4 (yank-handler #18=(evil-yank-line-handler nil t) fontified t) 4 5 (yank-handler #18# rear-nonsticky t fontified t)) #("=" 0 1 (fontified t)) #("c" 0 1 (face font-lock-variable-name-face fontified t)) #("g" 0 1 (face font-lock-variable-name-face fontified t)) #("c" 0 1 (face font-lock-variable-name-face fontified t)) #("p" 0 1 (face font-lock-variable-name-face fontified t)) #(" " 0 1 (fontified t)) #("s" 0 1 (fontified t)) #("a" 0 1 (fontified t)) #("i" 0 1 (fontified t)) #("l" 0 1 (fontified t)) #("a" 0 1 (face font-lock-builtin-face fontified t)) #("alias pcgc='proxychains git clone $@ | grep -v \"\\[proxychains\\]\"'
" 0 5 (yank-handler #19=(evil-yank-line-handler nil t) face font-lock-builtin-face fontified t) 5 6 (yank-handler #19# fontified t) 6 8 (yank-handler #19# face font-lock-variable-name-face fontified t) 8 10 (yank-handler #19# face font-lock-variable-name-face fontified t) 10 11 (yank-handler #19# fontified t) 11 35 (yank-handler #19# face font-lock-string-face fontified t) 35 36 (yank-handler #19# face font-lock-string-face syntax-table #13# fontified t) 36 47 (yank-handler #19# face font-lock-string-face fontified t) 47 48 (yank-handler #19# face font-lock-string-face fontified t) 48 49 (yank-handler #19# face font-lock-string-face fontified t) 49 50 (yank-handler #19# face font-lock-string-face fontified t) 50 61 (yank-handler #19# face font-lock-string-face fontified t) 61 62 (yank-handler #19# face font-lock-string-face fontified t) 62 63 (yank-handler #19# face font-lock-string-face fontified t) 63 64 (yank-handler #19# face font-lock-string-face fontified t) 64 65 (yank-handler #19# face font-lock-string-face fontified t rear-nonsticky t) 65 66 (yank-handler #19# fontified t)) "https://github.com/j2969719/doublecmd-plugins.git                         18:18.17 六 6月 22 2024 >>>
[proxychains] config fil" #("  (define-key evil-normal-state-map (kbd \"SPC fez\") 'open-zshrc-file)
" 0 2 (yank-handler #20=(evil-yank-line-handler nil t) fontified t) 2 3 (yank-handler #20# face (rainbow-delimiters-depth-2-face) fontified t) 3 36 (yank-handler #20# fontified t) 36 37 (yank-handler #20# face (rainbow-delimiters-depth-3-face) fontified t) 37 41 (yank-handler #20# fontified t) 41 50 (yank-handler #20# face font-lock-string-face fontified t) 50 51 (yank-handler #20# face (rainbow-delimiters-depth-3-face) fontified t) 51 68 (yank-handler #20# fontified t) 68 69 (yank-handler #20# face (rainbow-delimiters-depth-2-face) fontified t) 69 70 (yank-handler #20# fontified t)) "如何写一个spaceamcs的配置函数，要求按下SPC fer 可以source ～/.zshrc文件" #("1" 0 1 (face font-lock-string-face fontified t)) #("&" 0 1 (face font-lock-string-face fontified t)) #(">" 0 1 (face font-lock-string-face fontified t)) #("2" 0 1 (face font-lock-string-face fontified t)) #(" " 0 1 (face font-lock-string-face fontified t)) #("'" 0 1 (face font-lock-string-face rear-nonsticky t fontified t)) #("2>&1 | grep -v \"\\[proxychains\\]\"'" 0 16 (yank-handler #21=(evil-yank-block-handler (#("2>&1 | grep -v \"\\[proxychains\\]\"'" 0 16 (face font-lock-comment-face fontified t) 16 17 (face font-lock-comment-face fontified t) 17 18 (face font-lock-comment-face fontified t) 18 29 (face font-lock-comment-face fontified t) 29 30 (face font-lock-comment-face fontified t) 30 31 (face font-lock-comment-face fontified t) 31 32 (face font-lock-comment-face fontified t) 32 33 (face font-lock-comment-face fontified t rear-nonsticky t))) t evil-delete-yanked-rectangle) fontified t face font-lock-comment-face) 16 17 (yank-handler #21# fontified t face font-lock-comment-face) 17 18 (yank-handler #21# fontified t face font-lock-comment-face) 18 29 (yank-handler #21# fontified t face font-lock-comment-face) 29 30 (yank-handler #21# fontified t face font-lock-comment-face) 30 31 (yank-handler #21# fontified t face font-lock-comment-face) 31 32 (yank-handler #21# fontified t face font-lock-comment-face) 32 33 (yank-handler #21# rear-nonsticky t fontified t face font-lock-comment-face)) #("2>&1 | grep -v \"\\[proxychains\\]\"'" 0 16 (yank-handler #22=(evil-yank-block-handler (#("2>&1 | grep -v \"\\[proxychains\\]\"'" 0 16 (face font-lock-comment-face fontified t) 16 17 (face font-lock-comment-face fontified t) 17 18 (face font-lock-comment-face fontified t) 18 29 (face font-lock-comment-face fontified t) 29 30 (face font-lock-comment-face fontified t) 30 31 (face font-lock-comment-face fontified t) 31 32 (face font-lock-comment-face fontified t) 32 33 (face font-lock-comment-face fontified t rear-nonsticky t))) t evil-delete-yanked-rectangle) fontified t face font-lock-comment-face) 16 17 (yank-handler #22# fontified t face font-lock-comment-face) 17 18 (yank-handler #22# fontified t face font-lock-comment-face) 18 29 (yank-handler #22# fontified t face font-lock-comment-face) 29 30 (yank-handler #22# fontified t face font-lock-comment-face) 30 31 (yank-handler #22# fontified t face font-lock-comment-face) 31 32 (yank-handler #22# fontified t face font-lock-comment-face) 32 33 (yank-handler #22# rear-nonsticky t fontified t face font-lock-comment-face)) "分别使用 pc 和 gc 这两个alias了" #("]" 0 1 (face font-lock-string-face fontified t)) #("\\" 0 1 (face font-lock-string-face fontified t)) #("[" 0 1 (face font-lock-string-face fontified t)) #("\\" 0 1 (face font-lock-string-face fontified t)) #("  (defun Refresh-zshrc ()
    \"Refresh the .zshrc file in the home directory.\"
    (interactive)
    (find-file \"~/.zshrc\"))

" 0 1 (yank-handler #23=(evil-yank-line-handler nil t) fontified t) 1 2 (yank-handler #23# rear-nonsticky t fontified t) 2 3 (yank-handler #23# face (rainbow-delimiters-depth-2-face) fontified t) 3 8 (yank-handler #23# face font-lock-keyword-face fontified t) 8 9 (yank-handler #23# fontified t) 9 22 (yank-handler #23# face font-lock-function-name-face fontified t) 22 23 (yank-handler #23# fontified t) 23 24 (yank-handler #23# face (rainbow-delimiters-depth-3-face) fontified t) 24 25 (yank-handler #23# face (rainbow-delimiters-depth-3-face) fontified t) 25 26 (yank-handler #23# fontified t) 26 30 (yank-handler #23# fontified t) 30 31 (yank-handler #23# face font-lock-doc-face fontified t) 31 38 (yank-handler #23# face font-lock-doc-face fontified t) 38 78 (yank-handler #23# face font-lock-doc-face fontified t) 78 79 (yank-handler #23# fontified t) 79 83 (yank-handler #23# fontified t) 83 84 (yank-handler #23# face (rainbow-delimiters-depth-3-face) fontified t) 84 95 (yank-handler #23# face font-lock-keyword-face fontified t) 95 96 (yank-handler #23# face (rainbow-delimiters-depth-3-face) fontified t) 96 101 (yank-handler #23# fontified t) 101 102 (yank-handler #23# face (rainbow-delimiters-depth-3-face) fontified t) 102 112 (yank-handler #23# fontified t) 112 122 (yank-handler #23# face font-lock-string-face fontified t) 122 123 (yank-handler #23# face (rainbow-delimiters-depth-3-face) fontified t) 123 124 (yank-handler #23# face (rainbow-delimiters-depth-2-face) fontified t) 124 125 (yank-handler #23# fontified t) 125 126 (yank-handler #23# fontified t)) #("  (defun open-zshrc-file ()
    \"Open the .zshrc file in the home directory.\"
    (interactive)
    (find-file \"~/.zshrc\"))
" 0 2 (yank-handler #24=(evil-yank-line-handler nil t) fontified t) 2 3 (yank-handler #24# face (rainbow-delimiters-depth-2-face) fontified t) 3 8 (yank-handler #24# face font-lock-keyword-face fontified t) 8 9 (yank-handler #24# fontified t) 9 24 (yank-handler #24# face font-lock-function-name-face fontified t) 24 25 (yank-handler #24# fontified t) 25 26 (yank-handler #24# face (rainbow-delimiters-depth-3-face) fontified t) 26 27 (yank-handler #24# face (rainbow-delimiters-depth-3-face) fontified t) 27 32 (yank-handler #24# fontified t) 32 77 (yank-handler #24# face font-lock-doc-face fontified t) 77 82 (yank-handler #24# fontified t) 82 83 (yank-handler #24# face (rainbow-delimiters-depth-3-face) fontified t) 83 94 (yank-handler #24# face font-lock-keyword-face fontified t) 94 95 (yank-handler #24# face (rainbow-delimiters-depth-3-face) fontified t) 95 100 (yank-handler #24# fontified t) 100 101 (yank-handler #24# face (rainbow-delimiters-depth-3-face) fontified t) 101 111 (yank-handler #24# fontified t) 111 121 (yank-handler #24# face font-lock-string-face fontified t) 121 122 (yank-handler #24# face (rainbow-delimiters-depth-3-face) fontified t) 122 123 (yank-handler #24# face (rainbow-delimiters-depth-2-face) fontified t) 123 124 (yank-handler #24# fontified t)) "只保留包含 [proxychains] 的行。" #("alias pc='proxychains $^ 2>&1 | grep \"\\[proxychains\\]\"'
alias gc='proxychains git clone $@'
" 0 5 (yank-handler #25=(evil-yank-line-handler nil t) face font-lock-builtin-face fontified t) 5 6 (yank-handler #25# fontified t) 6 8 (yank-handler #25# face font-lock-variable-name-face fontified t) 8 9 (yank-handler #25# fontified t) 9 24 (yank-handler #25# face font-lock-string-face fontified t) 24 54 (yank-handler #25# face font-lock-string-face fontified t) 54 55 (yank-handler #25# face font-lock-string-face fontified t rear-nonsticky t) 55 56 (yank-handler #25# rear-nonsticky t fontified t) 56 61 (yank-handler #25# face font-lock-builtin-face fontified t) 61 62 (yank-handler #25# fontified t) 62 64 (yank-handler #25# face font-lock-variable-name-face fontified t) 64 65 (yank-handler #25# fontified t) 65 89 (yank-handler #25# face font-lock-string-face fontified t) 89 90 (yank-handler #25# face font-lock-string-face fontified t syntax-table #13#) 90 91 (yank-handler #25# face font-lock-string-face fontified t) 91 92 (yank-handler #25# fontified t)) #("alias pc='proxychains $^ 2>&1 | grep \"\\[proxychains\\]\"'
alias gc='proxychains git clone $@'
" 0 5 (yank-handler #26=(evil-yank-line-handler nil t) face font-lock-builtin-face fontified t) 5 6 (yank-handler #26# fontified t) 6 8 (yank-handler #26# face font-lock-variable-name-face fontified t) 8 9 (yank-handler #26# fontified t) 9 24 (yank-handler #26# face font-lock-string-face fontified t) 24 54 (yank-handler #26# face font-lock-string-face fontified t) 54 55 (yank-handler #26# face font-lock-string-face fontified t rear-nonsticky t) 55 56 (yank-handler #26# rear-nonsticky t fontified t) 56 61 (yank-handler #26# face font-lock-builtin-face fontified t) 61 62 (yank-handler #26# fontified t) 62 64 (yank-handler #26# face font-lock-variable-name-face fontified t) 64 65 (yank-handler #26# fontified t) 65 89 (yank-handler #26# face font-lock-string-face fontified t) 89 90 (yank-handler #26# face font-lock-string-face syntax-table #13# fontified t) 90 91 (yank-handler #26# face font-lock-string-face fontified t) 91 92 (yank-handler #26# fontified t)) #("alias gc='proxychains git clone'
" 0 5 (yank-handler #27=(evil-yank-line-handler nil t) face font-lock-builtin-face fontified t) 5 6 (yank-handler #27# fontified t) 6 8 (yank-handler #27# face font-lock-variable-name-face fontified t) 8 9 (yank-handler #27# fontified t) 9 32 (yank-handler #27# face font-lock-string-face fontified t) 32 33 (yank-handler #27# fontified t)) #(" " 0 1 (fontified t)) #("#" 0 1 (face font-lock-comment-delimiter-face fontified t)) #(" " 0 1 (face font-lock-string-face fontified t)) #("e" 0 1 (face font-lock-string-face fontified t)) #("n" 0 1 (face font-lock-string-face fontified t)) #("o" 0 1 (face font-lock-string-face fontified t)) #("l" 0 1 (face font-lock-string-face fontified t)) #("c" 0 1 (face font-lock-string-face fontified t)) #(" " 0 1 (face font-lock-string-face fontified t)) #("t" 0 1 (face font-lock-string-face fontified t)) #("i" 0 1 (face font-lock-string-face fontified t)) #("g" 0 1 (face font-lock-string-face fontified t)) #("e" 0 1 (face font-lock-variable-name-face fontified t)) #("n" 0 1 (face font-lock-variable-name-face fontified t)) #("o" 0 1 (face font-lock-variable-name-face fontified t)) #("l" 0 1 (face font-lock-variable-name-face fontified t))))
