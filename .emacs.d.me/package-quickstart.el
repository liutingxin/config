;;; Quickstart file to activate all packages at startup  -*- lexical-binding:t -*-
;; ¡¡ This file is autogenerated by `package-quickstart-refresh', DO NOT EDIT !!

(let ((load-true-file-name "/home/cam/.emacs.d/elpa/all-the-icons-5.0.0/all-the-icons-autoloads.el")(load-file-name "/home/cam/.emacs.d/elpa/all-the-icons-5.0.0/all-the-icons-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/home/cam/.emacs.d/elpa/all-the-icons-5.0.0/all-the-icons-autoloads.el") (car load-path))))



(autoload 'all-the-icons-icon-for-dir "all-the-icons" "\
Get the formatted icon for DIR.
ARG-OVERRIDES should be a plist containining `:height',
`:v-adjust' or `:face' properties like in the normal icon
inserting functions.

Note: You want chevron, please use `all-the-icons-icon-for-dir-with-chevron'.

\(fn DIR &rest ARG-OVERRIDES)" nil nil)

(autoload 'all-the-icons-icon-for-file "all-the-icons" "\
Get the formatted icon for FILE.
ARG-OVERRIDES should be a plist containining `:height',
`:v-adjust' or `:face' properties like in the normal icon
inserting functions.

\(fn FILE &rest ARG-OVERRIDES)" nil nil)

(autoload 'all-the-icons-icon-for-mode "all-the-icons" "\
Get the formatted icon for MODE.
ARG-OVERRIDES should be a plist containining `:height',
`:v-adjust' or `:face' properties like in the normal icon
inserting functions.

\(fn MODE &rest ARG-OVERRIDES)" nil nil)

(autoload 'all-the-icons-icon-for-url "all-the-icons" "\
Get the formatted icon for URL.
If an icon for URL isn't found in `all-the-icons-url-alist', a globe is used.
ARG-OVERRIDES should be a plist containining `:height',
`:v-adjust' or `:face' properties like in the normal icon
inserting functions.

\(fn URL &rest ARG-OVERRIDES)" nil nil)

(autoload 'all-the-icons-install-fonts "all-the-icons" "\
Helper function to download and install the latests fonts based on OS.
When PFX is non-nil, ignore the prompt and just install

\(fn &optional PFX)" t nil)

(autoload 'all-the-icons-insert "all-the-icons" "\
Interactive icon insertion function.
When Prefix ARG is non-nil, insert the propertized icon.
When FAMILY is non-nil, limit the candidates to the icon set matching it.

\(fn &optional ARG FAMILY)" t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "all-the-icons" '("all-the-icons-")))




)
(let ((load-true-file-name "/home/cam/.emacs.d/elpa/zerodark-theme-20211115.841/zerodark-theme-autoloads.el")(load-file-name "/home/cam/.emacs.d/elpa/zerodark-theme-20211115.841/zerodark-theme-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/home/cam/.emacs.d/elpa/zerodark-theme-20211115.841/zerodark-theme-autoloads.el") (car load-path))))



(autoload 'zerodark-setup-modeline-format "zerodark-theme" "\
Setup the mode-line format for zerodark." t nil)

(when (and (boundp 'custom-theme-load-path) load-file-name) (add-to-list 'custom-theme-load-path (file-name-as-directory (file-name-directory load-file-name))))

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "zerodark-theme" '("cached-for" "true-color-p" "zerodark")))




)
(let ((load-true-file-name "/home/cam/.emacs.d/elpa/zenburn-theme-20231120.2002/zenburn-theme-autoloads.el")(load-file-name "/home/cam/.emacs.d/elpa/zenburn-theme-20231120.2002/zenburn-theme-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/home/cam/.emacs.d/elpa/zenburn-theme-20231120.2002/zenburn-theme-autoloads.el") (car load-path))))



(defvar zenburn-override-colors-alist 'nil "\
Place to override default theme colors.

You can override a subset of the theme's default colors by
defining them in this alist.")

(custom-autoload 'zenburn-override-colors-alist "zenburn-theme" t)

(and load-file-name (boundp 'custom-theme-load-path) (add-to-list 'custom-theme-load-path (file-name-as-directory (file-name-directory load-file-name))))

(register-definition-prefixes "zenburn-theme" '("zenburn"))




)
(let ((load-true-file-name "/home/cam/.emacs.d/elpa/zen-and-art-theme-20120622.1437/zen-and-art-theme-autoloads.el")(load-file-name "/home/cam/.emacs.d/elpa/zen-and-art-theme-20120622.1437/zen-and-art-theme-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/home/cam/.emacs.d/elpa/zen-and-art-theme-20120622.1437/zen-and-art-theme-autoloads.el") (car load-path))))



(when load-file-name (add-to-list 'custom-theme-load-path (file-name-as-directory (file-name-directory load-file-name))))

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "zen-and-art-theme" '("zen-and-art")))




)
(let ((load-true-file-name "/home/cam/.emacs.d/elpa/yasnippet-0.14.0/yasnippet-autoloads.el")(load-file-name "/home/cam/.emacs.d/elpa/yasnippet-0.14.0/yasnippet-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/home/cam/.emacs.d/elpa/yasnippet-0.14.0/yasnippet-autoloads.el") (car load-path))))



(autoload 'yas-minor-mode "yasnippet" "\
Toggle YASnippet mode.

This is a minor mode.  If called interactively, toggle the `yas
minor mode' mode.  If the prefix argument is positive, enable the
mode, and if it is zero or negative, disable the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable
the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `yas-minor-mode'.

The mode's hook is called both when the mode is enabled and when
it is disabled.

When YASnippet mode is enabled, `yas-expand', normally bound to
the TAB key, expands snippets of code depending on the major
mode.

With no argument, this command toggles the mode.
positive prefix argument turns on the mode.
Negative prefix argument turns off the mode.

Key bindings:
\\{yas-minor-mode-map}

\(fn &optional ARG)" t nil)

(put 'yas-global-mode 'globalized-minor-mode t)

(defvar yas-global-mode nil "\
Non-nil if Yas-Global mode is enabled.
See the `yas-global-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `yas-global-mode'.")

(custom-autoload 'yas-global-mode "yasnippet" nil)

(autoload 'yas-global-mode "yasnippet" "\
Toggle Yas minor mode in all buffers.
With prefix ARG, enable Yas-Global mode if ARG is positive; otherwise,
disable it.

If called from Lisp, toggle the mode if ARG is `toggle'.
Enable the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

Yas minor mode is enabled in all buffers where `yas-minor-mode-on'
would do it.

See `yas-minor-mode' for more information on Yas minor mode.

\(fn &optional ARG)" t nil)
(autoload 'snippet-mode "yasnippet" "A mode for editing yasnippets" t nil)

(register-definition-prefixes "yasnippet" '("help-snippet-def" "snippet-mode-map" "yas"))




)
(let ((load-true-file-name "/home/cam/.emacs.d/elpa/yasnippet-snippets-1.0/yasnippet-snippets-autoloads.el")(load-file-name "/home/cam/.emacs.d/elpa/yasnippet-snippets-1.0/yasnippet-snippets-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/home/cam/.emacs.d/elpa/yasnippet-snippets-1.0/yasnippet-snippets-autoloads.el") (car load-path))))



(autoload 'yasnippet-snippets-initialize "yasnippet-snippets" "\
Load the `yasnippet-snippets' snippets directory." nil nil)

(eval-after-load 'yasnippet '(yasnippet-snippets-initialize))

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "yasnippet-snippets" '("yasnippet-snippets-")))




)
(let ((load-true-file-name "/home/cam/.emacs.d/elpa/yaml-mode-0.0.16/yaml-mode-autoloads.el")(load-file-name "/home/cam/.emacs.d/elpa/yaml-mode-0.0.16/yaml-mode-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/home/cam/.emacs.d/elpa/yaml-mode-0.0.16/yaml-mode-autoloads.el") (car load-path))))



(let ((loads (get 'yaml 'custom-loads))) (if (member '"yaml-mode" loads) nil (put 'yaml 'custom-loads (cons '"yaml-mode" loads))))

(autoload 'yaml-mode "yaml-mode" "\
Simple mode to edit YAML.

\\{yaml-mode-map}

\(fn)" t nil)

(add-to-list 'auto-mode-alist '("\\.\\(e?ya?\\|ra\\)ml\\'" . yaml-mode))

(add-to-list 'magic-mode-alist '("^%YAML\\s-+[0-9]+\\.[0-9]+\\(\\s-+#\\|\\s-*$\\)" . yaml-mode))

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "yaml-mode" '("yaml-")))




)
(let ((load-true-file-name "/home/cam/.emacs.d/elpa/xr-1.25/xr-autoloads.el")(load-file-name "/home/cam/.emacs.d/elpa/xr-1.25/xr-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/home/cam/.emacs.d/elpa/xr-1.25/xr-autoloads.el") (car load-path))))



(autoload 'xr "xr" "\
Convert a regexp string to rx notation; the inverse of `rx'.
Passing the returned value to `rx' (or `rx-to-string') yields a regexp string
equivalent to RE-STRING.  DIALECT controls the choice of keywords,
and is one of:
`verbose'       -- verbose keywords
`medium' or nil -- somewhat verbose keywords (the default)
`brief'         -- short keywords
`terse'         -- very short keywords

\(fn RE-STRING &optional DIALECT)" nil nil)

(autoload 'xr-skip-set "xr" "\
Convert a skip set string argument to rx notation.
SKIP-SET-STRING is interpreted according to the syntax of
`skip-chars-forward' and `skip-chars-backward' and converted to
a character class on `rx' form.
If desired, `rx' can then be used to convert the result to an
ordinary regexp.
See `xr' for a description of the DIALECT argument.

\(fn SKIP-SET-STRING &optional DIALECT)" nil nil)

(autoload 'xr-lint "xr" "\
Detect dubious practices and possible mistakes in RE-STRING.
This includes uses of tolerated but discouraged constructs.
Outright regexp syntax violations are signalled as errors.

If PURPOSE is `file', perform additional checks assuming that RE-STRING
is used to match a file name.

If CHECKS is absent or nil, only perform checks that are very
likely to indicate mistakes; if `all', include all checks,
including ones more likely to generate false alarms.

Return a list of (OFFSET . COMMENT) where COMMENT applies at OFFSET
in RE-STRING.

\(fn RE-STRING &optional PURPOSE CHECKS)" nil nil)

(autoload 'xr-skip-set-lint "xr" "\
Detect dubious practices and possible mistakes in SKIP-SET-STRING.
This includes uses of tolerated but discouraged constructs.
Outright syntax violations are signalled as errors.
The argument is interpreted according to the syntax of
`skip-chars-forward' and `skip-chars-backward'.
Return a list of (OFFSET . COMMENT) where COMMENT applies at OFFSET
in SKIP-SET-STRING.

\(fn SKIP-SET-STRING)" nil nil)

(autoload 'xr-pp "xr" "\
Convert to `rx' notation and output the pretty-printed result.
This function uses `xr' to translate RE-STRING into DIALECT.
It is intended for use from an interactive elisp session.
See `xr' for a description of the DIALECT argument.

\(fn RE-STRING &optional DIALECT)" nil nil)

(autoload 'xr-skip-set-pp "xr" "\
Convert a skip set string to `rx' notation and pretty-print.
This function uses `xr-skip-set' to translate SKIP-SET-STRING
into DIALECT.
It is intended for use from an interactive elisp session.
See `xr' for a description of the DIALECT argument.

\(fn SKIP-SET-STRING &optional DIALECT)" nil nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "xr" '("xr-")))




)
(let ((load-true-file-name "/home/cam/.emacs.d/elpa/ws-butler-0.6/ws-butler-autoloads.el")(load-file-name "/home/cam/.emacs.d/elpa/ws-butler-0.6/ws-butler-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/home/cam/.emacs.d/elpa/ws-butler-0.6/ws-butler-autoloads.el") (car load-path))))



(autoload 'ws-butler-mode "ws-butler" "\
White space cleanup, without obtrusive white space removal.

If called interactively, enable Ws-Butler mode if ARG is
positive, and disable it if ARG is zero or negative.  If called
from Lisp, also enable the mode if ARG is omitted or nil, and
toggle it if ARG is `toggle'; disable the mode otherwise.

Whitespaces at EOL and EOF are trimmed upon file save, and only
for lines modified by you.

\(fn &optional ARG)" t nil)

(put 'ws-butler-global-mode 'globalized-minor-mode t)

(defvar ws-butler-global-mode nil "\
Non-nil if Ws-Butler-Global mode is enabled.
See the `ws-butler-global-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `ws-butler-global-mode'.")

(custom-autoload 'ws-butler-global-mode "ws-butler" nil)

(autoload 'ws-butler-global-mode "ws-butler" "\
Toggle Ws-Butler mode in all buffers.
With prefix ARG, enable Ws-Butler-Global mode if ARG is positive;
otherwise, disable it.  If called from Lisp, enable the mode if
ARG is omitted or nil.

Ws-Butler mode is enabled in all buffers where
`(lambda nil (unless (apply #'derived-mode-p ws-butler-global-exempt-modes) (ws-butler-mode)))' would do it.
See `ws-butler-mode' for more information on Ws-Butler mode.

\(fn &optional ARG)" t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "ws-butler" '("ws-butler-")))




)
(let ((load-true-file-name "/home/cam/.emacs.d/elpa/visual-fill-column-2.5.1/visual-fill-column-autoloads.el")(load-file-name "/home/cam/.emacs.d/elpa/visual-fill-column-2.5.1/visual-fill-column-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/home/cam/.emacs.d/elpa/visual-fill-column-2.5.1/visual-fill-column-autoloads.el") (car load-path))))



(autoload 'visual-fill-column-mode "visual-fill-column" "\
Wrap lines according to `fill-column' in `visual-line-mode'.

This is a minor mode.  If called interactively, toggle the
`Visual-Fill-Column mode' mode.  If the prefix argument is
positive, enable the mode, and if it is zero or negative, disable
the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable
the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `visual-fill-column-mode'.

The mode's hook is called both when the mode is enabled and when
it is disabled.

\(fn &optional ARG)" t nil)

(put 'global-visual-fill-column-mode 'globalized-minor-mode t)

(defvar global-visual-fill-column-mode nil "\
Non-nil if Global Visual-Fill-Column mode is enabled.
See the `global-visual-fill-column-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `global-visual-fill-column-mode'.")

(custom-autoload 'global-visual-fill-column-mode "visual-fill-column" nil)

(autoload 'global-visual-fill-column-mode "visual-fill-column" "\
Toggle Visual-Fill-Column mode in all buffers.
With prefix ARG, enable Global Visual-Fill-Column mode if ARG is
positive; otherwise, disable it.

If called from Lisp, toggle the mode if ARG is `toggle'.
Enable the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

Visual-Fill-Column mode is enabled in all buffers where
`turn-on-visual-fill-column-mode' would do it.

See `visual-fill-column-mode' for more information on
Visual-Fill-Column mode.

\(fn &optional ARG)" t nil)

(autoload 'visual-fill-column-split-window-sensibly "visual-fill-column" "\
Split WINDOW sensibly, unsetting its margins first.
This function unsets the window margins and calls
`split-window-sensibly'.

By default, `split-window-sensibly' does not split a window in
two side-by-side windows if it has wide margins, even if there is
enough space for a vertical split.  This function is used as the
value of `split-window-preferred-function' to allow
`display-buffer' to split such windows.

\(fn &optional WINDOW)" nil nil)

(register-definition-prefixes "visual-fill-column" '("turn-on-visual-fill-column-mode" "visual-fill-column-"))




)
(let ((load-true-file-name "/home/cam/.emacs.d/elpa/writeroom-mode-3.11/writeroom-mode-autoloads.el")(load-file-name "/home/cam/.emacs.d/elpa/writeroom-mode-3.11/writeroom-mode-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/home/cam/.emacs.d/elpa/writeroom-mode-3.11/writeroom-mode-autoloads.el") (car load-path))))



(autoload 'writeroom-mode "writeroom-mode" "\
Minor mode for distraction-free writing.

If called interactively, enable Writeroom mode if ARG is
positive, and disable it if ARG is zero or negative.  If called
from Lisp, also enable the mode if ARG is omitted or nil, and
toggle it if ARG is `toggle'; disable the mode otherwise.

\(fn &optional ARG)" t nil)

(put 'global-writeroom-mode 'globalized-minor-mode t)

(defvar global-writeroom-mode nil "\
Non-nil if Global Writeroom mode is enabled.
See the `global-writeroom-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `global-writeroom-mode'.")

(custom-autoload 'global-writeroom-mode "writeroom-mode" nil)

(autoload 'global-writeroom-mode "writeroom-mode" "\
Toggle Writeroom mode in all buffers.
With prefix ARG, enable Global Writeroom mode if ARG is positive;
otherwise, disable it.  If called from Lisp, enable the mode if
ARG is omitted or nil.

Writeroom mode is enabled in all buffers where
`turn-on-writeroom-mode' would do it.
See `writeroom-mode' for more information on Writeroom mode.

\(fn &optional ARG)" t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "writeroom-mode" '("alpha" "bottom-divider-width" "define-writeroom-global-effect" "fullscreen" "internal-border-width" "menu-bar-lines" "sticky" "tool-bar-lines" "turn-on-writeroom-mode" "vertical-scroll-bars" "writeroom-")))




)
(let ((load-true-file-name "/home/cam/.emacs.d/elpa/compat-29.1.4.4/compat-autoloads.el")(load-file-name "/home/cam/.emacs.d/elpa/compat-29.1.4.4/compat-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/home/cam/.emacs.d/elpa/compat-29.1.4.4/compat-autoloads.el") (car load-path))))



(register-definition-prefixes "compat" '("compat-"))



(register-definition-prefixes "compat-macs" '("compat-"))




)
(let ((load-true-file-name "/home/cam/.emacs.d/elpa/with-editor-3.3.2/with-editor-autoloads.el")(load-file-name "/home/cam/.emacs.d/elpa/with-editor-3.3.2/with-editor-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/home/cam/.emacs.d/elpa/with-editor-3.3.2/with-editor-autoloads.el") (car load-path))))



(autoload 'with-editor-export-editor "with-editor" "\
Teach subsequent commands to use current Emacs instance as editor.

Set and export the environment variable ENVVAR, by default
\"EDITOR\".  The value is automatically generated to teach
commands to use the current Emacs instance as \"the editor\".

This works in `shell-mode', `term-mode', `eshell-mode' and
`vterm'.

\(fn &optional (ENVVAR \"EDITOR\"))" t nil)

(autoload 'with-editor-export-git-editor "with-editor" "\
Like `with-editor-export-editor' but always set `$GIT_EDITOR'." t nil)

(autoload 'with-editor-export-hg-editor "with-editor" "\
Like `with-editor-export-editor' but always set `$HG_EDITOR'." t nil)

(defvar shell-command-with-editor-mode nil "\
Non-nil if Shell-Command-With-Editor mode is enabled.
See the `shell-command-with-editor-mode' command
for a description of this minor mode.")

(custom-autoload 'shell-command-with-editor-mode "with-editor" nil)

(autoload 'shell-command-with-editor-mode "with-editor" "\
Teach `shell-command' to use current Emacs instance as editor.

If called interactively, enable Shell-Command-With-Editor mode if
ARG is positive, and disable it if ARG is zero or negative.  If
called from Lisp, also enable the mode if ARG is omitted or nil,
and toggle it if ARG is `toggle'; disable the mode otherwise.

Teach `shell-command', and all commands that ultimately call that
command, to use the current Emacs instance as editor by executing
\"EDITOR=CLIENT COMMAND&\" instead of just \"COMMAND&\".

CLIENT is automatically generated; EDITOR=CLIENT instructs
COMMAND to use to the current Emacs instance as \"the editor\",
assuming no other variable overrides the effect of \"$EDITOR\".
CLIENT may be the path to an appropriate emacsclient executable
with arguments, or a script which also works over Tramp.

Alternatively you can use the `with-editor-async-shell-command',
which also allows the use of another variable instead of
\"EDITOR\".

\(fn &optional ARG)" t nil)

(autoload 'with-editor-async-shell-command "with-editor" "\
Like `async-shell-command' but with `$EDITOR' set.

Execute string \"ENVVAR=CLIENT COMMAND\" in an inferior shell;
display output, if any.  With a prefix argument prompt for an
environment variable, otherwise the default \"EDITOR\" variable
is used.  With a negative prefix argument additionally insert
the COMMAND's output at point.

CLIENT is automatically generated; ENVVAR=CLIENT instructs
COMMAND to use to the current Emacs instance as \"the editor\",
assuming it respects ENVVAR as an \"EDITOR\"-like variable.
CLIENT may be the path to an appropriate emacsclient executable
with arguments, or a script which also works over Tramp.

Also see `async-shell-command' and `shell-command'.

\(fn COMMAND &optional OUTPUT-BUFFER ERROR-BUFFER ENVVAR)" t nil)

(autoload 'with-editor-shell-command "with-editor" "\
Like `shell-command' or `with-editor-async-shell-command'.
If COMMAND ends with \"&\" behave like the latter,
else like the former.

\(fn COMMAND &optional OUTPUT-BUFFER ERROR-BUFFER ENVVAR)" t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "with-editor" '("server-" "shell-command--shell-command-with-editor-mode" "start-file-process--with-editor-process-filter" "with-editor")))




)
(let ((load-true-file-name "/home/cam/.emacs.d/elpa/dash-2.19.1/dash-autoloads.el")(load-file-name "/home/cam/.emacs.d/elpa/dash-2.19.1/dash-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/home/cam/.emacs.d/elpa/dash-2.19.1/dash-autoloads.el") (car load-path))))



(autoload 'dash-fontify-mode "dash" "\
Toggle fontification of Dash special variables.

If called interactively, enable Dash-Fontify mode if ARG is
positive, and disable it if ARG is zero or negative.  If called
from Lisp, also enable the mode if ARG is omitted or nil, and
toggle it if ARG is `toggle'; disable the mode otherwise.

Dash-Fontify mode is a buffer-local minor mode intended for Emacs
Lisp buffers.  Enabling it causes the special variables bound in
anaphoric Dash macros to be fontified.  These anaphoras include
`it', `it-index', `acc', and `other'.  In older Emacs versions
which do not dynamically detect macros, Dash-Fontify mode
additionally fontifies Dash macro calls.

See also `dash-fontify-mode-lighter' and
`global-dash-fontify-mode'.

\(fn &optional ARG)" t nil)

(put 'global-dash-fontify-mode 'globalized-minor-mode t)

(defvar global-dash-fontify-mode nil "\
Non-nil if Global Dash-Fontify mode is enabled.
See the `global-dash-fontify-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `global-dash-fontify-mode'.")

(custom-autoload 'global-dash-fontify-mode "dash" nil)

(autoload 'global-dash-fontify-mode "dash" "\
Toggle Dash-Fontify mode in all buffers.
With prefix ARG, enable Global Dash-Fontify mode if ARG is positive;
otherwise, disable it.  If called from Lisp, enable the mode if
ARG is omitted or nil.

Dash-Fontify mode is enabled in all buffers where
`dash--turn-on-fontify-mode' would do it.
See `dash-fontify-mode' for more information on Dash-Fontify mode.

\(fn &optional ARG)" t nil)

(autoload 'dash-register-info-lookup "dash" "\
Register the Dash Info manual with `info-lookup-symbol'.
This allows Dash symbols to be looked up with \\[info-lookup-symbol]." t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "dash" '("!cdr" "!cons" "--" "->" "-a" "-butlast" "-c" "-d" "-e" "-f" "-gr" "-i" "-juxt" "-keep" "-l" "-m" "-no" "-o" "-p" "-r" "-s" "-t" "-u" "-value-to-list" "-when-let" "-zip" "dash-")))




)
(let ((load-true-file-name "/home/cam/.emacs.d/elpa/winum-2.1.0/winum-autoloads.el")(load-file-name "/home/cam/.emacs.d/elpa/winum-2.1.0/winum-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/home/cam/.emacs.d/elpa/winum-2.1.0/winum-autoloads.el") (car load-path))))



(defvar winum-mode nil "\
Non-nil if Winum mode is enabled.
See the `winum-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `winum-mode'.")

(custom-autoload 'winum-mode "winum" nil)

(autoload 'winum-mode "winum" "\
A minor mode that allows for managing windows based on window numbers.

If called interactively, enable Winum mode if ARG is positive,
and disable it if ARG is zero or negative.  If called from Lisp,
also enable the mode if ARG is omitted or nil, and toggle it if
ARG is `toggle'; disable the mode otherwise.

\(fn &optional ARG)" t nil)

(autoload 'winum-select-window-0-or-10 "winum" "\
Jump to window 0 if assigned or 10 if exists.
If prefix ARG is given, delete the window instead of selecting it.

\(fn &optional ARG)" t nil)

(autoload 'winum-select-window-0 "winum" "\
Jump to window 0.
If prefix ARG is given, delete the window instead of selecting it.

\(fn &optional ARG)" t nil)

(autoload 'winum-select-window-1 "winum" "\
Jump to window 1.
If prefix ARG is given, delete the window instead of selecting it.

\(fn &optional ARG)" t nil)

(autoload 'winum-select-window-2 "winum" "\
Jump to window 2.
If prefix ARG is given, delete the window instead of selecting it.

\(fn &optional ARG)" t nil)

(autoload 'winum-select-window-3 "winum" "\
Jump to window 3.
If prefix ARG is given, delete the window instead of selecting it.

\(fn &optional ARG)" t nil)

(autoload 'winum-select-window-4 "winum" "\
Jump to window 4.
If prefix ARG is given, delete the window instead of selecting it.

\(fn &optional ARG)" t nil)

(autoload 'winum-select-window-5 "winum" "\
Jump to window 5.
If prefix ARG is given, delete the window instead of selecting it.

\(fn &optional ARG)" t nil)

(autoload 'winum-select-window-6 "winum" "\
Jump to window 6.
If prefix ARG is given, delete the window instead of selecting it.

\(fn &optional ARG)" t nil)

(autoload 'winum-select-window-7 "winum" "\
Jump to window 7.
If prefix ARG is given, delete the window instead of selecting it.

\(fn &optional ARG)" t nil)

(autoload 'winum-select-window-8 "winum" "\
Jump to window 8.
If prefix ARG is given, delete the window instead of selecting it.

\(fn &optional ARG)" t nil)

(autoload 'winum-select-window-9 "winum" "\
Jump to window 9.
If prefix ARG is given, delete the window instead of selecting it.

\(fn &optional ARG)" t nil)

(autoload 'winum-select-window-by-number "winum" "\
Select or delete window which number is specified by ARG.
If the number is negative, delete the window instead of selecting it.
There are several ways to provide the number:
- if called from elisp with an argument, use it.
- if called interactively with a numeric prefix argument, use it.
- if prefix argument is the negative argument, delete window 0.
- if prefix argument is the default prefix argument, delete current window.
- if called interactively and no valid argument is provided, read from
  minibuffer.

\(fn &optional ARG)" t nil)

(autoload 'winum-set-keymap-prefix "winum" "\
Set key bindings prefix for `winum-keymap' based on `winum-base-map'.
This function overrides the value of `winum-keymap', so you
should call it before customization of `winum-keymap' and/or
after customization of `winum-base-map'.
PREFIX must be a key sequence, like the ones returned by `kbd'.

\(fn PREFIX)" nil nil)

(autoload 'winum-get-window-by-number "winum" "\
Return window numbered N if exists, nil otherwise.

\(fn N)" nil nil)

(autoload 'winum-get-number-string "winum" "\
Get the current or specified window's current number as a propertized string.
WINDOW: if specified, the window of which we want to know the number.
        If not specified, the number of the currently selected window is
        returned.

\(fn &optional WINDOW)" nil nil)

(autoload 'winum-get-number "winum" "\
Get the current or specified window's current number.
WINDOW: if specified, the window of which we want to know the number.
        If not specified, the number of the currently selected window is
        returned.

\(fn &optional WINDOW)" nil nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "winum" '("winum-")))




)
(let ((load-true-file-name "/home/cam/.emacs.d/elpa/white-sand-theme-20210131.813/white-sand-theme-autoloads.el")(load-file-name "/home/cam/.emacs.d/elpa/white-sand-theme-20210131.813/white-sand-theme-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/home/cam/.emacs.d/elpa/white-sand-theme-20210131.813/white-sand-theme-autoloads.el") (car load-path))))



(when load-file-name (add-to-list 'custom-theme-load-path (file-name-as-directory (file-name-directory load-file-name))))




)
(let ((load-true-file-name "/home/cam/.emacs.d/elpa/which-key-3.6.0/which-key-autoloads.el")(load-file-name "/home/cam/.emacs.d/elpa/which-key-3.6.0/which-key-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/home/cam/.emacs.d/elpa/which-key-3.6.0/which-key-autoloads.el") (car load-path))))



(defvar which-key-mode nil "\
Non-nil if Which-Key mode is enabled.
See the `which-key-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `which-key-mode'.")

(custom-autoload 'which-key-mode "which-key" nil)

(autoload 'which-key-mode "which-key" "\
Toggle which-key-mode.

If called interactively, enable Which-Key mode if ARG is
positive, and disable it if ARG is zero or negative.  If called
from Lisp, also enable the mode if ARG is omitted or nil, and
toggle it if ARG is `toggle'; disable the mode otherwise.

\(fn &optional ARG)" t nil)

(autoload 'which-key-setup-side-window-right "which-key" "\
Apply suggested settings for side-window that opens on right." t nil)

(autoload 'which-key-setup-side-window-right-bottom "which-key" "\
Apply suggested settings for side-window that opens on right
if there is space and the bottom otherwise." t nil)

(autoload 'which-key-setup-side-window-bottom "which-key" "\
Apply suggested settings for side-window that opens on bottom." t nil)

(autoload 'which-key-setup-minibuffer "which-key" "\
Apply suggested settings for minibuffer.
Do not use this setup if you use the paging commands. Instead use
`which-key-setup-side-window-bottom', which is nearly identical
but more functional." t nil)

(autoload 'which-key-add-keymap-based-replacements "which-key" "\
Replace the description of KEY using REPLACEMENT in KEYMAP.
KEY should take a format suitable for use in `kbd'. REPLACEMENT
should be a cons cell of the form (STRING . COMMAND) for each
REPLACEMENT, where STRING is the replacement string and COMMAND
is a symbol corresponding to the intended command to be
replaced. COMMAND can be nil if the binding corresponds to a key
prefix. An example is

\(which-key-add-keymap-based-replacements global-map
  \"C-x w\" '(\"Save as\" . write-file)).

For backwards compatibility, REPLACEMENT can also be a string,
but the above format is preferred, and the option to use a string
for REPLACEMENT will eventually be removed.

\(fn KEYMAP KEY REPLACEMENT &rest MORE)" nil nil)

(autoload 'which-key-add-key-based-replacements "which-key" "\
Replace the description of KEY-SEQUENCE with REPLACEMENT.
KEY-SEQUENCE is a string suitable for use in `kbd'. REPLACEMENT
may either be a string, as in

\(which-key-add-key-based-replacements \"C-x 1\" \"maximize\")

a cons of two strings as in

\(which-key-add-key-based-replacements \"C-x 8\"
                                        '(\"unicode\" . \"Unicode keys\"))

or a function that takes a (KEY . BINDING) cons and returns a
replacement.

In the second case, the second string is used to provide a longer
name for the keys under a prefix.

MORE allows you to specifcy additional KEY REPLACEMENT pairs.  All
replacements are added to `which-key-replacement-alist'.

\(fn KEY-SEQUENCE REPLACEMENT &rest MORE)" nil nil)

(autoload 'which-key-add-major-mode-key-based-replacements "which-key" "\
Functions like `which-key-add-key-based-replacements'.
The difference is that MODE specifies the `major-mode' that must
be active for KEY-SEQUENCE and REPLACEMENT (MORE contains
addition KEY-SEQUENCE REPLACEMENT pairs) to apply.

\(fn MODE KEY-SEQUENCE REPLACEMENT &rest MORE)" nil nil)

(autoload 'which-key-reload-key-sequence "which-key" "\
Simulate entering the key sequence KEY-SEQ.
KEY-SEQ should be a list of events as produced by
`listify-key-sequence'. If nil, KEY-SEQ defaults to
`which-key--current-key-list'. Any prefix arguments that were
used are reapplied to the new key sequence.

\(fn &optional KEY-SEQ)" nil nil)

(autoload 'which-key-show-standard-help "which-key" "\
Call the command in `which-key--prefix-help-cmd-backup'.
Usually this is `describe-prefix-bindings'.

\(fn &optional _)" t nil)

(autoload 'which-key-show-next-page-no-cycle "which-key" "\
Show next page of keys unless on the last page, in which case
call `which-key-show-standard-help'." t nil)

(autoload 'which-key-show-previous-page-no-cycle "which-key" "\
Show previous page of keys unless on the first page, in which
case do nothing." t nil)

(autoload 'which-key-show-next-page-cycle "which-key" "\
Show the next page of keys, cycling from end to beginning
after last page.

\(fn &optional _)" t nil)

(autoload 'which-key-show-previous-page-cycle "which-key" "\
Show the previous page of keys, cycling from beginning to end
after first page.

\(fn &optional _)" t nil)

(autoload 'which-key-show-top-level "which-key" "\
Show top-level bindings.

\(fn &optional _)" t nil)

(autoload 'which-key-show-major-mode "which-key" "\
Show top-level bindings in the map of the current major mode.

This function will also detect evil bindings made using
`evil-define-key' in this map. These bindings will depend on the
current evil state. 

\(fn &optional ALL)" t nil)

(autoload 'which-key-show-full-major-mode "which-key" "\
Show all bindings in the map of the current major mode.

This function will also detect evil bindings made using
`evil-define-key' in this map. These bindings will depend on the
current evil state. " t nil)

(autoload 'which-key-dump-bindings "which-key" "\
Dump bindings from PREFIX into buffer named BUFFER-NAME.

PREFIX should be a string suitable for `kbd'.

\(fn PREFIX BUFFER-NAME)" t nil)

(autoload 'which-key-undo-key "which-key" "\
Undo last keypress and force which-key update.

\(fn &optional _)" t nil)

(autoload 'which-key-C-h-dispatch "which-key" "\
Dispatch C-h commands by looking up key in
`which-key-C-h-map'. This command is always accessible (from any
prefix) if `which-key-use-C-h-commands' is non nil." t nil)

(autoload 'which-key-show-keymap "which-key" "\
Show the top-level bindings in KEYMAP using which-key.
KEYMAP is selected interactively from all available keymaps.

If NO-PAGING is non-nil, which-key will not intercept subsequent
keypresses for the paging functionality.

\(fn KEYMAP &optional NO-PAGING)" t nil)

(autoload 'which-key-show-full-keymap "which-key" "\
Show all bindings in KEYMAP using which-key.
KEYMAP is selected interactively from all available keymaps.

\(fn KEYMAP)" t nil)

(autoload 'which-key-show-minor-mode-keymap "which-key" "\
Show the top-level bindings in KEYMAP using which-key.
KEYMAP is selected interactively by mode in
`minor-mode-map-alist'.

\(fn &optional ALL)" t nil)

(autoload 'which-key-show-full-minor-mode-keymap "which-key" "\
Show all bindings in KEYMAP using which-key.
KEYMAP is selected interactively by mode in
`minor-mode-map-alist'." t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "which-key" '("evil-state" "which-key-")))




)
(let ((load-true-file-name "/home/cam/.emacs.d/elpa/wgrep-20230203.1214/wgrep-autoloads.el")(load-file-name "/home/cam/.emacs.d/elpa/wgrep-20230203.1214/wgrep-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/home/cam/.emacs.d/elpa/wgrep-20230203.1214/wgrep-autoloads.el") (car load-path))))



(autoload 'wgrep-setup "wgrep" "\
Setup wgrep preparation." nil nil)

(add-hook 'grep-setup-hook 'wgrep-setup)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "wgrep" '("wgrep-")))




)
(let ((load-true-file-name "/home/cam/.emacs.d/elpa/websocket-1.15/websocket-autoloads.el")(load-file-name "/home/cam/.emacs.d/elpa/websocket-1.15/websocket-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/home/cam/.emacs.d/elpa/websocket-1.15/websocket-autoloads.el") (car load-path))))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "websocket" '("websocket-")))




)
(let ((load-true-file-name "/home/cam/.emacs.d/elpa/web-mode-20231225.1458/web-mode-autoloads.el")(load-file-name "/home/cam/.emacs.d/elpa/web-mode-20231225.1458/web-mode-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/home/cam/.emacs.d/elpa/web-mode-20231225.1458/web-mode-autoloads.el") (car load-path))))



(autoload 'web-mode "web-mode" "\
Major mode for editing web templates.

\(fn)" t nil)

(register-definition-prefixes "web-mode" '("web-mode-"))




)
(let ((load-true-file-name "/home/cam/.emacs.d/elpa/wc-mode-1.4.1/wc-mode-autoloads.el")(load-file-name "/home/cam/.emacs.d/elpa/wc-mode-1.4.1/wc-mode-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/home/cam/.emacs.d/elpa/wc-mode-1.4.1/wc-mode-autoloads.el") (car load-path))))



(autoload 'wc-mode "wc-mode" "\
Toggle wc mode With no argument, this command toggles the
mode.  Non-null prefix argument turns on the mode.  Null prefix
argument turns off the mode.

If called interactively, enable Wc mode if ARG is positive, and
disable it if ARG is zero or negative.  If called from Lisp, also
enable the mode if ARG is omitted or nil, and toggle it if ARG is
`toggle'; disable the mode otherwise.

When Wc mode is enabled on a buffer, it counts the current words
in the buffer and keeps track of a differential of added or
subtracted words.

A goal of number of words added/subtracted can be set while using
this mode. Upon completion of the goal, the modeline text will
highlight indicating that the goal has been reached.

Commands:
\\{wc-mode-map}

Entry to this mode calls the value of `wc-mode-hook' if that
value is non-nil.

\(fn &optional ARG)" t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "wc-mode" 'nil))




)
(let ((load-true-file-name "/home/cam/.emacs.d/elpa/vterm-20240102.1640/vterm-autoloads.el")(load-file-name "/home/cam/.emacs.d/elpa/vterm-20240102.1640/vterm-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/home/cam/.emacs.d/elpa/vterm-20240102.1640/vterm-autoloads.el") (car load-path))))



(autoload 'vterm-module-compile "vterm" "\
Compile vterm-module." t nil)

(autoload 'vterm--bookmark-handler "vterm" "\
Handler to restore a vterm bookmark BMK.

If a vterm buffer of the same name does not exist, the function will create a
new vterm buffer of the name. It also checks the current directory and sets
it to the bookmarked directory if needed.

\(fn BMK)" nil nil)

(autoload 'vterm-next-error-function "vterm" "\
Advance to the next error message and visit the file where the error was.
This is the value of `next-error-function' in Compilation
buffers.  Prefix arg N says how many error messages to move
forwards (or backwards, if negative).

Optional argument RESET clears all the errors.

\(fn N &optional RESET)" t nil)

(autoload 'vterm "vterm" "\
Create an interactive Vterm buffer.
Start a new Vterm session, or switch to an already active
session.  Return the buffer selected (or created).

With a nonnumeric prefix arg, create a new session.

With a string prefix arg, create a new session with arg as buffer name.

With a numeric prefix arg (as in `C-u 42 M-x vterm RET'), switch
to the session with that number, or create it if it doesn't
already exist.

The buffer name used for Vterm sessions is determined by the
value of `vterm-buffer-name'.

\(fn &optional ARG)" t nil)

(autoload 'vterm-other-window "vterm" "\
Create an interactive Vterm buffer in another window.
Start a new Vterm session, or switch to an already active
session.  Return the buffer selected (or created).

With a nonnumeric prefix arg, create a new session.

With a string prefix arg, create a new session with arg as buffer name.

With a numeric prefix arg (as in `C-u 42 M-x vterm RET'), switch
to the session with that number, or create it if it doesn't
already exist.

The buffer name used for Vterm sessions is determined by the
value of `vterm-buffer-name'.

\(fn &optional ARG)" t nil)

(register-definition-prefixes "vterm" '("vterm-"))




)
(let ((load-true-file-name "/home/cam/.emacs.d/elpa/vscode-dark-plus-theme-20230725.1703/vscode-dark-plus-theme-autoloads.el")(load-file-name "/home/cam/.emacs.d/elpa/vscode-dark-plus-theme-20230725.1703/vscode-dark-plus-theme-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/home/cam/.emacs.d/elpa/vscode-dark-plus-theme-20230725.1703/vscode-dark-plus-theme-autoloads.el") (car load-path))))



(when (and (boundp 'custom-theme-load-path) load-file-name) (add-to-list 'custom-theme-load-path (file-name-as-directory (file-name-directory load-file-name))))

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "vscode-dark-plus-theme" '("vscode-dark-plus-")))




)
(let ((load-true-file-name "/home/cam/.emacs.d/elpa/visual-regexp-1.1.2/visual-regexp-autoloads.el")(load-file-name "/home/cam/.emacs.d/elpa/visual-regexp-1.1.2/visual-regexp-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/home/cam/.emacs.d/elpa/visual-regexp-1.1.2/visual-regexp-autoloads.el") (car load-path))))



(autoload 'vr/mc-mark "visual-regexp" "\
Convert regexp selection to multiple cursors.

\(fn REGEXP START END)" nil nil)

(autoload 'vr/replace "visual-regexp" "\
Regexp-replace with live visual feedback.

\(fn REGEXP REPLACE START END)" t nil)

(autoload 'vr/query-replace "visual-regexp" "\
Use vr/query-replace like you would use query-replace-regexp.

\(fn REGEXP REPLACE START END)" t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "visual-regexp" '("vr--" "vr/")))




)
(let ((load-true-file-name "/home/cam/.emacs.d/elpa/vimrc-mode-20181116.1919/vimrc-mode-autoloads.el")(load-file-name "/home/cam/.emacs.d/elpa/vimrc-mode-20181116.1919/vimrc-mode-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/home/cam/.emacs.d/elpa/vimrc-mode-20181116.1919/vimrc-mode-autoloads.el") (car load-path))))


 (add-to-list 'auto-mode-alist '("\\.vim\\'" . vimrc-mode))
 (add-to-list 'auto-mode-alist '("[._]?g?vimrc\\'" . vimrc-mode))
 (add-to-list 'auto-mode-alist '("\\.exrc\\'" . vimrc-mode))

(autoload 'vimrc-mode "vimrc-mode" "\
Major mode for editing `vimrc', `xxx.vim' and `.exrc' configuration files.

\(fn)" t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "vimrc-mode" '("vimrc-")))




)
(let ((load-true-file-name "/home/cam/.emacs.d/elpa/unfill-0.3/unfill-autoloads.el")(load-file-name "/home/cam/.emacs.d/elpa/unfill-0.3/unfill-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/home/cam/.emacs.d/elpa/unfill-0.3/unfill-autoloads.el") (car load-path))))



(autoload 'unfill-paragraph "unfill" "\
Replace newline chars in current paragraph by single spaces.
This command does the inverse of `fill-paragraph'." t nil)

(autoload 'unfill-region "unfill" "\
Replace newline chars in region from START to END by single spaces.
This command does the inverse of `fill-region'.

\(fn START END)" t nil)

(autoload 'unfill-toggle "unfill" "\
Toggle filling/unfilling of the current region, or current paragraph if no region active." t nil)

(define-obsolete-function-alias 'toggle-fill-unfill 'unfill-toggle "0.2")




)
(let ((load-true-file-name "/home/cam/.emacs.d/elpa/queue-0.2/queue-autoloads.el")(load-file-name "/home/cam/.emacs.d/elpa/queue-0.2/queue-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/home/cam/.emacs.d/elpa/queue-0.2/queue-autoloads.el") (car load-path))))



(defalias 'make-queue 'queue-create "\
Create an empty queue data structure.")

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "queue" '("queue")))




)
(let ((load-true-file-name "/home/cam/.emacs.d/elpa/undo-tree-0.8.2/undo-tree-autoloads.el")(load-file-name "/home/cam/.emacs.d/elpa/undo-tree-0.8.2/undo-tree-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/home/cam/.emacs.d/elpa/undo-tree-0.8.2/undo-tree-autoloads.el") (car load-path))))



(autoload 'undo-tree-mode "undo-tree" "\
Toggle undo-tree mode.
With no argument, this command toggles the mode.
A positive prefix argument turns the mode on.
A negative prefix argument turns it off.

If called interactively, enable Undo-Tree mode if ARG is
positive, and disable it if ARG is zero or negative.  If called
from Lisp, also enable the mode if ARG is omitted or nil, and
toggle it if ARG is `toggle'; disable the mode otherwise.

Undo-tree-mode replaces Emacs' standard undo feature with a more
powerful yet easier to use version, that treats the undo history
as what it is: a tree.

The following keys are available in `undo-tree-mode':

  \\{undo-tree-map}

Within the undo-tree visualizer, the following keys are available:

  \\{undo-tree-visualizer-mode-map}

\(fn &optional ARG)" t nil)

(put 'global-undo-tree-mode 'globalized-minor-mode t)

(defvar global-undo-tree-mode nil "\
Non-nil if Global Undo-Tree mode is enabled.
See the `global-undo-tree-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `global-undo-tree-mode'.")

(custom-autoload 'global-undo-tree-mode "undo-tree" nil)

(autoload 'global-undo-tree-mode "undo-tree" "\
Toggle Undo-Tree mode in all buffers.
With prefix ARG, enable Global Undo-Tree mode if ARG is positive;
otherwise, disable it.  If called from Lisp, enable the mode if
ARG is omitted or nil.

Undo-Tree mode is enabled in all buffers where
`turn-on-undo-tree-mode' would do it.
See `undo-tree-mode' for more information on Undo-Tree mode.

\(fn &optional ARG)" t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "undo-tree" '("*undo-tree-id-counter*" "buffer-undo-tree" "turn-on-undo-tree-mode" "undo-")))




)
(let ((load-true-file-name "/home/cam/.emacs.d/elpa/undo-fu-20230808.1340/undo-fu-autoloads.el")(load-file-name "/home/cam/.emacs.d/elpa/undo-fu-20230808.1340/undo-fu-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/home/cam/.emacs.d/elpa/undo-fu-20230808.1340/undo-fu-autoloads.el") (car load-path))))



(autoload 'undo-fu-disable-checkpoint "undo-fu" "\
Remove the undo-fu checkpoint, making all future actions unconstrained.

This command is needed when `undo-fu-ignore-keyboard-quit' is t,
since in this case `keyboard-quit' cannot be used
to perform unconstrained undo/redo actions." t nil)

(autoload 'undo-fu-only-redo-all "undo-fu" "\
Redo all actions until the initial undo step.

wraps the `undo' function." t nil)

(autoload 'undo-fu-only-redo "undo-fu" "\
Redo an action until the initial undo action.

wraps the `undo' function.

Optional argument ARG The number of steps to redo.

\(fn &optional ARG)" t nil)

(autoload 'undo-fu-only-undo "undo-fu" "\
Undo the last action.

wraps the `undo-only' function.

Optional argument ARG the number of steps to undo.

\(fn &optional ARG)" t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "undo-fu" '("undo-fu-")))




)
(let ((load-true-file-name "/home/cam/.emacs.d/elpa/underwater-theme-20131118.2/underwater-theme-autoloads.el")(load-file-name "/home/cam/.emacs.d/elpa/underwater-theme-20131118.2/underwater-theme-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/home/cam/.emacs.d/elpa/underwater-theme-20131118.2/underwater-theme-autoloads.el") (car load-path))))



(when (and (boundp 'custom-theme-load-path) load-file-name) (add-to-list 'custom-theme-load-path (file-name-as-directory (file-name-directory load-file-name))))

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "underwater-theme" '("underwater")))




)
(let ((load-true-file-name "/home/cam/.emacs.d/elpa/ujelly-theme-20180214.1624/ujelly-theme-autoloads.el")(load-file-name "/home/cam/.emacs.d/elpa/ujelly-theme-20180214.1624/ujelly-theme-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/home/cam/.emacs.d/elpa/ujelly-theme-20180214.1624/ujelly-theme-autoloads.el") (car load-path))))



(when load-file-name (add-to-list 'custom-theme-load-path (file-name-as-directory (file-name-directory load-file-name))))

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "ujelly-theme" '("ujelly")))




)
(let ((load-true-file-name "/home/cam/.emacs.d/elpa/typescript-mode-20230116.1533/typescript-mode-autoloads.el")(load-file-name "/home/cam/.emacs.d/elpa/typescript-mode-20230116.1533/typescript-mode-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/home/cam/.emacs.d/elpa/typescript-mode-20230116.1533/typescript-mode-autoloads.el") (car load-path))))


(put 'typescript-indent-level 'safe-local-variable #'integerp)

(autoload 'typescript-mode "typescript-mode" "\
Major mode for editing typescript.

Key bindings:

\\{typescript-mode-map}

\(fn)" t nil)

(eval-after-load 'folding '(when (fboundp 'folding-add-to-marks-list) (folding-add-to-marks-list 'typescript-mode "// {{{" "// }}}")))

(add-to-list 'auto-mode-alist '("\\.tsx?\\'" . typescript-mode))

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "typescript-mode" '("typescript-")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "typescript-mode-test-utilities" '("font-lock-test" "get-face-at" "test-with-")))




)
(let ((load-true-file-name "/home/cam/.emacs.d/elpa/twilight-theme-20120412.1303/twilight-theme-autoloads.el")(load-file-name "/home/cam/.emacs.d/elpa/twilight-theme-20120412.1303/twilight-theme-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/home/cam/.emacs.d/elpa/twilight-theme-20120412.1303/twilight-theme-autoloads.el") (car load-path))))



(when load-file-name (add-to-list 'custom-theme-load-path (file-name-as-directory (file-name-directory load-file-name))))

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "twilight-theme" '("twilight")))




)
(let ((load-true-file-name "/home/cam/.emacs.d/elpa/twilight-bright-theme-20130605.843/twilight-bright-theme-autoloads.el")(load-file-name "/home/cam/.emacs.d/elpa/twilight-bright-theme-20130605.843/twilight-bright-theme-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/home/cam/.emacs.d/elpa/twilight-bright-theme-20130605.843/twilight-bright-theme-autoloads.el") (car load-path))))



(when load-file-name (add-to-list 'custom-theme-load-path (file-name-as-directory (file-name-directory load-file-name))))

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "twilight-bright-theme" '("twilight-bright")))




)
(let ((load-true-file-name "/home/cam/.emacs.d/elpa/twilight-anti-bright-theme-20160622.848/twilight-anti-bright-theme-autoloads.el")(load-file-name "/home/cam/.emacs.d/elpa/twilight-anti-bright-theme-20160622.848/twilight-anti-bright-theme-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/home/cam/.emacs.d/elpa/twilight-anti-bright-theme-20160622.848/twilight-anti-bright-theme-autoloads.el") (car load-path))))



(when load-file-name (add-to-list 'custom-theme-load-path (file-name-as-directory (file-name-directory load-file-name))))

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "twilight-anti-bright-theme" '("twilight-anti-bright")))




)
(let ((load-true-file-name "/home/cam/.emacs.d/elpa/s-1.13.0/s-autoloads.el")(load-file-name "/home/cam/.emacs.d/elpa/s-1.13.0/s-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/home/cam/.emacs.d/elpa/s-1.13.0/s-autoloads.el") (car load-path))))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "s" '("s-")))




)
(let ((load-true-file-name "/home/cam/.emacs.d/elpa/avy-0.5.0/avy-autoloads.el")(load-file-name "/home/cam/.emacs.d/elpa/avy-0.5.0/avy-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/home/cam/.emacs.d/elpa/avy-0.5.0/avy-autoloads.el") (car load-path))))



(autoload 'avy-goto-char "avy" "\
Jump to the currently visible CHAR.
The window scope is determined by `avy-all-windows' (ARG negates it).

\(fn CHAR &optional ARG)" t nil)

(autoload 'avy-goto-char-in-line "avy" "\
Jump to the currently visible CHAR in the current line.

\(fn CHAR)" t nil)

(autoload 'avy-goto-char-2 "avy" "\
Jump to the currently visible CHAR1 followed by CHAR2.
The window scope is determined by `avy-all-windows'.
When ARG is non-nil, do the opposite of `avy-all-windows'.
BEG and END narrow the scope where candidates are searched.

\(fn CHAR1 CHAR2 &optional ARG BEG END)" t nil)

(autoload 'avy-goto-char-2-above "avy" "\
Jump to the currently visible CHAR1 followed by CHAR2.
This is a scoped version of `avy-goto-char-2', where the scope is
the visible part of the current buffer up to point.
The window scope is determined by `avy-all-windows'.
When ARG is non-nil, do the opposite of `avy-all-windows'.

\(fn CHAR1 CHAR2 &optional ARG)" t nil)

(autoload 'avy-goto-char-2-below "avy" "\
Jump to the currently visible CHAR1 followed by CHAR2.
This is a scoped version of `avy-goto-char-2', where the scope is
the visible part of the current buffer following point.
The window scope is determined by `avy-all-windows'.
When ARG is non-nil, do the opposite of `avy-all-windows'.

\(fn CHAR1 CHAR2 &optional ARG)" t nil)

(autoload 'avy-isearch "avy" "\
Jump to one of the current isearch candidates." t nil)

(autoload 'avy-goto-word-0 "avy" "\
Jump to a word start.
The window scope is determined by `avy-all-windows'.
When ARG is non-nil, do the opposite of `avy-all-windows'.
BEG and END narrow the scope where candidates are searched.

\(fn ARG &optional BEG END)" t nil)

(autoload 'avy-goto-word-1 "avy" "\
Jump to the currently visible CHAR at a word start.
The window scope is determined by `avy-all-windows'.
When ARG is non-nil, do the opposite of `avy-all-windows'.
BEG and END narrow the scope where candidates are searched.
When SYMBOL is non-nil, jump to symbol start instead of word start.

\(fn CHAR &optional ARG BEG END SYMBOL)" t nil)

(autoload 'avy-goto-word-1-above "avy" "\
Jump to the currently visible CHAR at a word start.
This is a scoped version of `avy-goto-word-1', where the scope is
the visible part of the current buffer up to point.
The window scope is determined by `avy-all-windows'.
When ARG is non-nil, do the opposite of `avy-all-windows'.

\(fn CHAR &optional ARG)" t nil)

(autoload 'avy-goto-word-1-below "avy" "\
Jump to the currently visible CHAR at a word start.
This is a scoped version of `avy-goto-word-1', where the scope is
the visible part of the current buffer following point.
The window scope is determined by `avy-all-windows'.
When ARG is non-nil, do the opposite of `avy-all-windows'.

\(fn CHAR &optional ARG)" t nil)

(autoload 'avy-goto-symbol-1 "avy" "\
Jump to the currently visible CHAR at a symbol start.
The window scope is determined by `avy-all-windows'.
When ARG is non-nil, do the opposite of `avy-all-windows'.

\(fn CHAR &optional ARG)" t nil)

(autoload 'avy-goto-symbol-1-above "avy" "\
Jump to the currently visible CHAR at a symbol start.
This is a scoped version of `avy-goto-symbol-1', where the scope is
the visible part of the current buffer up to point.
The window scope is determined by `avy-all-windows'.
When ARG is non-nil, do the opposite of `avy-all-windows'.

\(fn CHAR &optional ARG)" t nil)

(autoload 'avy-goto-symbol-1-below "avy" "\
Jump to the currently visible CHAR at a symbol start.
This is a scoped version of `avy-goto-symbol-1', where the scope is
the visible part of the current buffer following point.
The window scope is determined by `avy-all-windows'.
When ARG is non-nil, do the opposite of `avy-all-windows'.

\(fn CHAR &optional ARG)" t nil)

(autoload 'avy-goto-subword-0 "avy" "\
Jump to a word or subword start.
The window scope is determined by `avy-all-windows' (ARG negates it).

When PREDICATE is non-nil it's a function of zero parameters that
should return true.

BEG and END narrow the scope where candidates are searched.

\(fn &optional ARG PREDICATE BEG END)" t nil)

(autoload 'avy-goto-subword-1 "avy" "\
Jump to the currently visible CHAR at a subword start.
The window scope is determined by `avy-all-windows' (ARG negates it).
The case of CHAR is ignored.

\(fn CHAR &optional ARG)" t nil)

(autoload 'avy-goto-word-or-subword-1 "avy" "\
Forward to `avy-goto-subword-1' or `avy-goto-word-1'.
Which one depends on variable `subword-mode'." t nil)

(autoload 'avy-goto-line "avy" "\
Jump to a line start in current buffer.

When ARG is 1, jump to lines currently visible, with the option
to cancel to `goto-line' by entering a number.

When ARG is 4, negate the window scope determined by
`avy-all-windows'.

Otherwise, forward to `goto-line' with ARG.

\(fn &optional ARG)" t nil)

(autoload 'avy-goto-line-above "avy" "\
Goto visible line above the cursor.
OFFSET changes the distance between the closest key to the cursor and
the cursor
When BOTTOM-UP is non-nil, display avy candidates from top to bottom

\(fn &optional OFFSET BOTTOM-UP)" t nil)

(autoload 'avy-goto-line-below "avy" "\
Goto visible line below the cursor.
OFFSET changes the distance between the closest key to the cursor and
the cursor
When BOTTOM-UP is non-nil, display avy candidates from top to bottom

\(fn &optional OFFSET BOTTOM-UP)" t nil)

(autoload 'avy-goto-end-of-line "avy" "\
Call `avy-goto-line' and move to the end of the line.

\(fn &optional ARG)" t nil)

(autoload 'avy-copy-line "avy" "\
Copy a selected line above the current line.
ARG lines can be used.

\(fn ARG)" t nil)

(autoload 'avy-move-line "avy" "\
Move a selected line above the current line.
ARG lines can be used.

\(fn ARG)" t nil)

(autoload 'avy-copy-region "avy" "\
Select two lines and copy the text between them to point.

The window scope is determined by `avy-all-windows' or
`avy-all-windows-alt' when ARG is non-nil.

\(fn ARG)" t nil)

(autoload 'avy-move-region "avy" "\
Select two lines and move the text between them above the current line." t nil)

(autoload 'avy-kill-region "avy" "\
Select two lines and kill the region between them.

The window scope is determined by `avy-all-windows' or
`avy-all-windows-alt' when ARG is non-nil.

\(fn ARG)" t nil)

(autoload 'avy-kill-ring-save-region "avy" "\
Select two lines and save the region between them to the kill ring.
The window scope is determined by `avy-all-windows'.
When ARG is non-nil, do the opposite of `avy-all-windows'.

\(fn ARG)" t nil)

(autoload 'avy-kill-whole-line "avy" "\
Select line and kill the whole selected line.

With a numerical prefix ARG, kill ARG line(s) starting from the
selected line.  If ARG is negative, kill backward.

If ARG is zero, kill the selected line but exclude the trailing
newline.

\\[universal-argument] 3 \\[avy-kil-whole-line] kill three lines
starting from the selected line.  \\[universal-argument] -3

\\[avy-kill-whole-line] kill three lines backward including the
selected line.

\(fn ARG)" t nil)

(autoload 'avy-kill-ring-save-whole-line "avy" "\
Select line and save the whole selected line as if killed, but don’t kill it.

This command is similar to `avy-kill-whole-line', except that it
saves the line(s) as if killed, but does not kill it(them).

With a numerical prefix ARG, kill ARG line(s) starting from the
selected line.  If ARG is negative, kill backward.

If ARG is zero, kill the selected line but exclude the trailing
newline.

\(fn ARG)" t nil)

(autoload 'avy-setup-default "avy" "\
Setup the default shortcuts." nil nil)

(autoload 'avy-goto-char-timer "avy" "\
Read one or many consecutive chars and jump to the first one.
The window scope is determined by `avy-all-windows' (ARG negates it).

\(fn &optional ARG)" t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "avy" '("avy-")))




)
(let ((load-true-file-name "/home/cam/.emacs.d/elpa/ace-window-20220911.358/ace-window-autoloads.el")(load-file-name "/home/cam/.emacs.d/elpa/ace-window-20220911.358/ace-window-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/home/cam/.emacs.d/elpa/ace-window-20220911.358/ace-window-autoloads.el") (car load-path))))



(autoload 'ace-select-window "ace-window" "\
Ace select window." t nil)

(autoload 'ace-delete-window "ace-window" "\
Ace delete window." t nil)

(autoload 'ace-swap-window "ace-window" "\
Ace swap window." t nil)

(autoload 'ace-delete-other-windows "ace-window" "\
Ace delete other windows." t nil)

(autoload 'ace-display-buffer "ace-window" "\
Make `display-buffer' and `pop-to-buffer' select using `ace-window'.
See sample config for `display-buffer-base-action' and `display-buffer-alist':
https://github.com/abo-abo/ace-window/wiki/display-buffer.

\(fn BUFFER ALIST)" nil nil)

(autoload 'ace-window "ace-window" "\
Select a window.
Perform an action based on ARG described below.

By default, behaves like extended `other-window'.
See `aw-scope' which extends it to work with frames.

Prefixed with one \\[universal-argument], does a swap between the
selected window and the current window, so that the selected
buffer moves to current window (and current buffer moves to
selected window).

Prefixed with two \\[universal-argument]'s, deletes the selected
window.

\(fn ARG)" t nil)

(defvar ace-window-display-mode nil "\
Non-nil if Ace-Window-Display mode is enabled.
See the `ace-window-display-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `ace-window-display-mode'.")

(custom-autoload 'ace-window-display-mode "ace-window" nil)

(autoload 'ace-window-display-mode "ace-window" "\
Minor mode for showing the ace window key in the mode line.

If called interactively, enable Ace-Window-Display mode if ARG is
positive, and disable it if ARG is zero or negative.  If called
from Lisp, also enable the mode if ARG is omitted or nil, and
toggle it if ARG is `toggle'; disable the mode otherwise.

\(fn &optional ARG)" t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "ace-window" '("ace-window-mode" "aw-")))



(defvar ace-window-posframe-mode nil "\
Non-nil if Ace-Window-Posframe mode is enabled.
See the `ace-window-posframe-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `ace-window-posframe-mode'.")

(custom-autoload 'ace-window-posframe-mode "ace-window-posframe" nil)

(autoload 'ace-window-posframe-mode "ace-window-posframe" "\
Minor mode for showing the ace window key with child frames.

If called interactively, enable Ace-Window-Posframe mode if ARG
is positive, and disable it if ARG is zero or negative.  If
called from Lisp, also enable the mode if ARG is omitted or nil,
and toggle it if ARG is `toggle'; disable the mode otherwise.

\(fn &optional ARG)" t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "ace-window-posframe" '("ace-window-posframe-" "aw-")))




)
(let ((load-true-file-name "/home/cam/.emacs.d/elpa/pfuture-1.10.3/pfuture-autoloads.el")(load-file-name "/home/cam/.emacs.d/elpa/pfuture-1.10.3/pfuture-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/home/cam/.emacs.d/elpa/pfuture-1.10.3/pfuture-autoloads.el") (car load-path))))



(autoload 'pfuture-new "pfuture" "\
Create a new future process for command CMD.
Any arguments after the command are interpreted as arguments to the command.
This will return a process object with additional 'stderr and 'stdout
properties, which can be read via (process-get process 'stdout) and
\(process-get process 'stderr) or alternatively with
\(pfuture-result process) or (pfuture-stderr process).

Note that CMD must be a *sequence* of strings, meaning
this is wrong: (pfuture-new \"git status\")
this is right: (pfuture-new \"git\" \"status\")

\(fn &rest CMD)" nil nil)

(register-definition-prefixes "pfuture" '("pfuture-"))




)
(let ((load-true-file-name "/home/cam/.emacs.d/elpa/lv-0.15.0/lv-autoloads.el")(load-file-name "/home/cam/.emacs.d/elpa/lv-0.15.0/lv-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/home/cam/.emacs.d/elpa/lv-0.15.0/lv-autoloads.el") (car load-path))))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "lv" '("lv-")))




)
(let ((load-true-file-name "/home/cam/.emacs.d/elpa/hydra-0.15.0/hydra-autoloads.el")(load-file-name "/home/cam/.emacs.d/elpa/hydra-0.15.0/hydra-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/home/cam/.emacs.d/elpa/hydra-0.15.0/hydra-autoloads.el") (car load-path))))



(autoload 'defhydra "hydra" "\
Create a Hydra - a family of functions with prefix NAME.

NAME should be a symbol, it will be the prefix of all functions
defined here.

BODY has the format:

    (BODY-MAP BODY-KEY &rest BODY-PLIST)

DOCSTRING will be displayed in the echo area to identify the
Hydra.  When DOCSTRING starts with a newline, special Ruby-style
substitution will be performed by `hydra--format'.

Functions are created on basis of HEADS, each of which has the
format:

    (KEY CMD &optional HINT &rest PLIST)

BODY-MAP is a keymap; `global-map' is used quite often.  Each
function generated from HEADS will be bound in BODY-MAP to
BODY-KEY + KEY (both are strings passed to `kbd'), and will set
the transient map so that all following heads can be called
though KEY only.  BODY-KEY can be an empty string.

CMD is a callable expression: either an interactive function
name, or an interactive lambda, or a single sexp (it will be
wrapped in an interactive lambda).

HINT is a short string that identifies its head.  It will be
printed beside KEY in the echo erea if `hydra-is-helpful' is not
nil.  If you don't even want the KEY to be printed, set HINT
explicitly to nil.

The heads inherit their PLIST from BODY-PLIST and are allowed to
override some keys.  The keys recognized are :exit, :bind, and :column.
:exit can be:

- nil (default): this head will continue the Hydra state.
- t: this head will stop the Hydra state.

:bind can be:
- nil: this head will not be bound in BODY-MAP.
- a lambda taking KEY and CMD used to bind a head.

:column is a string that sets the column for all subsequent heads.

It is possible to omit both BODY-MAP and BODY-KEY if you don't
want to bind anything.  In that case, typically you will bind the
generated NAME/body command.  This command is also the return
result of `defhydra'.

\(fn NAME BODY &optional DOCSTRING &rest HEADS)" nil t)

(function-put 'defhydra 'lisp-indent-function 'defun)

(function-put 'defhydra 'doc-string-elt '3)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "hydra" '("defhydra" "hydra-")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "hydra-examples" '("hydra-" "org-agenda-cts" "whitespace-mode")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "hydra-ox" '("hydra-ox")))




)
(let ((load-true-file-name "/home/cam/.emacs.d/elpa/ht-2.3/ht-autoloads.el")(load-file-name "/home/cam/.emacs.d/elpa/ht-2.3/ht-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/home/cam/.emacs.d/elpa/ht-2.3/ht-autoloads.el") (car load-path))))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "ht" 'nil))




)
(let ((load-true-file-name "/home/cam/.emacs.d/elpa/posframe-1.4.2/posframe-autoloads.el")(load-file-name "/home/cam/.emacs.d/elpa/posframe-1.4.2/posframe-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/home/cam/.emacs.d/elpa/posframe-1.4.2/posframe-autoloads.el") (car load-path))))



(autoload 'posframe-workable-p "posframe" "\
Test posframe workable status." nil nil)

(autoload 'posframe-show "posframe" "\
Pop up a posframe to show STRING at POSITION.

 (1) POSITION

POSITION can be:
1. An integer, meaning point position.
2. A cons of two integers, meaning absolute X and Y coordinates.
3. Other type, in which case the corresponding POSHANDLER should be
   provided.

 (2) POSHANDLER

POSHANDLER is a function of one argument returning an actual
position.  Its argument is a plist of the following form:

  (:position xxx
   :poshandler xxx
   :font-height xxx
   :font-width xxx
   :posframe xxx
   :posframe-width xxx
   :posframe-height xxx
   :posframe-buffer xxx
   :parent-frame xxx
   :parent-window-start xxx
   :parent-window-end xxx
   :parent-window-left xxx
   :parent-window-top xxx
   :parent-frame-width xxx
   :parent-frame-height xxx
   :parent-window xxx
   :parent-window-width  xxx
   :parent-window-height xxx
   :mouse-x xxx
   ;mouse-y xxx
   :minibuffer-height xxx
   :mode-line-height  xxx
   :header-line-height xxx
   :tab-line-height xxx
   :x-pixel-offset xxx
   :y-pixel-offset xxx)

By default, poshandler is auto-selected based on the type of POSITION,
but the selection can be overridden using the POSHANDLER argument.

The builtin poshandler functions are listed below:

1.  `posframe-poshandler-frame-center'
2.  `posframe-poshandler-frame-top-center'
3.  `posframe-poshandler-frame-top-left-corner'
4.  `posframe-poshandler-frame-top-right-corner'
5.  `posframe-poshandler-frame-bottom-center'
6.  `posframe-poshandler-frame-bottom-left-corner'
7.  `posframe-poshandler-frame-bottom-right-corner'
8.  `posframe-poshandler-window-center'
9.  `posframe-poshandler-window-top-center'
10. `posframe-poshandler-window-top-left-corner'
11. `posframe-poshandler-window-top-right-corner'
12. `posframe-poshandler-window-bottom-center'
13. `posframe-poshandler-window-bottom-left-corner'
14. `posframe-poshandler-window-bottom-right-corner'
15. `posframe-poshandler-point-top-left-corner'
16. `posframe-poshandler-point-bottom-left-corner'
17. `posframe-poshandler-point-bottom-left-corner-upward'
18. `posframe-poshandler-point-window-center'
19. `posframe-poshandler-point-frame-center'

 (3) POSHANDLER-EXTRA-INFO

POSHANDLER-EXTRA-INFO is a plist, which will prepend to the
argument of poshandler function: `info', it will *OVERRIDE* the
exist key in `info'.

 (4) BUFFER-OR-NAME

This posframe's buffer is BUFFER-OR-NAME, which can be a buffer
or a name of a (possibly nonexistent) buffer.

buffer name can prefix with space, for example \" *mybuffer*\", so
the buffer name will hide for ibuffer and `list-buffers'.

 (5) NO-PROPERTIES

If NO-PROPERTIES is non-nil, The STRING's properties will
be removed before being shown in posframe.

 (6) HEIGHT, MAX-HEIGHT, MIN-HEIGHT, WIDTH, MAX-WIDTH and MIN-WIDTH

These arguments are specified in the canonical character width
and height of posframe, more details can be found in docstring of
function `fit-frame-to-buffer',

 (7) LEFT-FRINGE and RIGHT-FRINGE

If LEFT-FRINGE or RIGHT-FRINGE is a number, left fringe or
right fringe with be shown with the specified width.

 (8) BORDER-WIDTH, BORDER-COLOR, INTERNAL-BORDER-WIDTH and INTERNAL-BORDER-COLOR

By default, posframe shows no borders, but users can specify
borders by setting BORDER-WIDTH to a positive number.  Border
color can be specified by BORDER-COLOR.

INTERNAL-BORDER-WIDTH and INTERNAL-BORDER-COLOR are same as
BORDER-WIDTH and BORDER-COLOR, but do not suggest to use for the
reason:

   Add distinct controls for child frames' borders (Bug#45620)
   http://git.savannah.gnu.org/cgit/emacs.git/commit/?id=ff7b1a133bfa7f2614650f8551824ffaef13fadc

 (9) FONT, FOREGROUND-COLOR and BACKGROUND-COLOR

Posframe's font as well as foreground and background colors are
derived from the current frame by default, but can be overridden
using the FONT, FOREGROUND-COLOR and BACKGROUND-COLOR arguments,
respectively.

 (10) CURSOR and WINDOW-POINT

By default, cursor is not showed in posframe, user can let cursor
showed with this argument help by set its value to a `cursor-type'.

When cursor need to be showed in posframe, user may need to set
WINDOW-POINT to the point of BUFFER, which can let cursor showed
at this point.

 (11) RESPECT-HEADER-LINE and RESPECT-MODE-LINE

By default, posframe will display no header-line, mode-line and
tab-line.  In case a header-line, mode-line or tab-line is
desired, users can set RESPECT-HEADER-LINE and RESPECT-MODE-LINE
to t.

 (12) INITIALIZE

INITIALIZE is a function with no argument.  It will run when
posframe buffer is first selected with `with-current-buffer'
in `posframe-show', and only run once (for performance reasons).

 (13) LINES-TRUNCATE

If LINES-TRUNCATE is non-nil, then lines will truncate in the
posframe instead of wrap.

 (14) OVERRIDE-PARAMETERS

OVERRIDE-PARAMETERS is very powful, *all* the valid frame parameters
used by posframe's frame can be overridden by it.

NOTE: some `posframe-show' arguments are not frame parameters, so they
can not be overrided by this argument.

 (15) TIMEOUT

TIMEOUT can specify the number of seconds after which the posframe
will auto-hide.

 (15) REFRESH

If REFRESH is a number, posframe's frame-size will be re-adjusted
every REFRESH seconds.

 (17) ACCEPT-FOCUS

When ACCEPT-FOCUS is non-nil, posframe will accept focus.
be careful, you may face some bugs when set it to non-nil.

 (18) HIDEHANDLER

HIDEHANDLER is a function, when it return t, posframe will be
hide, this function has a plist argument:

  (:posframe-buffer xxx
   :posframe-parent-buffer xxx)

The builtin hidehandler functions are listed below:

1. `posframe-hidehandler-when-buffer-switch'

 (19) REFPOSHANDLER

REFPOSHANDLER is a function, a reference position (most is
top-left of current frame) will be returned when call this
function.

when it is nil or it return nil, child-frame feature will be used
and reference position will be deal with in Emacs.

The user case I know at the moment is let ivy-posframe work well
in EXWM environment (let posframe show on the other appliction
window).

         DO NOT USE UNLESS NECESSARY!!!

An example parent frame poshandler function is:

1. `posframe-refposhandler-xwininfo'

 (19) Others

You can use `posframe-delete-all' to delete all posframes.

\(fn BUFFER-OR-NAME &key STRING POSITION POSHANDLER POSHANDLER-EXTRA-INFO WIDTH HEIGHT MAX-WIDTH MAX-HEIGHT MIN-WIDTH MIN-HEIGHT X-PIXEL-OFFSET Y-PIXEL-OFFSET LEFT-FRINGE RIGHT-FRINGE BORDER-WIDTH BORDER-COLOR INTERNAL-BORDER-WIDTH INTERNAL-BORDER-COLOR FONT CURSOR WINDOW-POINT FOREGROUND-COLOR BACKGROUND-COLOR RESPECT-HEADER-LINE RESPECT-MODE-LINE INITIALIZE NO-PROPERTIES KEEP-RATIO LINES-TRUNCATE OVERRIDE-PARAMETERS TIMEOUT REFRESH ACCEPT-FOCUS HIDEHANDLER REFPOSHANDLER &allow-other-keys)" nil nil)

(autoload 'posframe-hide-all "posframe" "\
Hide all posframe frames." t nil)

(autoload 'posframe-delete-all "posframe" "\
Delete all posframe frames and buffers." t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "posframe" '("posframe-")))



(autoload 'posframe-benchmark "posframe-benchmark" "\
Benchmark tool for posframe." t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "posframe-benchmark" '("posframe-benchmark-alist")))




)
(let ((load-true-file-name "/home/cam/.emacs.d/elpa/cfrs-1.6.0/cfrs-autoloads.el")(load-file-name "/home/cam/.emacs.d/elpa/cfrs-1.6.0/cfrs-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/home/cam/.emacs.d/elpa/cfrs-1.6.0/cfrs-autoloads.el") (car load-path))))



(autoload 'cfrs-read "cfrs" "\
Read a string using a pos-frame with given PROMPT and INITIAL-INPUT.

\(fn PROMPT &optional INITIAL-INPUT)" nil nil)

(register-definition-prefixes "cfrs" '("cfrs-"))




)
(let ((load-true-file-name "/home/cam/.emacs.d/elpa/treemacs-3.1/treemacs-autoloads.el")(load-file-name "/home/cam/.emacs.d/elpa/treemacs-3.1/treemacs-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/home/cam/.emacs.d/elpa/treemacs-3.1/treemacs-autoloads.el") (car load-path))))



(autoload 'treemacs-version "treemacs" "\
Return the `treemacs-version'." t nil)

(autoload 'treemacs "treemacs" "\
Initialise or toggle treemacs.
- If the treemacs window is visible hide it.
- If a treemacs buffer exists, but is not visible show it.
- If no treemacs buffer exists for the current frame create and show it.
- If the workspace is empty additionally ask for the root path of the first
  project to add.
- With a prefix ARG launch treemacs and force it to select a workspace

\(fn &optional ARG)" t nil)

(autoload 'treemacs-select-directory "treemacs" "\
Select a directory to open in treemacs.
This command will open *just* the selected directory in treemacs.  If there are
other projects in the workspace they will be removed.

To *add* a project to the current workspace use
`treemacs-add-project-to-workspace' or
`treemacs-add-and-display-current-project' instead." t nil)

(autoload 'treemacs-find-file "treemacs" "\
Find and focus the current file in the treemacs window.
If the current buffer has visits no file or with a prefix ARG ask for the
file instead.
Will show/create a treemacs buffers if it is not visible/does not exist.
For the most part only useful when `treemacs-follow-mode' is not active.

\(fn &optional ARG)" t nil)

(autoload 'treemacs-find-tag "treemacs" "\
Find and move point to the tag at point in the treemacs view.
Most likely to be useful when `treemacs-tag-follow-mode' is not active.

Will ask to change the treemacs root if the file to find is not under the
root.  If no treemacs buffer exists it will be created with the current file's
containing directory as root.  Will do nothing if the current buffer is not
visiting a file or Emacs cannot find any tags for the current file." t nil)

(autoload 'treemacs-select-window "treemacs" "\
Select the treemacs window if it is visible.
Bring it to the foreground if it is not visible.
Initialise a new treemacs buffer as calling `treemacs' would if there is no
treemacs buffer for this frame.

In case treemacs is already selected behaviour will depend on
`treemacs-select-when-already-in-treemacs'.

A non-nil prefix ARG will also force a workspace switch.

\(fn &optional ARG)" t nil)

(autoload 'treemacs-show-changelog "treemacs" "\
Show the changelog of treemacs." t nil)

(autoload 'treemacs-edit-workspaces "treemacs" "\
Edit your treemacs workspaces and projects as an `org-mode' file." t nil)

(autoload 'treemacs-add-and-display-current-project-exclusively "treemacs" "\
Display the current project, and *only* the current project.
Like `treemacs-add-and-display-current-project' this will add the current
project to treemacs based on either projectile, the built-in project.el, or the
current working directory.

However the \\='exclusive\\=' part means that it will make the current project
the only project, all other projects *will be removed* from the current
workspace." t nil)

(autoload 'treemacs-add-and-display-current-project "treemacs" "\
Open treemacs and add the current project root to the workspace.
The project is determined first by projectile (if treemacs-projectile is
installed), then by project.el, then by the current working directory.

If the project is already registered with treemacs just move point to its root.
An error message is displayed if the current buffer is not part of any project." t nil)

(register-definition-prefixes "treemacs" '("treemacs-version"))



(register-definition-prefixes "treemacs-annotations" '("treemacs-"))



(register-definition-prefixes "treemacs-async" '("treemacs-"))



(autoload 'treemacs-bookmark "treemacs-bookmarks" "\
Find a bookmark in treemacs.
Only bookmarks marking either a file or a directory are offered for selection.
Treemacs will try to find and focus the given bookmark's location, in a similar
fashion to `treemacs-find-file'.

With a prefix argument ARG treemacs will also open the bookmarked location.

\(fn &optional ARG)" t nil)

(autoload 'treemacs--bookmark-handler "treemacs-bookmarks" "\
Open Treemacs into a bookmark RECORD.

\(fn RECORD)" nil nil)

(autoload 'treemacs-add-bookmark "treemacs-bookmarks" "\
Add the current node to Emacs' list of bookmarks.
For file and directory nodes their absolute path is saved.  Tag nodes
additionally also save the tag's position.  A tag can only be bookmarked if the
treemacs node is pointing to a valid buffer position." t nil)

(register-definition-prefixes "treemacs-bookmarks" '("treemacs--"))



(register-definition-prefixes "treemacs-compatibility" '("treemacs-"))



(register-definition-prefixes "treemacs-core-utils" '("treemacs-"))



(register-definition-prefixes "treemacs-customization" '("treemacs-"))



(register-definition-prefixes "treemacs-diagnostics" '("treemacs-"))



(register-definition-prefixes "treemacs-dom" '("treemacs-"))



(register-definition-prefixes "treemacs-extensions" '("treemacs-"))



(autoload 'treemacs-delete-file "treemacs-file-management" "\
Delete node at point.
A delete action must always be confirmed.  Directories are deleted recursively.
By default files are deleted by moving them to the trash.  With a prefix ARG
they will instead be wiped irreversibly.

\(fn &optional ARG)" t nil)

(autoload 'treemacs-delete-marked-files "treemacs-file-management" "\
Delete all marked files.

A delete action must always be confirmed.  Directories are deleted recursively.
By default files are deleted by moving them to the trash.  With a prefix ARG
they will instead be wiped irreversibly.

For marking files see `treemacs-bulk-file-actions'.

\(fn &optional ARG)" t nil)

(autoload 'treemacs-move-file "treemacs-file-management" "\
Move file (or directory) at point.

If the selected target is an existing directory the source file will be directly
moved into this directory.  If the given target instead does not exist then it
will be treated as the moved file's new name, meaning the original source file
will be both moved and renamed." t nil)

(autoload 'treemacs-copy-file "treemacs-file-management" "\
Copy file (or directory) at point.

If the selected target is an existing directory the source file will be directly
copied into this directory.  If the given target instead does not exist then it
will be treated as the copied file's new name, meaning the original source file
will be both copied and renamed." t nil)

(autoload 'treemacs-move-marked-files "treemacs-file-management" "\
Move all marked files.

For marking files see `treemacs-bulk-file-actions'." t nil)

(autoload 'treemacs-copy-marked-files "treemacs-file-management" "\
Copy all marked files.

For marking files see `treemacs-bulk-file-actions'." t nil)

(autoload 'treemacs-rename-file "treemacs-file-management" "\
Rename the file/directory at point.

Buffers visiting the renamed file or visiting a file inside the renamed
directory and windows showing them will be reloaded.  The list of recent files
will likewise be updated." t nil)

(autoload 'treemacs-show-marked-files "treemacs-file-management" "\
Print a list of all files marked by treemacs." t nil)

(autoload 'treemacs-mark-or-unmark-path-at-point "treemacs-file-management" "\
Mark or unmark the absolute path of the node at point." t nil)

(autoload 'treemacs-reset-marks "treemacs-file-management" "\
Unmark all previously marked files in the current buffer." t nil)

(autoload 'treemacs-delete-marked-paths "treemacs-file-management" "\
Delete all previously marked files." t nil)

(autoload 'treemacs-bulk-file-actions "treemacs-file-management" "\
Activate the bulk file actions hydra.
This interface allows to quickly (unmark) files, so as to copy, move or delete
them in bulk.

Note that marking files is *permanent*, files will stay marked until they are
either manually unmarked or deleted.  You can show a list of all currently
marked files with `treemacs-show-marked-files' or `s' in the hydra." t nil)

(autoload 'treemacs-create-file "treemacs-file-management" "\
Create a new file.
Enter first the directory to create the new file in, then the new file's name.
The pre-selection for what directory to create in is based on the \"nearest\"
path to point - the containing directory for tags and files or the directory
itself, using $HOME when there is no path at or near point to grab." t nil)

(autoload 'treemacs-create-dir "treemacs-file-management" "\
Create a new directory.
Enter first the directory to create the new dir in, then the new dir's name.
The pre-selection for what directory to create in is based on the \"nearest\"
path to point - the containing directory for tags and files or the directory
itself, using $HOME when there is no path at or near point to grab." t nil)

(register-definition-prefixes "treemacs-file-management" '("treemacs-"))



(register-definition-prefixes "treemacs-filewatch-mode" '("treemacs-"))



(register-definition-prefixes "treemacs-follow-mode" '("treemacs-"))



(register-definition-prefixes "treemacs-fringe-indicator" '("treemacs-"))



(defvar treemacs-git-commit-diff-mode nil "\
Non-nil if Treemacs-Git-Commit-Diff mode is enabled.
See the `treemacs-git-commit-diff-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `treemacs-git-commit-diff-mode'.")

(custom-autoload 'treemacs-git-commit-diff-mode "treemacs-git-commit-diff-mode" nil)

(autoload 'treemacs-git-commit-diff-mode "treemacs-git-commit-diff-mode" "\
Minor mode to display commit differences for your git-tracked projects.

This is a minor mode.  If called interactively, toggle the
`Treemacs-Git-Commit-Diff mode' mode.  If the prefix argument is
positive, enable the mode, and if it is zero or negative, disable
the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable
the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `(default-value \\='treemacs-git-commit-diff-mode)'.

The mode's hook is called both when the mode is enabled and when
it is disabled.

When enabled treemacs will add an annotation next to every git project showing
how many commits ahead or behind your current branch is compared to its remote
counterpart.

The difference will be shown using the format `↑x ↓y', where `x' and `y' are the
numbers of commits a project is ahead or behind.  The numbers are determined
based on the output of `git status -sb'.

By default the annotation is only updated when manually updating a project with
`treemacs-refresh'.  You can install `treemacs-magit' to enable automatic
updates whenever you commit/fetch/rebase etc. in magit.

Does not require `treemacs-git-mode' to be active.

\(fn &optional ARG)" t nil)

(register-definition-prefixes "treemacs-git-commit-diff-mode" '("treemacs--"))



(defvar treemacs-indicate-top-scroll-mode nil "\
Non-nil if Treemacs-Indicate-Top-Scroll mode is enabled.
See the `treemacs-indicate-top-scroll-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `treemacs-indicate-top-scroll-mode'.")

(custom-autoload 'treemacs-indicate-top-scroll-mode "treemacs-header-line" nil)

(autoload 'treemacs-indicate-top-scroll-mode "treemacs-header-line" "\
Minor mode which shows whether treemacs is scrolled all the way to the top.

This is a minor mode.  If called interactively, toggle the
`Treemacs-Indicate-Top-Scroll mode' mode.  If the prefix argument
is positive, enable the mode, and if it is zero or negative,
disable the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable
the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `(default-value \\='treemacs-indicate-top-scroll-mode)'.

The mode's hook is called both when the mode is enabled and when
it is disabled.

When this mode is enabled the header line of the treemacs window will display
whether the window's first line is visible or not.

The strings used for the display are determined by
`treemacs-header-scroll-indicators'.

This mode makes use of `treemacs-user-header-line-format' - and thus
`header-line-format' - and is therefore incompatible with other modifications to
these options.

\(fn &optional ARG)" t nil)

(register-definition-prefixes "treemacs-header-line" '("treemacs-"))



(autoload 'treemacs-common-helpful-hydra "treemacs-hydras" "\
Summon a helpful hydra to show you the treemacs keymap.

This hydra will show the most commonly used keybinds for treemacs.  For the more
advanced (probably rarely used keybinds) see `treemacs-advanced-helpful-hydra'.

The keybinds shown in this hydra are not static, but reflect the actual
keybindings currently in use (including evil mode).  If the hydra is unable to
find the key a command is bound to it will show a blank instead." t nil)

(autoload 'treemacs-advanced-helpful-hydra "treemacs-hydras" "\
Summon a helpful hydra to show you the treemacs keymap.

This hydra will show the more advanced (rarely used) keybinds for treemacs.  For
the more commonly used keybinds see `treemacs-common-helpful-hydra'.

The keybinds shown in this hydra are not static, but reflect the actual
keybindings currently in use (including evil mode).  If the hydra is unable to
find the key a command is bound to it will show a blank instead." t nil)

(register-definition-prefixes "treemacs-hydras" '("treemacs-helpful-hydra"))



(autoload 'treemacs-resize-icons "treemacs-icons" "\
Resize the current theme's icons to the given SIZE.

If SIZE is \\='nil' the icons are not resized and will retain their default size
of 22 pixels.

There is only one size, the icons are square and the aspect ratio will be
preserved when resizing them therefore width and height are the same.

Resizing the icons only works if Emacs was built with ImageMagick support, or if
using Emacs >= 27.1,which has native image resizing support.  If this is not the
case this function will not have any effect.

Custom icons are not taken into account, only the size of treemacs' own icons
png are changed.

\(fn SIZE)" t nil)

(autoload 'treemacs-define-custom-icon "treemacs-icons" "\
Define a custom ICON for the current theme to use for FILE-EXTENSIONS.

Note that treemacs has a very loose definition of what constitutes a file
extension - it's either everything past the last period, or just the file's full
name if there is no period.  This makes it possible to match file names like
\\='.gitignore' and \\='Makefile'.

Additionally FILE-EXTENSIONS are also not case sensitive and will be stored in a
down-cased state.

\(fn ICON &rest FILE-EXTENSIONS)" nil nil)

(autoload 'treemacs-define-custom-image-icon "treemacs-icons" "\
Same as `treemacs-define-custom-icon' but for image icons instead of strings.
FILE is the path to an icon image (and not the actual icon string).
FILE-EXTENSIONS are all the (not case-sensitive) file extensions the icon
should be used for.

\(fn FILE &rest FILE-EXTENSIONS)" nil nil)

(autoload 'treemacs-map-icons-with-auto-mode-alist "treemacs-icons" "\
Remaps icons for EXTENSIONS according to `auto-mode-alist'.
EXTENSIONS should be a list of file extensions such that they match the regex
stored in `auto-mode-alist', for example \\='(\".cc\").
MODE-ICON-ALIST is an alist that maps which mode from `auto-mode-alist' should
be assigned which treemacs icon, for example
`((c-mode . ,(treemacs-get-icon-value \"c\"))
  (c++-mode . ,(treemacs-get-icon-value \"cpp\")))

\(fn EXTENSIONS MODE-ICON-ALIST)" nil nil)

(register-definition-prefixes "treemacs-icons" '("treemacs-"))



(register-definition-prefixes "treemacs-interface" '("treemacs-"))



(register-definition-prefixes "treemacs-logging" '("treemacs-"))



(register-definition-prefixes "treemacs-macros" '("treemacs-"))



(autoload 'treemacs-mode "treemacs-mode" "\
A major mode for displaying the file system in a tree layout.

\(fn)" t nil)

(register-definition-prefixes "treemacs-mode" '("treemacs-"))



(autoload 'treemacs-leftclick-action "treemacs-mouse-interface" "\
Move focus to the clicked line.
Must be bound to a mouse click, or EVENT will not be supplied.

\(fn EVENT)" t nil)

(autoload 'treemacs-doubleclick-action "treemacs-mouse-interface" "\
Run the appropriate double-click action for the current node.
In the default configuration this means to expand/collapse directories and open
files and tags in the most recently used window.

This function's exact configuration is stored in
`treemacs-doubleclick-actions-config'.

Must be bound to a mouse double click to properly handle a click EVENT.

\(fn EVENT)" t nil)

(autoload 'treemacs-single-click-expand-action "treemacs-mouse-interface" "\
A modified single-leftclick action that expands the clicked nodes.
Can be bound to <mouse1> if you prefer to expand nodes with a single click
instead of a double click.  Either way it must be bound to a mouse click, or
EVENT will not be supplied.

Clicking on icons will expand a file's tags, just like
`treemacs-leftclick-action'.

\(fn EVENT)" t nil)

(autoload 'treemacs-dragleftclick-action "treemacs-mouse-interface" "\
Drag a file/dir node to be opened in a window.
Must be bound to a mouse click, or EVENT will not be supplied.

\(fn EVENT)" t nil)

(autoload 'treemacs-define-doubleclick-action "treemacs-mouse-interface" "\
Define the behaviour of `treemacs-doubleclick-action'.
Determines that a button with a given STATE should lead to the execution of
ACTION.

The list of possible states can be found in `treemacs-valid-button-states'.
ACTION should be one of the `treemacs-visit-node-*' commands.

\(fn STATE ACTION)" nil nil)

(autoload 'treemacs-node-buffer-and-position "treemacs-mouse-interface" "\
Return source buffer or list of buffer and position for the current node.
This information can be used for future display.  Stay in the selected window
and ignore any prefix argument.

\(fn &optional _)" t nil)

(autoload 'treemacs-rightclick-menu "treemacs-mouse-interface" "\
Show a contextual right click menu based on click EVENT.

\(fn EVENT)" t nil)

(register-definition-prefixes "treemacs-mouse-interface" '("treemacs--"))



(defvar treemacs-peek-mode nil "\
Non-nil if Treemacs-Peek mode is enabled.
See the `treemacs-peek-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `treemacs-peek-mode'.")

(custom-autoload 'treemacs-peek-mode "treemacs-peek-mode" nil)

(autoload 'treemacs-peek-mode "treemacs-peek-mode" "\
Minor mode that allows you to peek at buffers before deciding to open them.

This is a minor mode.  If called interactively, toggle the
`Treemacs-Peek mode' mode.  If the prefix argument is positive,
enable the mode, and if it is zero or negative, disable the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable
the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `(default-value \\='treemacs-peek-mode)'.

The mode's hook is called both when the mode is enabled and when
it is disabled.

While the mode is active treemacs will automatically display the file at point,
without leaving the treemacs window.

Peeking will stop when you leave the treemacs window, be it through a command
like `treemacs-RET-action' or some other window selection change.

Files' buffers that have been opened for peeking will be cleaned up if they did
not exist before peeking started.

The peeked window can be scrolled using
`treemacs-next/previous-line-other-window' and
`treemacs-next/previous-page-other-window'

\(fn &optional ARG)" t nil)

(register-definition-prefixes "treemacs-peek-mode" '("treemacs--"))



(register-definition-prefixes "treemacs-persistence" '("treemacs-"))



(defvar treemacs-project-follow-mode nil "\
Non-nil if Treemacs-Project-Follow mode is enabled.
See the `treemacs-project-follow-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `treemacs-project-follow-mode'.")

(custom-autoload 'treemacs-project-follow-mode "treemacs-project-follow-mode" nil)

(autoload 'treemacs-project-follow-mode "treemacs-project-follow-mode" "\
Toggle `treemacs-only-current-project-mode'.

This is a minor mode.  If called interactively, toggle the
`Treemacs-Project-Follow mode' mode.  If the prefix argument is
positive, enable the mode, and if it is zero or negative, disable
the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable
the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `(default-value \\='treemacs-project-follow-mode)'.

The mode's hook is called both when the mode is enabled and when
it is disabled.

This is a minor mode meant for those who do not care about treemacs' workspace
features, or its preference to work with multiple projects simultaneously.  When
enabled it will function as an automated version of
`treemacs-display-current-project-exclusively', making sure that, after a small
idle delay, the current project, and *only* the current project, is displayed in
treemacs.

The project detection is based on the current buffer, and will try to determine
the project using the following methods, in the order they are listed:

- the current projectile.el project, if `treemacs-projectile' is installed
- the current project.el project
- the current `default-directory'

The update will only happen when treemacs is in the foreground, meaning a
treemacs window must exist in the current scope.

This mode requires at least Emacs version 27 since it relies on
`window-buffer-change-functions' and `window-selection-change-functions'.

\(fn &optional ARG)" t nil)

(register-definition-prefixes "treemacs-project-follow-mode" '("treemacs--"))



(register-definition-prefixes "treemacs-rendering" '("treemacs-"))



(register-definition-prefixes "treemacs-scope" '("treemacs-"))



(autoload 'treemacs--flatten&sort-imenu-index "treemacs-tag-follow-mode" "\
Flatten current file's imenu index and sort it by tag position.
The tags are sorted into the order in which they appear, regardless of section
or nesting depth." nil nil)

(defvar treemacs-tag-follow-mode nil "\
Non-nil if Treemacs-Tag-Follow mode is enabled.
See the `treemacs-tag-follow-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `treemacs-tag-follow-mode'.")

(custom-autoload 'treemacs-tag-follow-mode "treemacs-tag-follow-mode" nil)

(autoload 'treemacs-tag-follow-mode "treemacs-tag-follow-mode" "\
Toggle `treemacs-tag-follow-mode'.

This is a minor mode.  If called interactively, toggle the
`Treemacs-Tag-Follow mode' mode.  If the prefix argument is
positive, enable the mode, and if it is zero or negative, disable
the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable
the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `(default-value \\='treemacs-tag-follow-mode)'.

The mode's hook is called both when the mode is enabled and when
it is disabled.

This acts as more fine-grained alternative to `treemacs-follow-mode' and will
thus disable `treemacs-follow-mode' on activation.  When enabled treemacs will
focus not only the file of the current buffer, but also the tag at point.

The follow action is attached to Emacs' idle timer and will run
`treemacs-tag-follow-delay' seconds of idle time.  The delay value is not an
integer, meaning it accepts floating point values like 1.5.

Every time a tag is followed a re--scan of the imenu index is forced by
temporarily setting `imenu-auto-rescan' to t (though a cache is applied as long
as the buffer is unmodified).  This is necessary to assure that creation or
deletion of tags does not lead to errors and guarantees an always up-to-date tag
view.

Note that in order to move to a tag in treemacs the treemacs buffer's window
needs to be temporarily selected, which will reset blink-cursor-mode's timer if
it is enabled.  This will result in the cursor blinking seemingly pausing for a
short time and giving the appearance of the tag follow action lasting much
longer than it really does.

\(fn &optional ARG)" t nil)

(register-definition-prefixes "treemacs-tag-follow-mode" '("treemacs--"))



(autoload 'treemacs--expand-file-node "treemacs-tags" "\
Open tag items for file BTN.
Recursively open all tags below BTN when RECURSIVE is non-nil.

\(fn BTN &optional RECURSIVE)" nil nil)

(autoload 'treemacs--collapse-file-node "treemacs-tags" "\
Close node given by BTN.
Remove all open tag entries under BTN when RECURSIVE.

\(fn BTN &optional RECURSIVE)" nil nil)

(autoload 'treemacs--visit-or-expand/collapse-tag-node "treemacs-tags" "\
Visit tag section BTN if possible, expand or collapse it otherwise.
Pass prefix ARG on to either visit or toggle action.

FIND-WINDOW is a special provision depending on this function's invocation
context and decides whether to find the window to display in (if the tag is
visited instead of the node being expanded).

On the one hand it can be called based on `treemacs-RET-actions-config' (or
TAB).  The functions in these configs are expected to find the windows they need
to display in themselves, so FIND-WINDOW must be t. On the other hand this
function is also called from the top level vist-node functions like
`treemacs-visit-node-vertical-split' which delegates to the
`treemacs--execute-button-action' macro which includes the determination of
the display window.

\(fn BTN ARG FIND-WINDOW)" nil nil)

(autoload 'treemacs--expand-tag-node "treemacs-tags" "\
Open tags node items for BTN.
Open all tag section under BTN when call is RECURSIVE.

\(fn BTN &optional RECURSIVE)" nil nil)

(autoload 'treemacs--collapse-tag-node "treemacs-tags" "\
Close tags node at BTN.
Remove all open tag entries under BTN when RECURSIVE.

\(fn BTN &optional RECURSIVE)" nil nil)

(autoload 'treemacs--goto-tag "treemacs-tags" "\
Go to the tag at BTN.

\(fn BTN)" nil nil)

(autoload 'treemacs--create-imenu-index-function "treemacs-tags" "\
The `imenu-create-index-function' for treemacs buffers." nil nil)

(function-put 'treemacs--create-imenu-index-function 'side-effect-free 't)

(register-definition-prefixes "treemacs-tags" '("treemacs--"))



(register-definition-prefixes "treemacs-themes" '("treemacs-"))



(register-definition-prefixes "treemacs-treelib" '("treemacs-"))



(register-definition-prefixes "treemacs-visuals" '("treemacs-"))



(register-definition-prefixes "treemacs-workspaces" '("treemacs-"))




)
(let ((load-true-file-name "/home/cam/.emacs.d/elpa/transient-0.5.3/transient-autoloads.el")(load-file-name "/home/cam/.emacs.d/elpa/transient-0.5.3/transient-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/home/cam/.emacs.d/elpa/transient-0.5.3/transient-autoloads.el") (car load-path))))



(autoload 'transient-insert-suffix "transient" "\
Insert a SUFFIX into PREFIX before LOC.
PREFIX is a prefix command, a symbol.
SUFFIX is a suffix command or a group specification (of
  the same forms as expected by `transient-define-prefix').
LOC is a command, a key vector, a key description (a string
  as returned by `key-description'), or a coordination list
  (whose last element may also be a command or key).
Remove a conflicting binding unless optional KEEP-OTHER is
  non-nil.
See info node `(transient)Modifying Existing Transients'.

\(fn PREFIX LOC SUFFIX &optional KEEP-OTHER)" nil nil)

(function-put 'transient-insert-suffix 'lisp-indent-function 'defun)

(autoload 'transient-append-suffix "transient" "\
Insert a SUFFIX into PREFIX after LOC.
PREFIX is a prefix command, a symbol.
SUFFIX is a suffix command or a group specification (of
  the same forms as expected by `transient-define-prefix').
LOC is a command, a key vector, a key description (a string
  as returned by `key-description'), or a coordination list
  (whose last element may also be a command or key).
Remove a conflicting binding unless optional KEEP-OTHER is
  non-nil.
See info node `(transient)Modifying Existing Transients'.

\(fn PREFIX LOC SUFFIX &optional KEEP-OTHER)" nil nil)

(function-put 'transient-append-suffix 'lisp-indent-function 'defun)

(autoload 'transient-replace-suffix "transient" "\
Replace the suffix at LOC in PREFIX with SUFFIX.
PREFIX is a prefix command, a symbol.
SUFFIX is a suffix command or a group specification (of
  the same forms as expected by `transient-define-prefix').
LOC is a command, a key vector, a key description (a string
  as returned by `key-description'), or a coordination list
  (whose last element may also be a command or key).
See info node `(transient)Modifying Existing Transients'.

\(fn PREFIX LOC SUFFIX)" nil nil)

(function-put 'transient-replace-suffix 'lisp-indent-function 'defun)

(autoload 'transient-remove-suffix "transient" "\
Remove the suffix or group at LOC in PREFIX.
PREFIX is a prefix command, a symbol.
LOC is a command, a key vector, a key description (a string
  as returned by `key-description'), or a coordination list
  (whose last element may also be a command or key).
See info node `(transient)Modifying Existing Transients'.

\(fn PREFIX LOC)" nil nil)

(function-put 'transient-remove-suffix 'lisp-indent-function 'defun)

(register-definition-prefixes "transient" '("static-if" "transient"))




)
(let ((load-true-file-name "/home/cam/.emacs.d/elpa/toxi-theme-20160424.2126/toxi-theme-autoloads.el")(load-file-name "/home/cam/.emacs.d/elpa/toxi-theme-20160424.2126/toxi-theme-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/home/cam/.emacs.d/elpa/toxi-theme-20160424.2126/toxi-theme-autoloads.el") (car load-path))))



(when load-file-name (add-to-list 'custom-theme-load-path (file-name-as-directory (file-name-directory load-file-name))))

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "toxi-theme" '("toxi")))




)
(let ((load-true-file-name "/home/cam/.emacs.d/elpa/toc-org-1.2.0/toc-org-autoloads.el")(load-file-name "/home/cam/.emacs.d/elpa/toc-org-1.2.0/toc-org-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/home/cam/.emacs.d/elpa/toc-org-1.2.0/toc-org-autoloads.el") (car load-path))))



(autoload 'toc-org-enable "toc-org" "\
Enable toc-org in this buffer." nil nil)

(autoload 'toc-org-mode "toc-org" "\
Toggle `toc-org' in this buffer.

If called interactively, enable Toc-Org mode if ARG is positive,
and disable it if ARG is zero or negative.  If called from Lisp,
also enable the mode if ARG is omitted or nil, and toggle it if
ARG is `toggle'; disable the mode otherwise.

\(fn &optional ARG)" t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "toc-org" '("toc-org-")))




)
(let ((load-true-file-name "/home/cam/.emacs.d/elpa/textile-mode-20230112.1030/textile-mode-autoloads.el")(load-file-name "/home/cam/.emacs.d/elpa/textile-mode-20230112.1030/textile-mode-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/home/cam/.emacs.d/elpa/textile-mode-20230112.1030/textile-mode-autoloads.el") (car load-path))))



(autoload 'textile-mode "textile-mode" "\
A major mode for editing textile files.

\(fn)" t nil)

(register-definition-prefixes "textile-mode" '("textile-"))




)
(let ((load-true-file-name "/home/cam/.emacs.d/elpa/tao-theme-20231117.1840/tao-theme-autoloads.el")(load-file-name "/home/cam/.emacs.d/elpa/tao-theme-20231117.1840/tao-theme-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/home/cam/.emacs.d/elpa/tao-theme-20231117.1840/tao-theme-autoloads.el") (car load-path))))



(register-definition-prefixes "tao-theme" '("tao-"))



(and load-file-name (boundp 'custom-theme-load-path) (add-to-list 'custom-theme-load-path (file-name-as-directory (file-name-directory load-file-name))))

(register-definition-prefixes "tao-yang-theme" '("tao-yang"))



(and load-file-name (boundp 'custom-theme-load-path) (add-to-list 'custom-theme-load-path (file-name-as-directory (file-name-directory load-file-name))))

(register-definition-prefixes "tao-yin-theme" '("tao-yin"))




)
(let ((load-true-file-name "/home/cam/.emacs.d/elpa/tangotango-theme-20220714.2034/tangotango-theme-autoloads.el")(load-file-name "/home/cam/.emacs.d/elpa/tangotango-theme-20220714.2034/tangotango-theme-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/home/cam/.emacs.d/elpa/tangotango-theme-20220714.2034/tangotango-theme-autoloads.el") (car load-path))))



(and load-file-name (boundp 'custom-theme-load-path) (add-to-list 'custom-theme-load-path (file-name-as-directory (file-name-directory load-file-name))))

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "tangotango-theme" '("tangotango")))




)
(let ((load-true-file-name "/home/cam/.emacs.d/elpa/tango-plus-theme-20221011.1012/tango-plus-theme-autoloads.el")(load-file-name "/home/cam/.emacs.d/elpa/tango-plus-theme-20221011.1012/tango-plus-theme-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/home/cam/.emacs.d/elpa/tango-plus-theme-20221011.1012/tango-plus-theme-autoloads.el") (car load-path))))



(when (and (boundp 'custom-theme-load-path) load-file-name) (add-to-list 'custom-theme-load-path (file-name-as-directory (file-name-directory load-file-name))))

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "tango-plus-theme" '("tango-plus")))




)
(let ((load-true-file-name "/home/cam/.emacs.d/elpa/tango-2-theme-20120312.2025/tango-2-theme-autoloads.el")(load-file-name "/home/cam/.emacs.d/elpa/tango-2-theme-20120312.2025/tango-2-theme-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/home/cam/.emacs.d/elpa/tango-2-theme-20120312.2025/tango-2-theme-autoloads.el") (car load-path))))



(when load-file-name (add-to-list 'custom-theme-load-path (file-name-as-directory (file-name-directory load-file-name))))

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "tango-2-theme" '("tango-2")))




)
(let ((load-true-file-name "/home/cam/.emacs.d/elpa/tagedit-1.4.0/tagedit-autoloads.el")(load-file-name "/home/cam/.emacs.d/elpa/tagedit-1.4.0/tagedit-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/home/cam/.emacs.d/elpa/tagedit-1.4.0/tagedit-autoloads.el") (car load-path))))



(autoload 'tagedit-add-paredit-like-keybindings "tagedit" nil t nil)

(autoload 'tagedit-add-experimental-features "tagedit" nil nil nil)

(autoload 'tagedit-disable-experimental-features "tagedit" nil nil nil)

(autoload 'tagedit-insert-equal "tagedit" nil t nil)

(autoload 'tagedit-insert-quote "tagedit" nil t nil)

(autoload 'tagedit-insert-lt "tagedit" nil t nil)

(autoload 'tagedit-insert-hash "tagedit" nil t nil)

(autoload 'tagedit-insert-dot "tagedit" nil t nil)

(autoload 'tagedit-insert-gt "tagedit" nil t nil)

(autoload 'tagedit-insert-exclamation-mark "tagedit" nil t nil)

(autoload 'tagedit-maybe-insert-slash "tagedit" nil t nil)

(autoload 'tagedit-kill "tagedit" nil t nil)

(autoload 'tagedit-forward-slurp-tag "tagedit" nil t nil)

(autoload 'tagedit-forward-barf-tag "tagedit" nil t nil)

(autoload 'tagedit-kill-attribute "tagedit" nil t nil)

(autoload 'tagedit-toggle-multiline-tag "tagedit" nil t nil)

(autoload 'tagedit-raise-tag "tagedit" nil t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "tagedit" '("tagedit-" "te/")))




)
(let ((load-true-file-name "/home/cam/.emacs.d/elpa/tablist-20231019.1126/tablist-autoloads.el")(load-file-name "/home/cam/.emacs.d/elpa/tablist-20231019.1126/tablist-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/home/cam/.emacs.d/elpa/tablist-20231019.1126/tablist-autoloads.el") (car load-path))))



(autoload 'tablist-minor-mode "tablist" "\
Toggle tablist minor mode.

If called interactively, enable Tablist minor mode if ARG is
positive, and disable it if ARG is zero or negative.  If called
from Lisp, also enable the mode if ARG is omitted or nil, and
toggle it if ARG is `toggle'; disable the mode otherwise.

\(fn &optional ARG)" t nil)

(autoload 'tablist-mode "tablist" "\


\(fn)" t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "tablist" '("tablist-")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "tablist-filter" '("tablist-filter-")))




)
(let ((load-true-file-name "/home/cam/.emacs.d/elpa/ivy-0.14.2/ivy-autoloads.el")(load-file-name "/home/cam/.emacs.d/elpa/ivy-0.14.2/ivy-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/home/cam/.emacs.d/elpa/ivy-0.14.2/ivy-autoloads.el") (car load-path))))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "colir" '("colir-")))



(autoload 'ivy-resume "ivy" "\
Resume the last completion session, or SESSION if non-nil.
With a prefix arg, try to restore a recorded completion session,
if one exists.

\(fn &optional SESSION)" t nil)

(autoload 'ivy-read "ivy" "\
Read a string in the minibuffer, with completion.

PROMPT is a string, normally ending in a colon and a space.
`ivy-count-format' is prepended to PROMPT during completion.

COLLECTION is either a list of strings, a function, an alist, or
a hash table, supplied for `minibuffer-completion-table'.

PREDICATE is applied to filter out the COLLECTION immediately.
This argument is for compatibility with `completing-read'.

When REQUIRE-MATCH is non-nil, only members of COLLECTION can be
selected. In can also be a lambda.

If INITIAL-INPUT is non-nil, then insert that input in the
minibuffer initially.

HISTORY is a name of a variable to hold the completion session
history.

KEYMAP is composed with `ivy-minibuffer-map'.

PRESELECT, when non-nil, determines which one of the candidates
matching INITIAL-INPUT to select initially.  An integer stands
for the position of the desired candidate in the collection,
counting from zero.  Otherwise, use the first occurrence of
PRESELECT in the collection.  Comparison is first done with
`equal'.  If that fails, and when applicable, match PRESELECT as
a regular expression.

DEF is for compatibility with `completing-read'.

UPDATE-FN is called each time the candidate list is re-displayed.

When SORT is non-nil, `ivy-sort-functions-alist' determines how
to sort candidates before displaying them.

ACTION is a function to call after selecting a candidate.
It takes one argument, the selected candidate. If COLLECTION is
an alist, the argument is a cons cell, otherwise it's a string.

MULTI-ACTION, when non-nil, is called instead of ACTION when
there are marked candidates. It takes the list of candidates as
its only argument. When it's nil, ACTION is called on each marked
candidate.

UNWIND is a function of no arguments to call before exiting.

RE-BUILDER is a function transforming input text into a regex
pattern.

MATCHER is a function which can override how candidates are
filtered based on user input.  It takes a regex pattern and a
list of candidates, and returns the list of matching candidates.

DYNAMIC-COLLECTION is a boolean specifying whether the list of
candidates is updated after each input by calling COLLECTION.

EXTRA-PROPS is a plist that can be used to store
collection-specific session-specific data.

CALLER is a symbol to uniquely identify the caller to `ivy-read'.
It is used, along with COLLECTION, to determine which
customizations apply to the current completion session.

\(fn PROMPT COLLECTION &key PREDICATE REQUIRE-MATCH INITIAL-INPUT HISTORY PRESELECT DEF KEYMAP UPDATE-FN SORT ACTION MULTI-ACTION UNWIND RE-BUILDER MATCHER DYNAMIC-COLLECTION EXTRA-PROPS CALLER)" nil nil)

(autoload 'ivy-completing-read "ivy" "\
Read a string in the minibuffer, with completion.

This interface conforms to `completing-read' and can be used for
`completing-read-function'.

PROMPT is a string that normally ends in a colon and a space.
COLLECTION is either a list of strings, an alist, an obarray, or a hash table.
PREDICATE limits completion to a subset of COLLECTION.
REQUIRE-MATCH is a boolean value or a symbol.  See `completing-read'.
INITIAL-INPUT is a string inserted into the minibuffer initially.
HISTORY is a list of previously selected inputs.
DEF is the default value.
INHERIT-INPUT-METHOD is currently ignored.

\(fn PROMPT COLLECTION &optional PREDICATE REQUIRE-MATCH INITIAL-INPUT HISTORY DEF INHERIT-INPUT-METHOD)" nil nil)

(defvar ivy-mode nil "\
Non-nil if Ivy mode is enabled.
See the `ivy-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `ivy-mode'.")

(custom-autoload 'ivy-mode "ivy" nil)

(autoload 'ivy-mode "ivy" "\
Toggle Ivy mode on or off.
Turn Ivy mode on if ARG is positive, off otherwise.
Turning on Ivy mode sets `completing-read-function' to
`ivy-completing-read'.

Global bindings:
\\{ivy-mode-map}

Minibuffer bindings:
\\{ivy-minibuffer-map}

\(fn &optional ARG)" t nil)

(autoload 'ivy-switch-buffer "ivy" "\
Switch to another buffer." t nil)

(autoload 'ivy-switch-view "ivy" "\
Switch to one of the window views stored by `ivy-push-view'." t nil)

(autoload 'ivy-switch-buffer-other-window "ivy" "\
Switch to another buffer in another window." t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "ivy" '("ivy-" "with-ivy-window")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "ivy-overlay" '("ivy-")))




)
(let ((load-true-file-name "/home/cam/.emacs.d/elpa/swiper-0.14.2/swiper-autoloads.el")(load-file-name "/home/cam/.emacs.d/elpa/swiper-0.14.2/swiper-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/home/cam/.emacs.d/elpa/swiper-0.14.2/swiper-autoloads.el") (car load-path))))



(autoload 'swiper-avy "swiper" "\
Jump to one of the current swiper candidates with `avy'." t nil)

(autoload 'swiper-backward "swiper" "\
`isearch-backward' with an overview.
When non-nil, INITIAL-INPUT is the initial search pattern.

\(fn &optional INITIAL-INPUT)" t nil)

(autoload 'swiper-thing-at-point "swiper" "\
`swiper' with `ivy-thing-at-point'." t nil)

(autoload 'swiper-all-thing-at-point "swiper" "\
`swiper-all' with `ivy-thing-at-point'." t nil)

(autoload 'swiper "swiper" "\
`isearch-forward' with an overview.
When non-nil, INITIAL-INPUT is the initial search pattern.

\(fn &optional INITIAL-INPUT)" t nil)

(autoload 'swiper-all "swiper" "\
Run `swiper' for all open buffers.

\(fn &optional INITIAL-INPUT)" t nil)

(autoload 'swiper-isearch "swiper" "\
A `swiper' that's not line-based.

\(fn &optional INITIAL-INPUT)" t nil)

(autoload 'swiper-isearch-backward "swiper" "\
Like `swiper-isearch' but the first result is before the point.

\(fn &optional INITIAL-INPUT)" t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "swiper" '("swiper-")))




)
(let ((load-true-file-name "/home/cam/.emacs.d/elpa/sunny-day-theme-20140413.2125/sunny-day-theme-autoloads.el")(load-file-name "/home/cam/.emacs.d/elpa/sunny-day-theme-20140413.2125/sunny-day-theme-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/home/cam/.emacs.d/elpa/sunny-day-theme-20140413.2125/sunny-day-theme-autoloads.el") (car load-path))))



(when load-file-name (add-to-list 'custom-theme-load-path (file-name-as-directory (file-name-directory load-file-name))))




)
(let ((load-true-file-name "/home/cam/.emacs.d/elpa/sublime-themes-20170606.1844/sublime-themes-autoloads.el")(load-file-name "/home/cam/.emacs.d/elpa/sublime-themes-20170606.1844/sublime-themes-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/home/cam/.emacs.d/elpa/sublime-themes-20170606.1844/sublime-themes-autoloads.el") (car load-path))))



(when (and (boundp 'custom-theme-load-path) load-file-name) (add-to-list 'custom-theme-load-path (file-name-as-directory (file-name-directory load-file-name))))

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "brin-theme" '("brin")))



(when load-file-name (add-to-list 'custom-theme-load-path (file-name-as-directory (file-name-directory load-file-name))) (when (not window-system) (custom-set-faces '(default ((t (:background nil)))))))

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "dorsey-theme" '("dorsey")))



(when load-file-name (add-to-list 'custom-theme-load-path (file-name-as-directory (file-name-directory load-file-name))) (when (not window-system) (custom-set-faces '(default ((t (:background nil)))))))

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "fogus-theme" '("fogus")))



(when (and (boundp 'custom-theme-load-path) load-file-name) (add-to-list 'custom-theme-load-path (file-name-as-directory (file-name-directory load-file-name))))

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "graham-theme" '("graham")))



(when (and (boundp 'custom-theme-load-path) load-file-name) (add-to-list 'custom-theme-load-path (file-name-as-directory (file-name-directory load-file-name))))

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "granger-theme" '("granger")))



(when load-file-name (add-to-list 'custom-theme-load-path (file-name-as-directory (file-name-directory load-file-name))) (when (not window-system) (custom-set-faces '(default ((t (:background nil)))))))

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "hickey-theme" '("hickey")))



(when load-file-name (add-to-list 'custom-theme-load-path (file-name-as-directory (file-name-directory load-file-name))) (when (not window-system) (custom-set-faces '(default ((t (:background nil)))))))

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "junio-theme" '("junio")))



(when (and (boundp 'custom-theme-load-path) load-file-name) (add-to-list 'custom-theme-load-path (file-name-as-directory (file-name-directory load-file-name))))

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "mccarthy-theme" '("mccarthy")))



(when (and (boundp 'custom-theme-load-path) load-file-name) (add-to-list 'custom-theme-load-path (file-name-as-directory (file-name-directory load-file-name))))

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "odersky-theme" '("odersky")))



(when (and (boundp 'custom-theme-load-path) load-file-name) (add-to-list 'custom-theme-load-path (file-name-as-directory (file-name-directory load-file-name))))

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "ritchie-theme" '("ritchie")))



(when (and (boundp 'custom-theme-load-path) load-file-name) (add-to-list 'custom-theme-load-path (file-name-as-directory (file-name-directory load-file-name))))

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "spolsky-theme" '("spolsky")))



(when (boundp 'custom-theme-load-path) (add-to-list 'custom-theme-load-path (file-name-as-directory (file-name-directory load-file-name))))



(when load-file-name (add-to-list 'custom-theme-load-path (file-name-as-directory (file-name-directory load-file-name))) (when (not window-system) (custom-set-faces '(default ((t (:background nil)))))))

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "wilson-theme" '("wilson")))




)
(let ((load-true-file-name "/home/cam/.emacs.d/elpa/subatomic256-theme-20130621.210/subatomic256-theme-autoloads.el")(load-file-name "/home/cam/.emacs.d/elpa/subatomic256-theme-20130621.210/subatomic256-theme-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/home/cam/.emacs.d/elpa/subatomic256-theme-20130621.210/subatomic256-theme-autoloads.el") (car load-path))))



(when load-file-name (add-to-list 'custom-theme-load-path (file-name-as-directory (file-name-directory load-file-name))))

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "subatomic256-theme" '("subatomic256")))




)
(let ((load-true-file-name "/home/cam/.emacs.d/elpa/subatomic-theme-20220128.1615/subatomic-theme-autoloads.el")(load-file-name "/home/cam/.emacs.d/elpa/subatomic-theme-20220128.1615/subatomic-theme-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/home/cam/.emacs.d/elpa/subatomic-theme-20220128.1615/subatomic-theme-autoloads.el") (car load-path))))



(when load-file-name (add-to-list 'custom-theme-load-path (file-name-as-directory (file-name-directory load-file-name))))

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "subatomic-theme" '("subatomic")))




)
(let ((load-true-file-name "/home/cam/.emacs.d/elpa/srcery-theme-20230829.737/srcery-theme-autoloads.el")(load-file-name "/home/cam/.emacs.d/elpa/srcery-theme-20230829.737/srcery-theme-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/home/cam/.emacs.d/elpa/srcery-theme-20230829.737/srcery-theme-autoloads.el") (car load-path))))



(when load-file-name (add-to-list 'custom-theme-load-path (file-name-as-directory (file-name-directory load-file-name))))

(register-definition-prefixes "srcery-theme" '("srcery"))




)
(let ((load-true-file-name "/home/cam/.emacs.d/elpa/spinner-1.7.4/spinner-autoloads.el")(load-file-name "/home/cam/.emacs.d/elpa/spinner-1.7.4/spinner-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/home/cam/.emacs.d/elpa/spinner-1.7.4/spinner-autoloads.el") (car load-path))))



(autoload 'spinner-create "spinner" "\
Create a spinner of the given TYPE.
The possible TYPEs are described in `spinner--type-to-frames'.

FPS, if given, is the number of desired frames per second.
Default is `spinner-frames-per-second'.

If BUFFER-LOCAL is non-nil, the spinner will be automatically
deactivated if the buffer is killed.  If BUFFER-LOCAL is a
buffer, use that instead of current buffer.

When started, in order to function properly, the spinner runs a
timer which periodically calls `force-mode-line-update' in the
current buffer.  If BUFFER-LOCAL was set at creation time, then
`force-mode-line-update' is called in that buffer instead.  When
the spinner is stopped, the timer is deactivated.

DELAY, if given, is the number of seconds to wait after starting
the spinner before actually displaying it. It is safe to cancel
the spinner before this time, in which case it won't display at
all.

\(fn &optional TYPE BUFFER-LOCAL FPS DELAY)" nil nil)

(autoload 'spinner-start "spinner" "\
Start a mode-line spinner of given TYPE-OR-OBJECT.
If TYPE-OR-OBJECT is an object created with `make-spinner',
simply activate it.  This method is designed for minor modes, so
they can use the spinner as part of their lighter by doing:
    '(:eval (spinner-print THE-SPINNER))
To stop this spinner, call `spinner-stop' on it.

If TYPE-OR-OBJECT is anything else, a buffer-local spinner is
created with this type, and it is displayed in the
`mode-line-process' of the buffer it was created it.  Both
TYPE-OR-OBJECT and FPS are passed to `make-spinner' (which see).
To stop this spinner, call `spinner-stop' in the same buffer.

Either way, the return value is a function which can be called
anywhere to stop this spinner.  You can also call `spinner-stop'
in the same buffer where the spinner was created.

FPS, if given, is the number of desired frames per second.
Default is `spinner-frames-per-second'.

DELAY, if given, is the number of seconds to wait until actually
displaying the spinner. It is safe to cancel the spinner before
this time, in which case it won't display at all.

\(fn &optional TYPE-OR-OBJECT FPS DELAY)" nil nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "spinner" '("spinner-")))




)
(let ((load-true-file-name "/home/cam/.emacs.d/elpa/spacemacs-theme-20230530.1751/spacemacs-theme-autoloads.el")(load-file-name "/home/cam/.emacs.d/elpa/spacemacs-theme-20230530.1751/spacemacs-theme-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/home/cam/.emacs.d/elpa/spacemacs-theme-20230530.1751/spacemacs-theme-autoloads.el") (car load-path))))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "spacemacs-dark-theme" '("spacemacs-dark")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "spacemacs-light-theme" '("spacemacs-light")))



(when load-file-name (add-to-list 'custom-theme-load-path (file-name-as-directory (file-name-directory load-file-name))))

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "spacemacs-theme" '("create-spacemacs-theme" "spacemacs-theme-" "true-color-p")))




)
(let ((load-true-file-name "/home/cam/.emacs.d/elpa/spacegray-theme-20150719.1931/spacegray-theme-autoloads.el")(load-file-name "/home/cam/.emacs.d/elpa/spacegray-theme-20150719.1931/spacegray-theme-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/home/cam/.emacs.d/elpa/spacegray-theme-20150719.1931/spacegray-theme-autoloads.el") (car load-path))))



(when (and (boundp 'custom-theme-load-path) load-file-name) (add-to-list 'custom-theme-load-path (file-name-as-directory (file-name-directory load-file-name))))

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "spacegray-theme" '("spacegray")))




)
(let ((load-true-file-name "/home/cam/.emacs.d/elpa/autothemer-0.2.18/autothemer-autoloads.el")(load-file-name "/home/cam/.emacs.d/elpa/autothemer-0.2.18/autothemer-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/home/cam/.emacs.d/elpa/autothemer-0.2.18/autothemer-autoloads.el") (car load-path))))



(autoload 'autothemer-deftheme "autothemer" "\
Define a theme NAME with description DESCRIPTION.
A color PALETTE can be used to define `let*'-like
bindings within both the REDUCED-SPECS and the BODY.

\(fn NAME DESCRIPTION PALETTE REDUCED-SPECS &rest BODY)" nil t)

(autoload 'autothemer-insert-missing-face "autothemer" "\
Insert a face spec template for an unthemed face.
An approximate color from the palette will be used for
color attributes." t nil)

(autoload 'autothemer-insert-missing-faces "autothemer" "\
Insert face spec templates for unthemed faces matching REGEXP.
An error is shown when no current theme is available.

\(fn &optional REGEXP)" t nil)

(autoload 'autothemer-generate-templates-filtered "autothemer" "\
Autogenerate customizations for unthemed faces matching REGEXP.

Calls `autothemer-generate-templates' after user provides REGEXP interactively.

\(fn REGEXP)" t nil)

(autoload 'autothemer-generate-templates "autothemer" "\
Autogenerate customizations for unthemed faces (optionally by REGEXP).

Generate customizations that approximate current face definitions using the
nearest colors in the color palette of `autothemer-current-theme'.

An error is shown when no current theme is available.

\(fn &optional REGEXP)" t nil)

(register-definition-prefixes "autothemer" '("autothemer-"))




)
(let ((load-true-file-name "/home/cam/.emacs.d/elpa/soothe-theme-20220922.349/soothe-theme-autoloads.el")(load-file-name "/home/cam/.emacs.d/elpa/soothe-theme-20220922.349/soothe-theme-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/home/cam/.emacs.d/elpa/soothe-theme-20220922.349/soothe-theme-autoloads.el") (car load-path))))



(and load-file-name (boundp 'custom-theme-load-path) (add-to-list 'custom-theme-load-path (file-name-as-directory (file-name-directory load-file-name))))



(and load-file-name (boundp 'custom-theme-load-path) (add-to-list 'custom-theme-load-path (file-name-as-directory (file-name-directory load-file-name))))

(register-definition-prefixes "soothe-tva" '("soothe-tva-"))




)
(let ((load-true-file-name "/home/cam/.emacs.d/elpa/solarized-theme-20231204.713/solarized-theme-autoloads.el")(load-file-name "/home/cam/.emacs.d/elpa/solarized-theme-20231204.713/solarized-theme-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/home/cam/.emacs.d/elpa/solarized-theme-20231204.713/solarized-theme-autoloads.el") (car load-path))))



(autoload 'solarized-color-blend "solarized" "\
Blends COLOR1 onto COLOR2 with ALPHA.

COLOR1 and COLOR2 should be color names (e.g. \"white\") or RGB
triplet strings (e.g. \"#ff12ec\").

Alpha should be a float between 0 and 1.

Optional argument DIGITS-PER-COMPONENT can be either 4 (the default) or 2;
use the latter if you need a 24-bit specification of a color.

\(fn COLOR1 COLOR2 ALPHA &optional DIGITS-PER-COMPONENT)" nil nil)

(autoload 'solarized-create-color-palette "solarized" "\
Create color-palette from CORE-PALETTE.

The Returned color-palette has the same format as `solarized-color-palette'

\(fn CORE-PALETTE)" nil nil)

(when (and (boundp 'custom-theme-load-path) load-file-name) (add-to-list 'custom-theme-load-path (file-name-as-directory (file-name-directory load-file-name))))

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "solarized" '("solarized-")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "solarized-dark-high-contrast-theme" '("solarized-dark-high-contrast")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "solarized-dark-theme" '("solarized-dark")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "solarized-faces" '("solarized-definition")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "solarized-gruvbox-dark-theme" '("solarized-gruvbox-dark")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "solarized-gruvbox-light-theme" '("solarized-gruvbox-light")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "solarized-light-high-contrast-theme" '("solarized-light-high-contrast")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "solarized-light-theme" '("solarized-light")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "solarized-palettes" '("solarized-")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "solarized-selenized-black-theme" '("solarized-selenized-black")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "solarized-selenized-dark-theme" '("solarized-selenized-dark")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "solarized-selenized-light-theme" '("solarized-selenized-light")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "solarized-selenized-white-theme" '("solarized-selenized-white")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "solarized-theme-utils" '("solarized-import-faces")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "solarized-wombat-dark-theme" '("solarized-wombat-dark")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "solarized-zenburn-theme" '("solarized-zenburn")))




)
(let ((load-true-file-name "/home/cam/.emacs.d/elpa/soft-stone-theme-20140614.835/soft-stone-theme-autoloads.el")(load-file-name "/home/cam/.emacs.d/elpa/soft-stone-theme-20140614.835/soft-stone-theme-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/home/cam/.emacs.d/elpa/soft-stone-theme-20140614.835/soft-stone-theme-autoloads.el") (car load-path))))



(when load-file-name (add-to-list 'custom-theme-load-path (file-name-as-directory (file-name-directory load-file-name))))




)
(let ((load-true-file-name "/home/cam/.emacs.d/elpa/soft-morning-theme-20150918.2041/soft-morning-theme-autoloads.el")(load-file-name "/home/cam/.emacs.d/elpa/soft-morning-theme-20150918.2041/soft-morning-theme-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/home/cam/.emacs.d/elpa/soft-morning-theme-20150918.2041/soft-morning-theme-autoloads.el") (car load-path))))



(when load-file-name (add-to-list 'custom-theme-load-path (file-name-as-directory (file-name-directory load-file-name))))




)
(let ((load-true-file-name "/home/cam/.emacs.d/elpa/soft-charcoal-theme-20140420.1643/soft-charcoal-theme-autoloads.el")(load-file-name "/home/cam/.emacs.d/elpa/soft-charcoal-theme-20140420.1643/soft-charcoal-theme-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/home/cam/.emacs.d/elpa/soft-charcoal-theme-20140420.1643/soft-charcoal-theme-autoloads.el") (car load-path))))



(when load-file-name (add-to-list 'custom-theme-load-path (file-name-as-directory (file-name-directory load-file-name))))




)
(let ((load-true-file-name "/home/cam/.emacs.d/elpa/smyx-theme-20141127.828/smyx-theme-autoloads.el")(load-file-name "/home/cam/.emacs.d/elpa/smyx-theme-20141127.828/smyx-theme-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/home/cam/.emacs.d/elpa/smyx-theme-20141127.828/smyx-theme-autoloads.el") (car load-path))))



(when load-file-name (add-to-list 'custom-theme-load-path (file-name-as-directory (file-name-directory load-file-name))))

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "smyx-theme" '("smyx")))




)
(let ((load-true-file-name "/home/cam/.emacs.d/elpa/simple-httpd-20230821.1458/simple-httpd-autoloads.el")(load-file-name "/home/cam/.emacs.d/elpa/simple-httpd-20230821.1458/simple-httpd-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/home/cam/.emacs.d/elpa/simple-httpd-20230821.1458/simple-httpd-autoloads.el") (car load-path))))



(autoload 'httpd-start "simple-httpd" "\
Start the web server process. If the server is already
running, this will restart the server. There is only one server
instance per Emacs instance." t nil)

(autoload 'httpd-stop "simple-httpd" "\
Stop the web server if it is currently running, otherwise do nothing." t nil)

(autoload 'httpd-running-p "simple-httpd" "\
Return non-nil if the simple-httpd server is running." nil nil)

(autoload 'httpd-serve-directory "simple-httpd" "\
Start the web server with given `directory' as `httpd-root'.

\(fn DIRECTORY)" t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "simple-httpd" '("defservlet" "httpd" "with-httpd-buffer")))




)
(let ((load-true-file-name "/home/cam/.emacs.d/elpa/shackle-1.0.4/shackle-autoloads.el")(load-file-name "/home/cam/.emacs.d/elpa/shackle-1.0.4/shackle-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/home/cam/.emacs.d/elpa/shackle-1.0.4/shackle-autoloads.el") (car load-path))))



(defvar shackle-mode nil "\
Non-nil if Shackle mode is enabled.
See the `shackle-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `shackle-mode'.")

(custom-autoload 'shackle-mode "shackle" nil)

(autoload 'shackle-mode "shackle" "\
Toggle `shackle-mode'.
This global minor mode allows you to easily set up rules for
popups in Emacs.

If called interactively, enable Shackle mode if ARG is positive,
and disable it if ARG is zero or negative.  If called from Lisp,
also enable the mode if ARG is omitted or nil, and toggle it if
ARG is `toggle'; disable the mode otherwise.

\(fn &optional ARG)" t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "shackle" '("shackle-")))




)
(let ((load-true-file-name "/home/cam/.emacs.d/elpa/seti-theme-20190201.1848/seti-theme-autoloads.el")(load-file-name "/home/cam/.emacs.d/elpa/seti-theme-20190201.1848/seti-theme-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/home/cam/.emacs.d/elpa/seti-theme-20190201.1848/seti-theme-autoloads.el") (car load-path))))



(and load-file-name (boundp 'custom-theme-load-path) (add-to-list 'custom-theme-load-path (file-name-as-directory (file-name-directory load-file-name))))

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "seti-theme" '("seti")))




)
(let ((load-true-file-name "/home/cam/.emacs.d/elpa/session-20210422.53/session-autoloads.el")(load-file-name "/home/cam/.emacs.d/elpa/session-20210422.53/session-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/home/cam/.emacs.d/elpa/session-20210422.53/session-autoloads.el") (car load-path))))



(autoload 'session-jump-to-last-change "session" "\
Jump to the position of the last change.
Without prefix arg, jump successively to previous change positions which
differ by at least `session-jump-undo-threshold' characters by repeated
invocation of this command.  With prefix argument 0, jump to end of last
change.  With numeric prefix argument, jump to start of first change in
the ARG's undo block in the `buffer-undo-list'.

With non-numeric prefix argument (\\[universal-argument] only), set
point as oldest change position.  It might change slightly if you jump
to it due to intermediate insert/delete elements in the
`buffer-undo-list'.

\(fn &optional ARG)" t nil)

(autoload 'session-initialize "session" "\
Initialize package session and read previous session file.
Setup hooks and load `session-save-file', see variable `session-initialize'.  At
best, this function is called at the end of the Emacs startup, i.e., add
this function to `after-init-hook'." t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "session" '("session-")))




)
(let ((load-true-file-name "/home/cam/.emacs.d/elpa/scratch-20220319.1705/scratch-autoloads.el")(load-file-name "/home/cam/.emacs.d/elpa/scratch-20220319.1705/scratch-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/home/cam/.emacs.d/elpa/scratch-20220319.1705/scratch-autoloads.el") (car load-path))))



(defvar scratch-buffer nil "\
Non-nil if the current buffer is a scratch buffer.")

(autoload 'scratch "scratch" "\
Get a scratch buffer for the MODE.

When called interactively with a prefix arg, prompt for the mode.

\(fn MODE)" t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "scratch" '("scratch-")))




)
(let ((load-true-file-name "/home/cam/.emacs.d/elpa/deferred-0.5.1/deferred-autoloads.el")(load-file-name "/home/cam/.emacs.d/elpa/deferred-0.5.1/deferred-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/home/cam/.emacs.d/elpa/deferred-0.5.1/deferred-autoloads.el") (car load-path))))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "deferred" '("deferred:")))




)
(let ((load-true-file-name "/home/cam/.emacs.d/elpa/sage-shell-mode-0.3/sage-shell-mode-autoloads.el")(load-file-name "/home/cam/.emacs.d/elpa/sage-shell-mode-0.3/sage-shell-mode-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/home/cam/.emacs.d/elpa/sage-shell-mode-0.3/sage-shell-mode-autoloads.el") (car load-path))))



(autoload 'sage-shell-blocks:backward "sage-shell-blocks" "\
Move backwards to the last beginning of a block.

\(fn ARG)" t nil)

(autoload 'sage-shell-blocks:forward "sage-shell-blocks" "\
Move forwards to the next beginning of a block.

\(fn ARG)" t nil)

(autoload 'sage-shell-blocks:send-current "sage-shell-blocks" "\
Send the block that the point is currently in to the inferior shell.
Move to end of block sent." t nil)

(autoload 'sage-shell-blocks:pull-next "sage-shell-blocks" "\
Evaluate the next block of the last visited file in Sage mode." t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "sage-shell-blocks" '("sage-shell-blocks:")))



(defvaralias 'sage-shell:command 'sage-shell:sage-executable)

(defvaralias 'sage-shell:add-to-texinputs-p 'sage-shell-sagetex:add-to-texinputs-p)

(autoload 'sage-shell:run-sage "sage-shell-mode" "\


\(fn CMD)" t nil)

(autoload 'sage-shell:run-new-sage "sage-shell-mode" "\


\(fn CMD)" t nil)

(autoload 'sage-shell:sage-mode "sage-shell-mode" "\


\(fn)" t nil)

(defvar sage-shell:func-alias-alist '((sage-shell:sage-mode . sage-mode) (sage-shell:run-sage . run-sage) (sage-shell:run-new-sage . run-new-sage)))

(defvar sage-shell:var-alias-alist '((sage-shell:sage-mode-map . sage-mode-map) (sage-shell:sage-mode-hook . sage-mode-hook) (sage-shell:sage-mode-syntax-table . sage-mode-syntax-table) (sage-shell:sage-mode-abbrev-table . sage-mode-abbrev-table)))

(defun sage-shell:define-alias nil "\
Define aliases as follows:
| Original name                     | Alias                  |
|-----------------------------------+------------------------|
| sage-shell:sage-mode              | sage-mode              |
| sage-shell:sage-mode-map          | sage-mode-map          |
| sage-shell:sage-mode-hook         | sage-mode-hook         |
| sage-shell:sage-mode-syntax-table | sage-mode-syntax-table |
| sage-shell:sage-mode-abbrev-table | sage-mode-abbrev-table |
| sage-shell:run-sage               | run-sage               |
| sage-shell:run-new-sage           | run-new-sage           |
|-----------------------------------+------------------------|
" (interactive) (dolist (c sage-shell:func-alias-alist) (defalias (cdr c) (car c))) (dolist (c sage-shell:var-alias-alist) (defvaralias (cdr c) (car c))))

(add-to-list 'auto-mode-alist `(,(rx ".sage" eos) . sage-shell:sage-mode))

(autoload 'sage-shell-sagetex:load-file "sage-shell-mode" "\
Load a .sagetex.sage file to an existing Sage process.

\(fn FILENAME)" t nil)

(autoload 'sage-shell-sagetex:load-current-file "sage-shell-mode" nil t nil)

(defalias 'sage-shell:sagetex-load-file 'sage-shell-sagetex:load-file)

(autoload 'sage-shell-sagetex:compile-file "sage-shell-mode" "\
This command runs LaTeX on the current file, loads the
.sagetex.sage file to an existing Sage process and runs LaTeX
again. See the documentation of
`sage-shell-sagetex:latex-command' and
`sage-shell-sagetex:auctex-command-name' for the customization.

\(fn F)" t nil)

(autoload 'sage-shell-sagetex:compile-current-file "sage-shell-mode" nil t nil)

(autoload 'sage-shell-sagetex:run-latex-and-load-file "sage-shell-mode" "\
This command runs LaTeX and loads a .sagetex.sage file to the
exisiting Sage process.

\(fn F)" t nil)

(autoload 'sage-shell-sagetex:run-latex-and-load-current-file "sage-shell-mode" nil t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "sage-shell-mode" '("sage-shell")))



(autoload 'sage-shell-view-mode "sage-shell-view" "\
Toggle automatic typesetting of Sage output.

If called interactively, enable Sage-Shell-View mode if ARG is
positive, and disable it if ARG is zero or negative.  If called
from Lisp, also enable the mode if ARG is omitted or nil, and
toggle it if ARG is `toggle'; disable the mode otherwise.

Typesetting of math formulas is done by LATEX subprocesses and
PDF to PNG conversions.

\(fn &optional ARG)" t nil)

(defalias 'sage-shell-view 'sage-shell-view-mode)

(autoload 'sage-shell-view-enable-inline-output "sage-shell-view" "\
Enable inline output pretty-printing, i.e. typeset output from sage in the `sage-shell-mode' buffer.
WARNING: this communicates with the sage process.  Only use this when sage is running." t nil)

(autoload 'sage-shell-view-enable-inline-plots "sage-shell-view" "\
Enable inline plotting, i.e. display plots in the `sage-shell-mode' buffer and do not spawn an external viewer.
WARNING: this communicates with the sage process.  Only use this when sage is running." t nil)

(autoload 'sage-shell-view-toggle-inline-output "sage-shell-view" "\
Toggle inline typesetting of outputs in `sage-shell-mode' buffer.

\(fn &optional (VERBOSE t))" t nil)

(autoload 'sage-shell-view-toggle-inline-plots "sage-shell-view" "\
Toggle inline plotting of graphs in `sage-shell-mode' buffer.

\(fn &optional (VERBOSE t))" t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "sage-shell-view" '("sage-shell-view-")))




)
(let ((load-true-file-name "/home/cam/.emacs.d/elpa/rvm-1.4.2/rvm-autoloads.el")(load-file-name "/home/cam/.emacs.d/elpa/rvm-1.4.2/rvm-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/home/cam/.emacs.d/elpa/rvm-1.4.2/rvm-autoloads.el") (car load-path))))



(autoload 'rvm-use-default "rvm" "\
use the rvm-default ruby as the current ruby version" t nil)

(autoload 'rvm-activate-corresponding-ruby "rvm" "\
activate the corresponding ruby version for the file in the current buffer.
This function searches for an .rvmrc file and activates the configured ruby.
If no .rvmrc file is found, the default ruby is used insted." t nil)

(autoload 'rvm-use "rvm" "\
switch the current ruby version to any ruby, which is installed with rvm

\(fn NEW-RUBY NEW-GEMSET)" t nil)

(autoload 'rvm-open-gem "rvm" "\


\(fn GEMHOME)" t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "rvm" '("rvm")))




)
(let ((load-true-file-name "/home/cam/.emacs.d/elpa/rust-mode-1.0.5/rust-mode-autoloads.el")(load-file-name "/home/cam/.emacs.d/elpa/rust-mode-1.0.5/rust-mode-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/home/cam/.emacs.d/elpa/rust-mode-1.0.5/rust-mode-autoloads.el") (car load-path))))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "rust-cargo" '("rust-")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "rust-compile" '("cargo-compilation-regexps" "rustc-")))



(autoload 'rust-mode "rust-mode" "\
Major mode for Rust code.

\\{rust-mode-map}

\(fn)" t nil)

(add-to-list 'auto-mode-alist '("\\.rs\\'" . rust-mode))

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "rust-mode" '("rust-")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "rust-playpen" '("rust-")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "rust-rustfmt" '("rust-")))



(autoload 'rust-dbg-wrap-or-unwrap "rust-utils" "\
Either remove or add the dbg! macro." t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "rust-utils" '("rust-")))




)
(let ((load-true-file-name "/home/cam/.emacs.d/elpa/js2-mode-20231225.1150/js2-mode-autoloads.el")(load-file-name "/home/cam/.emacs.d/elpa/js2-mode-20231225.1150/js2-mode-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/home/cam/.emacs.d/elpa/js2-mode-20231225.1150/js2-mode-autoloads.el") (car load-path))))



(autoload 'js2-imenu-extras-setup "js2-imenu-extras" nil nil nil)

(autoload 'js2-imenu-extras-mode "js2-imenu-extras" "\
Toggle Imenu support for frameworks and structural patterns.

This is a minor mode.  If called interactively, toggle the
`Js2-Imenu-Extras mode' mode.  If the prefix argument is
positive, enable the mode, and if it is zero or negative, disable
the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable
the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `js2-imenu-extras-mode'.

The mode's hook is called both when the mode is enabled and when
it is disabled.

\(fn &optional ARG)" t nil)

(register-definition-prefixes "js2-imenu-extras" '("js2-imenu-"))



(autoload 'js2-highlight-unused-variables-mode "js2-mode" "\
Toggle highlight of unused variables.

This is a minor mode.  If called interactively, toggle the
`Js2-Highlight-Unused-Variables mode' mode.  If the prefix
argument is positive, enable the mode, and if it is zero or
negative, disable the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable
the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `js2-highlight-unused-variables-mode'.

The mode's hook is called both when the mode is enabled and when
it is disabled.

\(fn &optional ARG)" t nil)

(autoload 'js2-minor-mode "js2-mode" "\
Minor mode for running js2 as a background linter.
This allows you to use a different major mode for JavaScript editing,
such as `js-mode', while retaining the asynchronous error/warning
highlighting features of `js2-mode'.

This is a minor mode.  If called interactively, toggle the `Js2
minor mode' mode.  If the prefix argument is positive, enable the
mode, and if it is zero or negative, disable the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable
the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `js2-minor-mode'.

The mode's hook is called both when the mode is enabled and when
it is disabled.

\(fn &optional ARG)" t nil)

(autoload 'js2-mode "js2-mode" "\
Major mode for editing JavaScript code.

\(fn)" t nil)

(autoload 'js2-jsx-mode "js2-mode" "\
Major mode for editing JSX code in Emacs 26 and earlier.

To edit JSX code in Emacs 27, use `js-mode' as your major mode
with `js2-minor-mode' enabled.

To customize the indentation for this mode, set the SGML offset
variables (`sgml-basic-offset' et al) locally, like so:

  (defun set-jsx-indentation ()
    (setq-local sgml-basic-offset js2-basic-offset))
  (add-hook \\='js2-jsx-mode-hook #\\='set-jsx-indentation)

\(fn)" t nil)

(register-definition-prefixes "js2-mode" '("js2-"))



(register-definition-prefixes "js2-old-indent" '("js2-"))




)
(let ((load-true-file-name "/home/cam/.emacs.d/elpa/rjsx-mode-20200224.2149/rjsx-mode-autoloads.el")(load-file-name "/home/cam/.emacs.d/elpa/rjsx-mode-20200224.2149/rjsx-mode-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/home/cam/.emacs.d/elpa/rjsx-mode-20200224.2149/rjsx-mode-autoloads.el") (car load-path))))



(autoload 'rjsx-mode "rjsx-mode" "\
Major mode for editing JSX files.

\(fn)" t nil)

(autoload 'rjsx-minor-mode "rjsx-mode" "\
Minor mode for parsing JSX syntax into an AST.

If called interactively, enable Rjsx minor mode if ARG is
positive, and disable it if ARG is zero or negative.  If called
from Lisp, also enable the mode if ARG is omitted or nil, and
toggle it if ARG is `toggle'; disable the mode otherwise.

\(fn &optional ARG)" t nil)

(add-to-list 'auto-mode-alist '("\\.jsx\\'" . rjsx-mode))

(autoload 'rjsx-comment-dwim "rjsx-mode" "\
RJSX implementation of `comment-dwim'. If called on a region,
this function delegates to `comment-or-uncomment-region'. If the
point is not in a JSX context, it delegates to the
`comment-dwim', otherwise it will comment the JSX AST node at
point using the apppriate comment delimiters.

For example: If point is on a JSX attribute or JSX expression, it
will comment the entire attribute using \"/* */\". , otherwise if
it's on a descendent JSX Element, it will use \"{/* */}\"
instead.

\(fn ARG)" t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "rjsx-mode" '("rjsx-")))




)
(let ((load-true-file-name "/home/cam/.emacs.d/elpa/reverse-theme-20141205.145/reverse-theme-autoloads.el")(load-file-name "/home/cam/.emacs.d/elpa/reverse-theme-20141205.145/reverse-theme-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/home/cam/.emacs.d/elpa/reverse-theme-20141205.145/reverse-theme-autoloads.el") (car load-path))))



(when load-file-name (add-to-list 'custom-theme-load-path (file-name-as-directory (file-name-directory load-file-name))))

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "reverse-theme" '("reverse")))




)
(let ((load-true-file-name "/home/cam/.emacs.d/elpa/restart-emacs-0.1.1/restart-emacs-autoloads.el")(load-file-name "/home/cam/.emacs.d/elpa/restart-emacs-0.1.1/restart-emacs-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/home/cam/.emacs.d/elpa/restart-emacs-0.1.1/restart-emacs-autoloads.el") (car load-path))))



(autoload 'restart-emacs "restart-emacs" "\
Restart Emacs.

When called interactively ARGS is interpreted as follows

- with a single `universal-argument' (`C-u') Emacs is restarted
  with `--debug-init' flag
- with two `universal-argument' (`C-u') Emacs is restarted with
  `-Q' flag
- with three `universal-argument' (`C-u') the user prompted for
  the arguments

When called non-interactively ARGS should be a list of arguments
with which Emacs should be restarted.

\(fn &optional ARGS)" t nil)

(register-definition-prefixes "restart-emacs" '("restart-emacs--"))




)
(let ((load-true-file-name "/home/cam/.emacs.d/elpa/request-0.3.3/request-autoloads.el")(load-file-name "/home/cam/.emacs.d/elpa/request-0.3.3/request-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/home/cam/.emacs.d/elpa/request-0.3.3/request-autoloads.el") (car load-path))))



(register-definition-prefixes "request" '("request-"))



(register-definition-prefixes "request-deferred" '("request-deferred"))




)
(let ((load-true-file-name "/home/cam/.emacs.d/elpa/regex-tool-20170104.1918/regex-tool-autoloads.el")(load-file-name "/home/cam/.emacs.d/elpa/regex-tool-20170104.1918/regex-tool-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/home/cam/.emacs.d/elpa/regex-tool-20170104.1918/regex-tool-autoloads.el") (car load-path))))



(autoload 'regex-tool "regex-tool" nil t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "regex-tool" '("regex-")))




)
(let ((load-true-file-name "/home/cam/.emacs.d/elpa/rebecca-theme-20180324.821/rebecca-theme-autoloads.el")(load-file-name "/home/cam/.emacs.d/elpa/rebecca-theme-20180324.821/rebecca-theme-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/home/cam/.emacs.d/elpa/rebecca-theme-20180324.821/rebecca-theme-autoloads.el") (car load-path))))



(when load-file-name (add-to-list 'custom-theme-load-path (file-name-as-directory (file-name-directory load-file-name))))

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "rebecca-theme" '("rebecca")))




)
(let ((load-true-file-name "/home/cam/.emacs.d/elpa/rainbow-delimiters-2.1.5/rainbow-delimiters-autoloads.el")(load-file-name "/home/cam/.emacs.d/elpa/rainbow-delimiters-2.1.5/rainbow-delimiters-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/home/cam/.emacs.d/elpa/rainbow-delimiters-2.1.5/rainbow-delimiters-autoloads.el") (car load-path))))



(autoload 'rainbow-delimiters-mode "rainbow-delimiters" "\
Highlight nested parentheses, brackets, and braces according to their depth.

If called interactively, enable Rainbow-Delimiters mode if ARG is
positive, and disable it if ARG is zero or negative.  If called
from Lisp, also enable the mode if ARG is omitted or nil, and
toggle it if ARG is `toggle'; disable the mode otherwise.

\(fn &optional ARG)" t nil)

(autoload 'rainbow-delimiters-mode-enable "rainbow-delimiters" "\
Enable `rainbow-delimiters-mode'." nil nil)

(autoload 'rainbow-delimiters-mode-disable "rainbow-delimiters" "\
Disable `rainbow-delimiters-mode'." nil nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "rainbow-delimiters" '("rainbow-delimiters-")))




)
(let ((load-true-file-name "/home/cam/.emacs.d/elpa/railscasts-theme-20150219.1525/railscasts-theme-autoloads.el")(load-file-name "/home/cam/.emacs.d/elpa/railscasts-theme-20150219.1525/railscasts-theme-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/home/cam/.emacs.d/elpa/railscasts-theme-20150219.1525/railscasts-theme-autoloads.el") (car load-path))))



(when load-file-name (add-to-list 'custom-theme-load-path (file-name-as-directory (file-name-directory load-file-name))))

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "railscasts-theme" '("railscasts")))




)
(let ((load-true-file-name "/home/cam/.emacs.d/elpa/qrencode-1.2/qrencode-autoloads.el")(load-file-name "/home/cam/.emacs.d/elpa/qrencode-1.2/qrencode-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/home/cam/.emacs.d/elpa/qrencode-1.2/qrencode-autoloads.el") (car load-path))))



(autoload 'qrencode-region "qrencode" "\
Encode region between BEG and END into a QR code and show in a buffer.

\(fn BEG END)" t nil)

(autoload 'qrencode-url-at-point "qrencode" "\
Encode any URL found at point." t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "qrencode" '("qrencode")))




)
(let ((load-true-file-name "/home/cam/.emacs.d/elpa/pyvenv-1.21/pyvenv-autoloads.el")(load-file-name "/home/cam/.emacs.d/elpa/pyvenv-1.21/pyvenv-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/home/cam/.emacs.d/elpa/pyvenv-1.21/pyvenv-autoloads.el") (car load-path))))



(autoload 'pyvenv-activate "pyvenv" "\
Activate the virtual environment in DIRECTORY.

\(fn DIRECTORY)" t nil)

(autoload 'pyvenv-deactivate "pyvenv" "\
Deactivate any current virtual environment." t nil)

(autoload 'pyvenv-workon "pyvenv" "\
Activate a virtual environment from $WORKON_HOME.

If the virtual environment NAME is already active, this function
does not try to reactivate the environment.

\(fn NAME)" t nil)

(defvar pyvenv-mode nil "\
Non-nil if Pyvenv mode is enabled.
See the `pyvenv-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `pyvenv-mode'.")

(custom-autoload 'pyvenv-mode "pyvenv" nil)

(autoload 'pyvenv-mode "pyvenv" "\
Global minor mode for pyvenv.

If called interactively, enable Pyvenv mode if ARG is positive,
and disable it if ARG is zero or negative.  If called from Lisp,
also enable the mode if ARG is omitted or nil, and toggle it if
ARG is `toggle'; disable the mode otherwise.

Will show the current virtualenv in the mode line, and respect a
`pyvenv-workon' setting in files.

\(fn &optional ARG)" t nil)

(defvar pyvenv-tracking-mode nil "\
Non-nil if Pyvenv-Tracking mode is enabled.
See the `pyvenv-tracking-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `pyvenv-tracking-mode'.")

(custom-autoload 'pyvenv-tracking-mode "pyvenv" nil)

(autoload 'pyvenv-tracking-mode "pyvenv" "\
Global minor mode to track the current virtualenv.

If called interactively, enable Pyvenv-Tracking mode if ARG is
positive, and disable it if ARG is zero or negative.  If called
from Lisp, also enable the mode if ARG is omitted or nil, and
toggle it if ARG is `toggle'; disable the mode otherwise.

When this mode is active, pyvenv will activate a buffer-specific
virtualenv whenever the user switches to a buffer with a
buffer-local `pyvenv-workon' or `pyvenv-activate' variable.

\(fn &optional ARG)" t nil)

(autoload 'pyvenv-restart-python "pyvenv" "\
Restart Python inferior processes." t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "pyvenv" '("pyvenv-")))




)
(let ((load-true-file-name "/home/cam/.emacs.d/elpa/async-1.9.8/async-autoloads.el")(load-file-name "/home/cam/.emacs.d/elpa/async-1.9.8/async-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/home/cam/.emacs.d/elpa/async-1.9.8/async-autoloads.el") (car load-path))))



(autoload 'async-start-process "async" "\
Start the executable PROGRAM asynchronously named NAME.  See `async-start'.
PROGRAM is passed PROGRAM-ARGS, calling FINISH-FUNC with the
process object when done.  If FINISH-FUNC is nil, the future
object will return the process object when the program is
finished.  Set DEFAULT-DIRECTORY to change PROGRAM's current
working directory.

\(fn NAME PROGRAM FINISH-FUNC &rest PROGRAM-ARGS)" nil nil)

(autoload 'async-start "async" "\
Execute START-FUNC (often a lambda) in a subordinate Emacs process.
When done, the return value is passed to FINISH-FUNC.  Example:

    (async-start
       ;; What to do in the child process
       (lambda ()
         (message \"This is a test\")
         (sleep-for 3)
         222)

       ;; What to do when it finishes
       (lambda (result)
         (message \"Async process done, result should be 222: %s\"
                  result)))

If you call `async-send' from a child process, the message will
be also passed to the FINISH-FUNC.  You can test RESULT to see if
it is a message by using `async-message-p'.  If nil, it means
this is the final result.  Example of the FINISH-FUNC:

    (lambda (result)
      (if (async-message-p result)
          (message \"Received a message from child process: %s\" result)
        (message \"Async process done, result: %s\" result)))

If FINISH-FUNC is nil or missing, a future is returned that can
be inspected using `async-get', blocking until the value is
ready.  Example:

    (let ((proc (async-start
                   ;; What to do in the child process
                   (lambda ()
                     (message \"This is a test\")
                     (sleep-for 3)
                     222))))

        (message \"I'm going to do some work here\") ;; ....

        (message \"Waiting on async process, result should be 222: %s\"
                 (async-get proc)))

If you don't want to use a callback, and you don't care about any
return value from the child process, pass the `ignore' symbol as
the second argument (if you don't, and never call `async-get', it
will leave *emacs* process buffers hanging around):

    (async-start
     (lambda ()
       (delete-file \"a remote file on a slow link\" nil))
     \\='ignore)

Special case:
If the output of START-FUNC is a string with properties
e.g. (buffer-string) RESULT will be transformed in a list where the
car is the string itself (without props) and the cdr the rest of
properties, this allows using in FINISH-FUNC the string without
properties and then apply the properties in cdr to this string (if
needed).
Properties handling special objects like markers are returned as
list to allow restoring them later.
See <https://github.com/jwiegley/emacs-async/issues/145> for more infos.

Note: Even when FINISH-FUNC is present, a future is still
returned except that it yields no value (since the value is
passed to FINISH-FUNC).  Call `async-get' on such a future always
returns nil.  It can still be useful, however, as an argument to
`async-ready' or `async-wait'.

\(fn START-FUNC &optional FINISH-FUNC)" nil nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "async" '("async-")))



(autoload 'async-byte-recompile-directory "async-bytecomp" "\
Compile all *.el files in DIRECTORY asynchronously.
All *.elc files are systematically deleted before proceeding.

\(fn DIRECTORY &optional QUIET)" nil nil)

(defvar async-bytecomp-package-mode nil "\
Non-nil if Async-Bytecomp-Package mode is enabled.
See the `async-bytecomp-package-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `async-bytecomp-package-mode'.")

(custom-autoload 'async-bytecomp-package-mode "async-bytecomp" nil)

(autoload 'async-bytecomp-package-mode "async-bytecomp" "\
Byte compile asynchronously packages installed with package.el.
Async compilation of packages can be controlled by
`async-bytecomp-allowed-packages'.

If called interactively, enable Async-Bytecomp-Package mode if
ARG is positive, and disable it if ARG is zero or negative.  If
called from Lisp, also enable the mode if ARG is omitted or nil,
and toggle it if ARG is `toggle'; disable the mode otherwise.

\(fn &optional ARG)" t nil)

(autoload 'async-byte-compile-file "async-bytecomp" "\
Byte compile Lisp code FILE asynchronously.

Same as `byte-compile-file' but asynchronous.

\(fn FILE)" t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "async-bytecomp" '("async-")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "async-test" '("async-test-")))



(defvar dired-async-mode nil "\
Non-nil if Dired-Async mode is enabled.
See the `dired-async-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `dired-async-mode'.")

(custom-autoload 'dired-async-mode "dired-async" nil)

(autoload 'dired-async-mode "dired-async" "\
Do dired actions asynchronously.

If called interactively, enable Dired-Async mode if ARG is
positive, and disable it if ARG is zero or negative.  If called
from Lisp, also enable the mode if ARG is omitted or nil, and
toggle it if ARG is `toggle'; disable the mode otherwise.

\(fn &optional ARG)" t nil)

(autoload 'dired-async-do-copy "dired-async" "\
Run ‘dired-do-copy’ asynchronously.

\(fn &optional ARG)" t nil)

(autoload 'dired-async-do-symlink "dired-async" "\
Run ‘dired-do-symlink’ asynchronously.

\(fn &optional ARG)" t nil)

(autoload 'dired-async-do-hardlink "dired-async" "\
Run ‘dired-do-hardlink’ asynchronously.

\(fn &optional ARG)" t nil)

(autoload 'dired-async-do-rename "dired-async" "\
Run ‘dired-do-rename’ asynchronously.

\(fn &optional ARG)" t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "dired-async" '("dired-async-")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "smtpmail-async" '("async-smtpmail-")))




)
(let ((load-true-file-name "/home/cam/.emacs.d/elpa/pyim-5.3.3/pyim-autoloads.el")(load-file-name "/home/cam/.emacs.d/elpa/pyim-5.3.3/pyim-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/home/cam/.emacs.d/elpa/pyim-5.3.3/pyim-autoloads.el") (car load-path))))



(defvar pyim-title "PYIM ")

(register-input-method "pyim" "UTF-8" #'pyim-activate pyim-title "")

(autoload 'pyim-activate "pyim" "\
pyim 启动函数.

pyim 是使用 `pyim-activate' 来启动输入法，这个命令主要做如下工作：
1. 重置所有的 local 变量。
2. 创建汉字到拼音和拼音到汉字的 hash table。
3. 创建词库缓存 dcache.
4. 运行 hook： `pyim-load-hook'。
5. 将 `pyim--kill-emacs-hook-function' 命令添加到 `kill-emacs-hook' , emacs 关闭
之前将用户选择过的词生成的缓存和词频缓存保存到文件，供以后使用。
6. 设定变量：
   1. `input-method-function'
   2. `deactivate-current-input-method-function'
7. 运行 `pyim-activate-hook'

pyim 使用函数 `pyim-activate' 启动输入法的时候，会将变量
`input-method-function' 设置为 `pyim-input-method' ，这个变量会影
响 `read-event' 的行为。

当输入字符时，`read-event' 会被调用，`read-event' 调用的过程中，
会执行 `pyim-input-method' 这个函数。

\(fn &optional ARGS)" t nil)

(autoload 'pyim-convert-string-at-point "pyim" "\
将光标前的用户输入的字符串转换为中文.

\(fn &optional _)" t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "pyim" '("pyim-")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "pyim-autoselector" '("pyim-autoselector-")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "pyim-candidates" '("pyim-")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "pyim-cloudim" '("pyim-cloudim")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "pyim-common" '("pyim-")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "pyim-cregexp" '("pyim-cregexp-")))



(autoload 'pyim-cregexp-convert-at-point "pyim-cregexp-utils" "\
将光标前的字符串按拼音的规则转换为一个搜索中文的 regexp.
用于实现拼音搜索中文的功能。

在 minibuffer 中，这个命令默认会自动运行 `exit-minibuffer'.
这个可以使用 INSERT-ONLY 参数控制。

\(fn &optional INSERT-ONLY)" t nil)

(defvar pyim-isearch-mode nil "\
Non-nil if Pyim-Isearch mode is enabled.
See the `pyim-isearch-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `pyim-isearch-mode'.")

(custom-autoload 'pyim-isearch-mode "pyim-cregexp-utils" nil)

(autoload 'pyim-isearch-mode "pyim-cregexp-utils" "\
这个 mode 为 isearch 添加拼音搜索功能.

If called interactively, enable Pyim-Isearch mode if ARG is
positive, and disable it if ARG is zero or negative.  If called
from Lisp, also enable the mode if ARG is omitted or nil, and
toggle it if ARG is `toggle'; disable the mode otherwise.

\(fn &optional ARG)" t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "pyim-cregexp-utils" '("pyim-")))



(autoload 'pyim-cstring-to-pinyin "pyim-cstring" "\
将汉字字符串转换为对应的拼音字符串的工具.

如果 SHOU-ZI-MU 设置为 t, 转换仅得到拼音首字母字符串。当
RETURN-LIST 设置为 t 时，返回一个拼音列表，这个列表包含词条的一个
或者多个拼音（词条包含多音字时）；如果 IGNORE-DUO-YIN-ZI 设置为
t, 遇到多音字时，只使用第一个拼音，其它拼音忽略。

BUG: 当 STRING 中包含其它标点符号，并且设置 SEPERATER 时，结果会
包含多余的连接符：比如： \"你=好\" --> \"ni-=-hao\"

\(fn STRING &optional SHOU-ZI-MU SEPARATOR RETURN-LIST IGNORE-DUO-YIN-ZI _)" nil nil)

(autoload 'pyim-cstring-to-pinyin-simple "pyim-cstring" "\
简化版的 `pyim-cstring-to-pinyin', 不处理多音字。

\(fn STRING &optional SHOU-ZI-MU SEPARATOR RETURN-LIST)" nil nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "pyim-cstring" '("pyim-")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "pyim-cstring-utils" '("pyim-")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "pyim-dcache" '("pyim-dcache-")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "pyim-dhashcache" '("pyim-dhashcache-")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "pyim-dict" '("pyim-")))



(autoload 'pyim-dicts-manager "pyim-dict-manager" "\
pyim 词库管理器。

使用这个词库管理器可以方便的执行下列命令：
1. 添加词库。
2. 删除词库。
3. 向上和向下移动词库。
4. 保存词库设置。
5. 重启输入法。" t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "pyim-dict-manager" '("pyim-dict-manager-")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "pyim-dregcache" '("pyim-dregcache-")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "pyim-entered" '("pyim-entered-")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "pyim-indicator" '("pyim-indicator-")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "pyim-liberime" '("pyim-")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "pyim-outcome" '("pyim-")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "pyim-page" '("pyim-page-")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "pyim-pinyin" '("pyim-pinyin-")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "pyim-preview" '("pyim-preview--")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "pyim-probe" '("pyim-probe-")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "pyim-process" '("pyim-")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "pyim-punctuation" '("pyim-punctuation-")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "pyim-pymap" '("pyim-pymap")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "pyim-pymap-utils" '("pyim-pymap-")))



(autoload 'pyim-default-scheme "pyim-scheme" "\


\(fn &optional SCHEME-NAME)" t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "pyim-scheme" '("pyim-")))




)
(let ((load-true-file-name "/home/cam/.emacs.d/elpa/pyim-wbdict-20220604.1340/pyim-wbdict-autoloads.el")(load-file-name "/home/cam/.emacs.d/elpa/pyim-wbdict-20220604.1340/pyim-wbdict-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/home/cam/.emacs.d/elpa/pyim-wbdict-20220604.1340/pyim-wbdict-autoloads.el") (car load-path))))



(autoload 'pyim-wbdict-v86-enable "pyim-wbdict" "\
Add wubi dict (86 version) to pyim." t nil)

(autoload 'pyim-wbdict-v86-single-enable "pyim-wbdict" "\
Add wubi dict (86 version, single character) to pyim." t nil)

(autoload 'pyim-wbdict-v98-enable "pyim-wbdict" "\
Add wubi dict (98 version) to pyim." t nil)

(autoload 'pyim-wbdict-v98-morphe-enable "pyim-wbdict" "\
Add wubi dict (98 version with superset & single-word) to pyim." t nil)




)
(let ((load-true-file-name "/home/cam/.emacs.d/elpa/pyim-basedict-0.5.4/pyim-basedict-autoloads.el")(load-file-name "/home/cam/.emacs.d/elpa/pyim-basedict-0.5.4/pyim-basedict-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/home/cam/.emacs.d/elpa/pyim-basedict-0.5.4/pyim-basedict-autoloads.el") (car load-path))))



(autoload 'pyim-basedict-enable "pyim-basedict" "\
Add pyim-basedict.pyim file to `pyim-extra-dicts'." t nil)



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "pyim-basedict-utils" '("pyim-basedict-")))




)
(let ((load-true-file-name "/home/cam/.emacs.d/elpa/purple-haze-theme-20141015.229/purple-haze-theme-autoloads.el")(load-file-name "/home/cam/.emacs.d/elpa/purple-haze-theme-20141015.229/purple-haze-theme-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/home/cam/.emacs.d/elpa/purple-haze-theme-20141015.229/purple-haze-theme-autoloads.el") (car load-path))))



(when (and (boundp 'custom-theme-load-path) load-file-name) (add-to-list 'custom-theme-load-path (file-name-as-directory (file-name-directory load-file-name))))

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "purple-haze-theme" '("purple-haze")))




)
(let ((load-true-file-name "/home/cam/.emacs.d/elpa/pulseaudio-control-20230316.1819/pulseaudio-control-autoloads.el")(load-file-name "/home/cam/.emacs.d/elpa/pulseaudio-control-20230316.1819/pulseaudio-control-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/home/cam/.emacs.d/elpa/pulseaudio-control-20230316.1819/pulseaudio-control-autoloads.el") (car load-path))))



(defvar pulseaudio-control-display-mode nil "\
Non-nil if Pulseaudio-Control-Display mode is enabled.
See the `pulseaudio-control-display-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `pulseaudio-control-display-mode'.")

(custom-autoload 'pulseaudio-control-display-mode "pulseaudio-control" nil)

(autoload 'pulseaudio-control-display-mode "pulseaudio-control" "\
Show the current sink and source information in the mode line.

If called interactively, enable Pulseaudio-Control-Display mode
if ARG is positive, and disable it if ARG is zero or negative.
If called from Lisp, also enable the mode if ARG is omitted or
nil, and toggle it if ARG is `toggle'; disable the mode
otherwise.

\(fn &optional ARG)" t nil)

(autoload 'pulseaudio-control-default-keybindings "pulseaudio-control" "\
Make `C-x /' the prefix for accessing pulseaudio-control bindings." t nil)

(autoload 'pulseaudio-control-display-volume "pulseaudio-control" "\
Display volume of currently-selected Pulse sink." t nil)

(autoload 'pulseaudio-control-increase-sink-volume "pulseaudio-control" "\
Increase the volume of the current Pulse sink by VOL.

\(fn VOL)" t nil)

(autoload 'pulseaudio-control-increase-source-volume "pulseaudio-control" "\
Increase the volume of the current Pulse source by VOL.

\(fn VOL)" t nil)

(autoload 'pulseaudio-control-decrease-sink-volume "pulseaudio-control" "\
Decrease the volume of the current Pulse sink by VOL.

\(fn VOL)" t nil)

(autoload 'pulseaudio-control-decrease-source-volume "pulseaudio-control" "\
Decrease the volume of the current Pulse sink by VOL.

\(fn VOL)" t nil)

(autoload 'pulseaudio-control-select-sink-by-index "pulseaudio-control" "\
Select which Pulse SINK to act on, by numeric index.

\(fn SINK)" t nil)

(autoload 'pulseaudio-control-select-source-by-index "pulseaudio-control" "\
Select which Pulse SOURCE to act on, by numeric index.

\(fn SOURCE)" t nil)

(autoload 'pulseaudio-control-select-sink-by-name "pulseaudio-control" "\
Select which Pulse sink to act on, by name." t nil)

(autoload 'pulseaudio-control-select-source-by-name "pulseaudio-control" "\
Select which Pulse source to act on, by name." t nil)

(autoload 'pulseaudio-control-set-sink-volume "pulseaudio-control" "\
Set volume of currently-selected Pulse sink.

The value can be:

* a percentage, e.g. '10%';
* in decibels, e.g. '2dB';
* a linear factor, e.g. '0.9' or '1.1'.

Argument VOLUME is the volume provided by the user.

\(fn VOLUME)" t nil)

(autoload 'pulseaudio-control-set-source-volume "pulseaudio-control" "\
Set volume of currently-selected Pulse source.

The value can be:

* a percentage, e.g. '10%';
* in decibels, e.g. '2dB';
* a linear factor, e.g. '0.9' or '1.1'.

Argument VOLUME is the volume provided by the user.

\(fn VOLUME)" t nil)

(autoload 'pulseaudio-control-toggle-current-sink-mute "pulseaudio-control" "\
Toggle muting of currently-selected Pulse sink." t nil)

(autoload 'pulseaudio-control-toggle-current-source-mute "pulseaudio-control" "\
Toggle muting of currently-selected Pulse source." t nil)

(autoload 'pulseaudio-control-toggle-sink-mute-by-index "pulseaudio-control" "\
Toggle muting of Pulse sink, specified by index." t nil)

(autoload 'pulseaudio-control-toggle-source-mute-by-index "pulseaudio-control" "\
Toggle muting of Pulse source, specified by index." t nil)

(autoload 'pulseaudio-control-toggle-sink-mute-by-name "pulseaudio-control" "\
Toggle muting of Pulse sink, specified by name." t nil)

(autoload 'pulseaudio-control-toggle-source-mute-by-name "pulseaudio-control" "\
Toggle muting of Pulse source, specified by name." t nil)

(defvar pulseaudio-control-default-sink-mode nil "\
Non-nil if Pulseaudio-Control-Default-Sink mode is enabled.
See the `pulseaudio-control-default-sink-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `pulseaudio-control-default-sink-mode'.")

(custom-autoload 'pulseaudio-control-default-sink-mode "pulseaudio-control" nil)

(autoload 'pulseaudio-control-default-sink-mode "pulseaudio-control" "\
Set the use of @DEFAULT_SINK@ for volume operations.

If called interactively, enable Pulseaudio-Control-Default-Sink
mode if ARG is positive, and disable it if ARG is zero or
negative.  If called from Lisp, also enable the mode if ARG is
omitted or nil, and toggle it if ARG is `toggle'; disable the
mode otherwise.

\(fn &optional ARG)" t nil)

(defvar pulseaudio-control-default-source-mode nil "\
Non-nil if Pulseaudio-Control-Default-Source mode is enabled.
See the `pulseaudio-control-default-source-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `pulseaudio-control-default-source-mode'.")

(custom-autoload 'pulseaudio-control-default-source-mode "pulseaudio-control" nil)

(autoload 'pulseaudio-control-default-source-mode "pulseaudio-control" "\
Set the use of @DEFAULT_SOURCE@ for volume operations.

If called interactively, enable Pulseaudio-Control-Default-Source
mode if ARG is positive, and disable it if ARG is zero or
negative.  If called from Lisp, also enable the mode if ARG is
omitted or nil, and toggle it if ARG is `toggle'; disable the
mode otherwise.

\(fn &optional ARG)" t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "pulseaudio-control" '("pulseaudio-control-")))




)
(let ((load-true-file-name "/home/cam/.emacs.d/elpa/projectile-20240212.1100/projectile-autoloads.el")(load-file-name "/home/cam/.emacs.d/elpa/projectile-20240212.1100/projectile-autoloads.el"))



(add-to-list 'load-path (or (and load-file-name (directory-file-name (file-name-directory load-file-name))) (car load-path)))




(autoload 'projectile-version "projectile" "\
Get the Projectile version as string.

If called interactively or if SHOW-VERSION is non-nil, show the
version in the echo area and the messages buffer.

The returned string includes both, the version from package.el
and the library version, if both a present and different.

If the version number could not be determined, signal an error,
if called interactively, or if SHOW-VERSION is non-nil, otherwise
just return nil.

(fn &optional SHOW-VERSION)" t)
(autoload 'projectile-invalidate-cache "projectile" "\
Remove the current project's files from `projectile-projects-cache'.

With a prefix argument PROMPT prompts for the name of the project whose cache
to invalidate.

(fn PROMPT)" t)
(autoload 'projectile-purge-file-from-cache "projectile" "\
Purge FILE from the cache of the current project.

(fn FILE)" t)
(autoload 'projectile-purge-dir-from-cache "projectile" "\
Purge DIR from the cache of the current project.

(fn DIR)" t)
(autoload 'projectile-cache-current-file "projectile" "\
Add the currently visited file to the cache." t)
(autoload 'projectile-discover-projects-in-directory "projectile" "\
Discover any projects in DIRECTORY and add them to the projectile cache.

If DEPTH is non-nil recursively descend exactly DEPTH levels below DIRECTORY and
discover projects there.

(fn DIRECTORY &optional DEPTH)" t)
(autoload 'projectile-discover-projects-in-search-path "projectile" "\
Discover projects in `projectile-project-search-path'.
Invoked automatically when `projectile-mode' is enabled." t)
(autoload 'projectile-switch-to-buffer "projectile" "\
Switch to a project buffer." t)
(autoload 'projectile-switch-to-buffer-other-window "projectile" "\
Switch to a project buffer and show it in another window." t)
(autoload 'projectile-switch-to-buffer-other-frame "projectile" "\
Switch to a project buffer and show it in another frame." t)
(autoload 'projectile-display-buffer "projectile" "\
Display a project buffer in another window without selecting it." t)
(autoload 'projectile-project-buffers-other-buffer "projectile" "\
Switch to the most recently selected buffer project buffer.
Only buffers not visible in windows are returned." t)
(autoload 'projectile-multi-occur "projectile" "\
Do a `multi-occur' in the project's buffers.
With a prefix argument, show NLINES of context.

(fn &optional NLINES)" t)
(autoload 'projectile-find-other-file "projectile" "\
Switch between files with the same name but different extensions.
With FLEX-MATCHING, match any file that contains the base name of current file.
Other file extensions can be customized with the variable
`projectile-other-file-alist'.

(fn &optional FLEX-MATCHING)" t)
(autoload 'projectile-find-other-file-other-window "projectile" "\
Switch between files with different extensions in other window.
Switch between files with the same name but different extensions in other
window.  With FLEX-MATCHING, match any file that contains the base name of
current file.  Other file extensions can be customized with the variable
`projectile-other-file-alist'.

(fn &optional FLEX-MATCHING)" t)
(autoload 'projectile-find-other-file-other-frame "projectile" "\
Switch between files with different extensions in other frame.
Switch between files with the same name but different extensions in other frame.
With FLEX-MATCHING, match any file that contains the base name of current
file.  Other file extensions can be customized with the variable
`projectile-other-file-alist'.

(fn &optional FLEX-MATCHING)" t)
(autoload 'projectile-find-file-dwim "projectile" "\
Jump to a project's files using completion based on context.

With a prefix arg INVALIDATE-CACHE invalidates the cache first.

If point is on a filename, Projectile first tries to search for that
file in project:

- If it finds just a file, it switches to that file instantly.  This works
even if the filename is incomplete, but there's only a single file in the
current project that matches the filename at point.  For example, if
there's only a single file named \"projectile/projectile.el\" but the
current filename is \"projectile/proj\" (incomplete),
`projectile-find-file-dwim' still switches to \"projectile/projectile.el\"
immediately because this is the only filename that matches.

- If it finds a list of files, the list is displayed for selecting.  A list
of files is displayed when a filename appears more than one in the project
or the filename at point is a prefix of more than two files in a project.
For example, if `projectile-find-file-dwim' is executed on a filepath like
\"projectile/\", it lists the content of that directory.  If it is executed
on a partial filename like \"projectile/a\", a list of files with character
\"a\" in that directory is presented.

- If it finds nothing, display a list of all files in project for selecting.

(fn &optional INVALIDATE-CACHE)" t)
(autoload 'projectile-find-file-dwim-other-window "projectile" "\
Jump to a project's files using completion based on context in other window.

With a prefix arg INVALIDATE-CACHE invalidates the cache first.

If point is on a filename, Projectile first tries to search for that
file in project:

- If it finds just a file, it switches to that file instantly.  This works
even if the filename is incomplete, but there's only a single file in the
current project that matches the filename at point.  For example, if
there's only a single file named \"projectile/projectile.el\" but the
current filename is \"projectile/proj\" (incomplete),
`projectile-find-file-dwim-other-window' still switches to
\"projectile/projectile.el\" immediately because this is the only filename
that matches.

- If it finds a list of files, the list is displayed for selecting.  A list
of files is displayed when a filename appears more than one in the project
or the filename at point is a prefix of more than two files in a project.
For example, if `projectile-find-file-dwim-other-window' is executed on a
filepath like \"projectile/\", it lists the content of that directory.  If
it is executed on a partial filename like \"projectile/a\", a list of files
with character \"a\" in that directory is presented.

- If it finds nothing, display a list of all files in project for selecting.

(fn &optional INVALIDATE-CACHE)" t)
(autoload 'projectile-find-file-dwim-other-frame "projectile" "\
Jump to a project's files using completion based on context in other frame.

With a prefix arg INVALIDATE-CACHE invalidates the cache first.

If point is on a filename, Projectile first tries to search for that
file in project:

- If it finds just a file, it switches to that file instantly.  This works
even if the filename is incomplete, but there's only a single file in the
current project that matches the filename at point.  For example, if
there's only a single file named \"projectile/projectile.el\" but the
current filename is \"projectile/proj\" (incomplete),
`projectile-find-file-dwim-other-frame' still switches to
\"projectile/projectile.el\" immediately because this is the only filename
that matches.

- If it finds a list of files, the list is displayed for selecting.  A list
of files is displayed when a filename appears more than one in the project
or the filename at point is a prefix of more than two files in a project.
For example, if `projectile-find-file-dwim-other-frame' is executed on a
filepath like \"projectile/\", it lists the content of that directory.  If
it is executed on a partial filename like \"projectile/a\", a list of files
with character \"a\" in that directory is presented.

- If it finds nothing, display a list of all files in project for selecting.

(fn &optional INVALIDATE-CACHE)" t)
(autoload 'projectile-find-file "projectile" "\
Jump to a project's file using completion.
With a prefix arg INVALIDATE-CACHE invalidates the cache first.

(fn &optional INVALIDATE-CACHE)" t)
(autoload 'projectile-find-file-other-window "projectile" "\
Jump to a project's file using completion and show it in another window.

With a prefix arg INVALIDATE-CACHE invalidates the cache first.

(fn &optional INVALIDATE-CACHE)" t)
(autoload 'projectile-find-file-other-frame "projectile" "\
Jump to a project's file using completion and show it in another frame.

With a prefix arg INVALIDATE-CACHE invalidates the cache first.

(fn &optional INVALIDATE-CACHE)" t)
(autoload 'projectile-toggle-project-read-only "projectile" "\
Toggle project read only." t)
(autoload 'projectile-add-dir-local-variable "projectile" "\
Run `add-dir-local-variable' with .dir-locals.el in root of project.

Parameters MODE VARIABLE VALUE are passed directly to `add-dir-local-variable'.

(fn MODE VARIABLE VALUE)")
(autoload 'projectile-delete-dir-local-variable "projectile" "\
Run `delete-dir-local-variable' with .dir-locals.el in root of project.

Parameters MODE VARIABLE VALUE are passed directly to
`delete-dir-local-variable'.

(fn MODE VARIABLE)")
(autoload 'projectile-find-dir "projectile" "\
Jump to a project's directory using completion.

With a prefix arg INVALIDATE-CACHE invalidates the cache first.

(fn &optional INVALIDATE-CACHE)" t)
(autoload 'projectile-find-dir-other-window "projectile" "\
Jump to a project's directory in other window using completion.

With a prefix arg INVALIDATE-CACHE invalidates the cache first.

(fn &optional INVALIDATE-CACHE)" t)
(autoload 'projectile-find-dir-other-frame "projectile" "\
Jump to a project's directory in other frame using completion.

With a prefix arg INVALIDATE-CACHE invalidates the cache first.

(fn &optional INVALIDATE-CACHE)" t)
(autoload 'projectile-find-test-file "projectile" "\
Jump to a project's test file using completion.

With a prefix arg INVALIDATE-CACHE invalidates the cache first.

(fn &optional INVALIDATE-CACHE)" t)
(autoload 'projectile-find-related-file-other-window "projectile" "\
Open related file in other window." t)
(autoload 'projectile-find-related-file-other-frame "projectile" "\
Open related file in other frame." t)
(autoload 'projectile-find-related-file "projectile" "\
Open related file." t)
(autoload 'projectile-related-files-fn-groups "projectile" "\
Generate a related-files-fn which relates as KIND for files in each of GROUPS.

(fn KIND GROUPS)")
(autoload 'projectile-related-files-fn-extensions "projectile" "\
Generate a related-files-fn which relates as KIND for files having EXTENSIONS.

(fn KIND EXTENSIONS)")
(autoload 'projectile-related-files-fn-test-with-prefix "projectile" "\
Generate a related-files-fn which relates tests and impl.
Use files with EXTENSION based on TEST-PREFIX.

(fn EXTENSION TEST-PREFIX)")
(autoload 'projectile-related-files-fn-test-with-suffix "projectile" "\
Generate a related-files-fn which relates tests and impl.
Use files with EXTENSION based on TEST-SUFFIX.

(fn EXTENSION TEST-SUFFIX)")
(autoload 'projectile-project-info "projectile" "\
Display info for current project." t)
(autoload 'projectile-find-implementation-or-test-other-window "projectile" "\
Open matching implementation or test file in other window.

See the documentation of `projectile--find-matching-file' and
`projectile--find-matching-test' for how implementation and test files
are determined." t)
(autoload 'projectile-find-implementation-or-test-other-frame "projectile" "\
Open matching implementation or test file in other frame.

See the documentation of `projectile--find-matching-file' and
`projectile--find-matching-test' for how implementation and test files
are determined." t)
(autoload 'projectile-toggle-between-implementation-and-test "projectile" "\
Toggle between an implementation file and its test file.


See the documentation of `projectile--find-matching-file' and
`projectile--find-matching-test' for how implementation and test files
are determined." t)
(autoload 'projectile-grep "projectile" "\
Perform rgrep in the project.

With a prefix ARG asks for files (globbing-aware) which to grep in.
With prefix ARG of `-' (such as `M--'), default the files (without prompt),
to `projectile-grep-default-files'.

With REGEXP given, don't query the user for a regexp.

(fn &optional REGEXP ARG)" t)
(autoload 'projectile-ag "projectile" "\
Run an ag search with SEARCH-TERM in the project.

With an optional prefix argument ARG SEARCH-TERM is interpreted as a
regular expression.

(fn SEARCH-TERM &optional ARG)" t)
(autoload 'projectile-ripgrep "projectile" "\
Run a ripgrep (rg) search with `SEARCH-TERM' at current project root.

With an optional prefix argument ARG SEARCH-TERM is interpreted as a
regular expression.

This command depends on of the Emacs packages ripgrep or rg being
installed to work.

(fn SEARCH-TERM &optional ARG)" t)
(autoload 'projectile-regenerate-tags "projectile" "\
Regenerate the project's [e|g]tags." t)
(autoload 'projectile-find-tag "projectile" "\
Find tag in project." t)
(autoload 'projectile-run-command-in-root "projectile" "\
Invoke `execute-extended-command' in the project's root." t)
(autoload 'projectile-run-shell-command-in-root "projectile" "\
Invoke `shell-command' in the project's root.

(fn COMMAND &optional OUTPUT-BUFFER ERROR-BUFFER)" t)
(autoload 'projectile-run-async-shell-command-in-root "projectile" "\
Invoke `async-shell-command' in the project's root.

(fn COMMAND &optional OUTPUT-BUFFER ERROR-BUFFER)" t)
(autoload 'projectile-run-gdb "projectile" "\
Invoke `gdb' in the project's root." t)
(autoload 'projectile-run-shell "projectile" "\
Invoke `shell' in the project's root.

Switch to the project specific shell buffer if it already exists.

Use a prefix argument ARG to indicate creation of a new process instead.

(fn &optional ARG)" t)
(autoload 'projectile-run-eshell "projectile" "\
Invoke `eshell' in the project's root.

Switch to the project specific eshell buffer if it already exists.

Use a prefix argument ARG to indicate creation of a new process instead.

(fn &optional ARG)" t)
(autoload 'projectile-run-ielm "projectile" "\
Invoke `ielm' in the project's root.

Switch to the project specific ielm buffer if it already exists.

Use a prefix argument ARG to indicate creation of a new process instead.

(fn &optional ARG)" t)
(autoload 'projectile-run-term "projectile" "\
Invoke `term' in the project's root.

Switch to the project specific term buffer if it already exists.

Use a prefix argument ARG to indicate creation of a new process instead.

(fn &optional ARG)" t)
(autoload 'projectile-run-vterm "projectile" "\
Invoke `vterm' in the project's root.

Switch to the project specific term buffer if it already exists.

Use a prefix argument ARG to indicate creation of a new process instead.

(fn &optional ARG)" t)
(autoload 'projectile-run-vterm-other-window "projectile" "\
Invoke `vterm' in the project's root.

Switch to the project specific term buffer if it already exists.

Use a prefix argument ARG to indicate creation of a new process instead.

(fn &optional ARG)" t)
(autoload 'projectile-replace "projectile" "\
Replace literal string in project using non-regexp `tags-query-replace'.

With a prefix argument ARG prompts you for a directory and file name patterns
on which to run the replacement.

(fn &optional ARG)" t)
(autoload 'projectile-replace-regexp "projectile" "\
Replace a regexp in the project using `tags-query-replace'.

With a prefix argument ARG prompts you for a directory on which
to run the replacement.

(fn &optional ARG)" t)
(autoload 'projectile-kill-buffers "projectile" "\
Kill project buffers.

The buffer are killed according to the value of
`projectile-kill-buffers-filter'." t)
(autoload 'projectile-save-project-buffers "projectile" "\
Save all project buffers." t)
(autoload 'projectile-dired "projectile" "\
Open `dired' at the root of the project." t)
(autoload 'projectile-dired-other-window "projectile" "\
Open `dired'  at the root of the project in another window." t)
(autoload 'projectile-dired-other-frame "projectile" "\
Open `dired' at the root of the project in another frame." t)
(autoload 'projectile-vc "projectile" "\
Open `vc-dir' at the root of the project.

For git projects `magit-status-internal' is used if available.
For hg projects `monky-status' is used if available.

If PROJECT-ROOT is given, it is opened instead of the project
root directory of the current buffer file.  If interactively
called with a prefix argument, the user is prompted for a project
directory to open.

(fn &optional PROJECT-ROOT)" t)
(autoload 'projectile-recentf "projectile" "\
Show a list of recently visited files in a project." t)
(autoload 'projectile-configure-project "projectile" "\
Run project configure command.

Normally you'll be prompted for a compilation command, unless
variable `compilation-read-command'.  You can force the prompt
with a prefix ARG.

(fn ARG)" t)
(autoload 'projectile-compile-project "projectile" "\
Run project compilation command.

Normally you'll be prompted for a compilation command, unless
variable `compilation-read-command'.  You can force the prompt
with a prefix ARG.  Per project default command can be set through
`projectile-project-compilation-cmd'.

(fn ARG)" t)
(autoload 'projectile-test-project "projectile" "\
Run project test command.

Normally you'll be prompted for a compilation command, unless
variable `compilation-read-command'.  You can force the prompt
with a prefix ARG.

(fn ARG)" t)
(autoload 'projectile-install-project "projectile" "\
Run project install command.

Normally you'll be prompted for a compilation command, unless
variable `compilation-read-command'.  You can force the prompt
with a prefix ARG.

(fn ARG)" t)
(autoload 'projectile-package-project "projectile" "\
Run project package command.

Normally you'll be prompted for a compilation command, unless
variable `compilation-read-command'.  You can force the prompt
with a prefix ARG.

(fn ARG)" t)
(autoload 'projectile-run-project "projectile" "\
Run project run command.

Normally you'll be prompted for a compilation command, unless
variable `compilation-read-command'.  You can force the prompt
with a prefix ARG.

(fn ARG)" t)
(autoload 'projectile-repeat-last-command "projectile" "\
Run last projectile external command.

External commands are: `projectile-configure-project',
`projectile-compile-project', `projectile-test-project',
`projectile-install-project', `projectile-package-project',
and `projectile-run-project'.

If the prefix argument SHOW-PROMPT is non nil, the command can be edited.

(fn SHOW-PROMPT)" t)
(autoload 'projectile-switch-project "projectile" "\
Switch to a project we have visited before.
Invokes the command referenced by `projectile-switch-project-action' on switch.
With a prefix ARG invokes `projectile-commander' instead of
`projectile-switch-project-action.'

(fn &optional ARG)" t)
(autoload 'projectile-switch-open-project "projectile" "\
Switch to a project we have currently opened.
Invokes the command referenced by `projectile-switch-project-action' on switch.
With a prefix ARG invokes `projectile-commander' instead of
`projectile-switch-project-action.'

(fn &optional ARG)" t)
(autoload 'projectile-find-file-in-directory "projectile" "\
Jump to a file in a (maybe regular) DIRECTORY.

This command will first prompt for the directory the file is in.

(fn &optional DIRECTORY)" t)
(autoload 'projectile-find-file-in-known-projects "projectile" "\
Jump to a file in any of the known projects." t)
(autoload 'projectile-cleanup-known-projects "projectile" "\
Remove known projects that don't exist anymore." t)
(autoload 'projectile-clear-known-projects "projectile" "\
Clear both `projectile-known-projects' and `projectile-known-projects-file'." t)
(autoload 'projectile-reset-known-projects "projectile" "\
Clear known projects and rediscover." t)
(autoload 'projectile-remove-known-project "projectile" "\
Remove PROJECT from the list of known projects.

(fn &optional PROJECT)" t)
(autoload 'projectile-remove-current-project-from-known-projects "projectile" "\
Remove the current project from the list of known projects." t)
(autoload 'projectile-add-known-project "projectile" "\
Add PROJECT-ROOT to the list of known projects.

(fn PROJECT-ROOT)" t)
(autoload 'projectile-ibuffer "projectile" "\
Open an IBuffer window showing all buffers in the current project.

Let user choose another project when PROMPT-FOR-PROJECT is supplied.

(fn PROMPT-FOR-PROJECT)" t)
(autoload 'projectile-commander "projectile" "\
Execute a Projectile command with a single letter.
The user is prompted for a single character indicating the action to invoke.
The `?' character describes then
available actions.

See `def-projectile-commander-method' for defining new methods." t)
(autoload 'projectile-browse-dirty-projects "projectile" "\
Browse dirty version controlled projects.

With a prefix argument, or if CACHED is non-nil, try to use the cached
dirty project list.

(fn &optional CACHED)" t)
(autoload 'projectile-edit-dir-locals "projectile" "\
Edit or create a .dir-locals.el file of the project." t)
(defvar projectile-mode nil "\
Non-nil if Projectile mode is enabled.
See the `projectile-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `projectile-mode'.")
(custom-autoload 'projectile-mode "projectile" nil)
(autoload 'projectile-mode "projectile" "\
Minor mode to assist project management and navigation.

When called interactively, toggle `projectile-mode'.  With prefix
ARG, enable `projectile-mode' if ARG is positive, otherwise disable
it.

When called from Lisp, enable `projectile-mode' if ARG is omitted,
nil or positive.  If ARG is `toggle', toggle `projectile-mode'.
Otherwise behave as if called interactively.

\\{projectile-mode-map}

(fn &optional ARG)" t)
(define-obsolete-function-alias 'projectile-global-mode 'projectile-mode "1.0")
(register-definition-prefixes "projectile" '("??" "compilation-find-file-projectile-find-compilation-buffer" "def-projectile-commander-method" "delete-file-projectile-remove-from-cache" "project" "savehist-additional-variables"))


(provide 'projectile-autoloads)


)
(let ((load-true-file-name "/home/cam/.emacs.d/elpa/professional-theme-20150315.1100/professional-theme-autoloads.el")(load-file-name "/home/cam/.emacs.d/elpa/professional-theme-20150315.1100/professional-theme-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/home/cam/.emacs.d/elpa/professional-theme-20150315.1100/professional-theme-autoloads.el") (car load-path))))



(when load-file-name (add-to-list 'custom-theme-load-path (file-name-as-directory (file-name-directory load-file-name))))

(autoload 'professional-theme "professional-theme" "\
Apply the professional-theme." t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "professional-theme" '("professional")))




)
(let ((load-true-file-name "/home/cam/.emacs.d/elpa/popup-0.5.9/popup-autoloads.el")(load-file-name "/home/cam/.emacs.d/elpa/popup-0.5.9/popup-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/home/cam/.emacs.d/elpa/popup-0.5.9/popup-autoloads.el") (car load-path))))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "popup" '("popup-")))




)
(let ((load-true-file-name "/home/cam/.emacs.d/elpa/pomodoro-20210225.2018/pomodoro-autoloads.el")(load-file-name "/home/cam/.emacs.d/elpa/pomodoro-20210225.2018/pomodoro-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/home/cam/.emacs.d/elpa/pomodoro-20210225.2018/pomodoro-autoloads.el") (car load-path))))



(autoload 'pomodoro-start "pomodoro" "\


\(fn ARG)" t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "pomodoro" '("play-pomodoro-" "pomodoro-")))




)
(let ((load-true-file-name "/home/cam/.emacs.d/elpa/planet-theme-20161031.217/planet-theme-autoloads.el")(load-file-name "/home/cam/.emacs.d/elpa/planet-theme-20161031.217/planet-theme-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/home/cam/.emacs.d/elpa/planet-theme-20161031.217/planet-theme-autoloads.el") (car load-path))))



(when (and (boundp 'custom-theme-load-path) load-file-name) (add-to-list 'custom-theme-load-path (file-name-as-directory (file-name-directory load-file-name))))

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "planet-theme" '("planet")))




)
(let ((load-true-file-name "/home/cam/.emacs.d/elpa/epl-0.9/epl-autoloads.el")(load-file-name "/home/cam/.emacs.d/elpa/epl-0.9/epl-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/home/cam/.emacs.d/elpa/epl-0.9/epl-autoloads.el") (car load-path))))



(register-definition-prefixes "epl" '("epl-"))




)
(let ((load-true-file-name "/home/cam/.emacs.d/elpa/pkg-info-0.6/pkg-info-autoloads.el")(load-file-name "/home/cam/.emacs.d/elpa/pkg-info-0.6/pkg-info-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/home/cam/.emacs.d/elpa/pkg-info-0.6/pkg-info-autoloads.el") (car load-path))))



(autoload 'pkg-info-library-original-version "pkg-info" "\
Get the original version in the header of LIBRARY.

The original version is stored in the X-Original-Version header.
This header is added by the MELPA package archive to preserve
upstream version numbers.

LIBRARY is either a symbol denoting a named feature, or a library
name as string.

If SHOW is non-nil, show the version in the minibuffer.

Return the version from the header of LIBRARY as list.  Signal an
error if the LIBRARY was not found or had no X-Original-Version
header.

See Info node `(elisp)Library Headers' for more information
about library headers.

\(fn LIBRARY &optional SHOW)" t nil)

(autoload 'pkg-info-library-version "pkg-info" "\
Get the version in the header of LIBRARY.

LIBRARY is either a symbol denoting a named feature, or a library
name as string.

If SHOW is non-nil, show the version in the minibuffer.

Return the version from the header of LIBRARY as list.  Signal an
error if the LIBRARY was not found or had no proper header.

See Info node `(elisp)Library Headers' for more information
about library headers.

\(fn LIBRARY &optional SHOW)" t nil)

(autoload 'pkg-info-defining-library-original-version "pkg-info" "\
Get the original version of the library defining FUNCTION.

The original version is stored in the X-Original-Version header.
This header is added by the MELPA package archive to preserve
upstream version numbers.

If SHOW is non-nil, show the version in mini-buffer.

This function is mainly intended to find the version of a major
or minor mode, i.e.

   (pkg-info-defining-library-version 'flycheck-mode)

Return the version of the library defining FUNCTION.  Signal an
error if FUNCTION is not a valid function, if its defining
library was not found, or if the library had no proper version
header.

\(fn FUNCTION &optional SHOW)" t nil)

(autoload 'pkg-info-defining-library-version "pkg-info" "\
Get the version of the library defining FUNCTION.

If SHOW is non-nil, show the version in mini-buffer.

This function is mainly intended to find the version of a major
or minor mode, i.e.

   (pkg-info-defining-library-version 'flycheck-mode)

Return the version of the library defining FUNCTION.  Signal an
error if FUNCTION is not a valid function, if its defining
library was not found, or if the library had no proper version
header.

\(fn FUNCTION &optional SHOW)" t nil)

(autoload 'pkg-info-package-version "pkg-info" "\
Get the version of an installed PACKAGE.

If SHOW is non-nil, show the version in the minibuffer.

Return the version as list, or nil if PACKAGE is not installed.

\(fn PACKAGE &optional SHOW)" t nil)

(autoload 'pkg-info-version-info "pkg-info" "\
Obtain complete version info for LIBRARY and PACKAGE.

LIBRARY is a symbol denoting a named feature, or a library name
as string.  PACKAGE is a symbol denoting an ELPA package.  If
omitted or nil, default to LIBRARY.

If SHOW is non-nil, show the version in the minibuffer.

When called interactively, prompt for LIBRARY.  When called
interactively with prefix argument, prompt for PACKAGE as well.

Return a string with complete version information for LIBRARY.
This version information contains the version from the headers of
LIBRARY, and the version of the installed PACKAGE, the LIBRARY is
part of.  If PACKAGE is not installed, or if the PACKAGE version
is the same as the LIBRARY version, do not include a package
version.

\(fn LIBRARY &optional PACKAGE SHOW)" t nil)

(register-definition-prefixes "pkg-info" '("pkg-info-"))




)
(let ((load-true-file-name "/home/cam/.emacs.d/elpa/pinyinlib-0.1.1/pinyinlib-autoloads.el")(load-file-name "/home/cam/.emacs.d/elpa/pinyinlib-0.1.1/pinyinlib-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/home/cam/.emacs.d/elpa/pinyinlib-0.1.1/pinyinlib-autoloads.el") (car load-path))))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "pinyinlib" '("pinyinlib-")))




)
(let ((load-true-file-name "/home/cam/.emacs.d/elpa/phoenix-dark-pink-theme-20190821.48/phoenix-dark-pink-theme-autoloads.el")(load-file-name "/home/cam/.emacs.d/elpa/phoenix-dark-pink-theme-20190821.48/phoenix-dark-pink-theme-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/home/cam/.emacs.d/elpa/phoenix-dark-pink-theme-20190821.48/phoenix-dark-pink-theme-autoloads.el") (car load-path))))



(when load-file-name (add-to-list 'custom-theme-load-path (file-name-as-directory (file-name-directory load-file-name))))

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "phoenix-dark-pink-theme" '("define-phoenix-dark-pink-theme")))




)
(let ((load-true-file-name "/home/cam/.emacs.d/elpa/phoenix-dark-mono-theme-20170729.1406/phoenix-dark-mono-theme-autoloads.el")(load-file-name "/home/cam/.emacs.d/elpa/phoenix-dark-mono-theme-20170729.1406/phoenix-dark-mono-theme-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/home/cam/.emacs.d/elpa/phoenix-dark-mono-theme-20170729.1406/phoenix-dark-mono-theme-autoloads.el") (car load-path))))



(when load-file-name (add-to-list 'custom-theme-load-path (file-name-as-directory (file-name-directory load-file-name))))

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "phoenix-dark-mono-theme" '("phoenix-dark-mono")))




)
(let ((load-true-file-name "/home/cam/.emacs.d/elpa/pdf-tools-20230611.239/pdf-tools-autoloads.el")(load-file-name "/home/cam/.emacs.d/elpa/pdf-tools-20230611.239/pdf-tools-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/home/cam/.emacs.d/elpa/pdf-tools-20230611.239/pdf-tools-autoloads.el") (car load-path))))



(autoload 'pdf-annot-minor-mode "pdf-annot" "\
Support for PDF Annotations.

This is a minor mode.  If called interactively, toggle the
`Pdf-Annot minor mode' mode.  If the prefix argument is positive,
enable the mode, and if it is zero or negative, disable the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable
the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `pdf-annot-minor-mode'.

The mode's hook is called both when the mode is enabled and when
it is disabled.

\\{pdf-annot-minor-mode-map}

\(fn &optional ARG)" t nil)

(register-definition-prefixes "pdf-annot" '("pdf-annot-"))



(register-definition-prefixes "pdf-cache" '("boundingbox" "define-pdf-cache-function" "page" "pdf-cache-" "textregions"))



(register-definition-prefixes "pdf-dev" '("pdf-dev-"))



(autoload 'pdf-history-minor-mode "pdf-history" "\
Keep a history of previously visited pages.

This is a minor mode.  If called interactively, toggle the
`Pdf-History minor mode' mode.  If the prefix argument is
positive, enable the mode, and if it is zero or negative, disable
the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable
the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `pdf-history-minor-mode'.

The mode's hook is called both when the mode is enabled and when
it is disabled.

This is a simple stack-based history.  Turning the page or
following a link pushes the left-behind page on the stack, which
may be navigated with the following keys.

\\{pdf-history-minor-mode-map}

\(fn &optional ARG)" t nil)

(register-definition-prefixes "pdf-history" '("pdf-history-"))



(register-definition-prefixes "pdf-info" '("pdf-info-"))



(autoload 'pdf-isearch-minor-mode "pdf-isearch" "\
Isearch mode for PDF buffer.

This is a minor mode.  If called interactively, toggle the
`Pdf-Isearch minor mode' mode.  If the prefix argument is
positive, enable the mode, and if it is zero or negative, disable
the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable
the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `pdf-isearch-minor-mode'.

The mode's hook is called both when the mode is enabled and when
it is disabled.

When this mode is enabled \\[isearch-forward], among other keys,
starts an incremental search in this PDF document.  Since this mode
uses external programs to highlight found matches via
image-processing, proceeding to the next match may be slow.

Therefore two isearch behaviours have been defined: Normal isearch and
batch mode.  The later one is a minor mode
\(`pdf-isearch-batch-mode'), which when activated inhibits isearch
from stopping at and highlighting every single match, but rather
display them batch-wise.  Here a batch means a number of matches
currently visible in the selected window.

The kind of highlighting is determined by three faces
`pdf-isearch-match' (for the current match), `pdf-isearch-lazy'
\(for all other matches) and `pdf-isearch-batch' (when in batch
mode), which see.

Colors may also be influenced by the minor-mode
`pdf-view-dark-minor-mode'.  If this is minor mode enabled, each face's
dark colors, are used (see e.g. `frame-background-mode'), instead
of the light ones.

\\{pdf-isearch-minor-mode-map}
While in `isearch-mode' the following keys are available. Note
that not every isearch command work as expected.

\\{pdf-isearch-active-mode-map}

\(fn &optional ARG)" t nil)

(register-definition-prefixes "pdf-isearch" '("pdf-isearch-"))



(autoload 'pdf-links-minor-mode "pdf-links" "\
Handle links in PDF documents.\\<pdf-links-minor-mode-map>

This is a minor mode.  If called interactively, toggle the
`Pdf-Links minor mode' mode.  If the prefix argument is positive,
enable the mode, and if it is zero or negative, disable the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable
the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `pdf-links-minor-mode'.

The mode's hook is called both when the mode is enabled and when
it is disabled.

If this mode is enabled, most links in the document may be
activated by clicking on them or by pressing \\[pdf-links-action-perform] and selecting
one of the displayed keys, or by using isearch limited to
links via \\[pdf-links-isearch-link].

\\{pdf-links-minor-mode-map}

\(fn &optional ARG)" t nil)

(autoload 'pdf-links-action-perform "pdf-links" "\
Follow LINK, depending on its type.

This may turn to another page, switch to another PDF buffer or
invoke `pdf-links-browse-uri-function'.

Interactively, link is read via `pdf-links-read-link-action'.
This function displays characters around the links in the current
page and starts reading characters (ignoring case).  After a
sufficient number of characters have been read, the corresponding
link's link is invoked.  Additionally, SPC may be used to
scroll the current page.

\(fn LINK)" t nil)

(register-definition-prefixes "pdf-links" '("pdf-links-"))



(autoload 'pdf-loader-install "pdf-loader" "\
Prepare Emacs for using PDF Tools.

This function acts as a replacement for `pdf-tools-install' and
makes Emacs load and use PDF Tools as soon as a PDF file is
opened, but not sooner.

The arguments are passed verbatim to `pdf-tools-install', which
see.

\(fn &optional NO-QUERY-P SKIP-DEPENDENCIES-P NO-ERROR-P FORCE-DEPENDENCIES-P)" nil nil)

(register-definition-prefixes "pdf-loader" '("pdf-loader--"))



(register-definition-prefixes "pdf-macs" '("pdf-view-"))



(autoload 'pdf-misc-minor-mode "pdf-misc" "\
FIXME:  Not documented.

This is a minor mode.  If called interactively, toggle the
`Pdf-Misc minor mode' mode.  If the prefix argument is positive,
enable the mode, and if it is zero or negative, disable the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable
the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `pdf-misc-minor-mode'.

The mode's hook is called both when the mode is enabled and when
it is disabled.

\(fn &optional ARG)" t nil)

(autoload 'pdf-misc-size-indication-minor-mode "pdf-misc" "\
Provide a working size indication in the mode-line.

This is a minor mode.  If called interactively, toggle the
`Pdf-Misc-Size-Indication minor mode' mode.  If the prefix
argument is positive, enable the mode, and if it is zero or
negative, disable the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable
the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `pdf-misc-size-indication-minor-mode'.

The mode's hook is called both when the mode is enabled and when
it is disabled.

\(fn &optional ARG)" t nil)

(autoload 'pdf-misc-menu-bar-minor-mode "pdf-misc" "\
Display a PDF Tools menu in the menu-bar.

This is a minor mode.  If called interactively, toggle the
`Pdf-Misc-Menu-Bar minor mode' mode.  If the prefix argument is
positive, enable the mode, and if it is zero or negative, disable
the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable
the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `pdf-misc-menu-bar-minor-mode'.

The mode's hook is called both when the mode is enabled and when
it is disabled.

\(fn &optional ARG)" t nil)

(autoload 'pdf-misc-context-menu-minor-mode "pdf-misc" "\
Provide a right-click context menu in PDF buffers.

This is a minor mode.  If called interactively, toggle the
`Pdf-Misc-Context-Menu minor mode' mode.  If the prefix argument
is positive, enable the mode, and if it is zero or negative,
disable the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable
the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `pdf-misc-context-menu-minor-mode'.

The mode's hook is called both when the mode is enabled and when
it is disabled.

\\{pdf-misc-context-menu-minor-mode-map}

\(fn &optional ARG)" t nil)

(register-definition-prefixes "pdf-misc" '("pdf-misc-"))



(autoload 'pdf-occur "pdf-occur" "\
List lines matching STRING or PCRE.

Interactively search for a regexp. Unless a prefix arg was given,
in which case this functions performs a string search.

If `pdf-occur-prefer-string-search' is non-nil, the meaning of
the prefix-arg is inverted.

\(fn STRING &optional REGEXP-P)" t nil)

(autoload 'pdf-occur-multi-command "pdf-occur" "\
Perform `pdf-occur' on multiple buffer.

For a programmatic search of multiple documents see
`pdf-occur-search'." t nil)

(defvar pdf-occur-global-minor-mode nil "\
Non-nil if Pdf-Occur-Global minor mode is enabled.
See the `pdf-occur-global-minor-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `pdf-occur-global-minor-mode'.")

(custom-autoload 'pdf-occur-global-minor-mode "pdf-occur" nil)

(autoload 'pdf-occur-global-minor-mode "pdf-occur" "\
Enable integration of Pdf Occur with other modes.

This is a minor mode.  If called interactively, toggle the
`Pdf-Occur-Global minor mode' mode.  If the prefix argument is
positive, enable the mode, and if it is zero or negative, disable
the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable
the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `(default-value \\='pdf-occur-global-minor-mode)'.

The mode's hook is called both when the mode is enabled and when
it is disabled.

This global minor mode enables (or disables)
`pdf-occur-ibuffer-minor-mode' and `pdf-occur-dired-minor-mode'
in all current and future ibuffer/dired buffer.

\(fn &optional ARG)" t nil)

(autoload 'pdf-occur-ibuffer-minor-mode "pdf-occur" "\
Hack into ibuffer's do-occur binding.

This is a minor mode.  If called interactively, toggle the
`Pdf-Occur-Ibuffer minor mode' mode.  If the prefix argument is
positive, enable the mode, and if it is zero or negative, disable
the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable
the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `pdf-occur-ibuffer-minor-mode'.

The mode's hook is called both when the mode is enabled and when
it is disabled.

This mode remaps `ibuffer-do-occur' to
`pdf-occur-ibuffer-do-occur', which will start the PDF Tools
version of `occur', if all marked buffer's are in `pdf-view-mode'
and otherwise fallback to `ibuffer-do-occur'.

\(fn &optional ARG)" t nil)

(autoload 'pdf-occur-dired-minor-mode "pdf-occur" "\
Hack into dired's `dired-do-search' binding.

This is a minor mode.  If called interactively, toggle the
`Pdf-Occur-Dired minor mode' mode.  If the prefix argument is
positive, enable the mode, and if it is zero or negative, disable
the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable
the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `pdf-occur-dired-minor-mode'.

The mode's hook is called both when the mode is enabled and when
it is disabled.

This mode remaps `dired-do-search' to
`pdf-occur-dired-do-search', which will start the PDF Tools
version of `occur', if all marked buffer's are in `pdf-view-mode'
and otherwise fallback to `dired-do-search'.

\(fn &optional ARG)" t nil)

(register-definition-prefixes "pdf-occur" '("pdf-occur-"))



(autoload 'pdf-outline-minor-mode "pdf-outline" "\
Display an outline of a PDF document.

This is a minor mode.  If called interactively, toggle the
`Pdf-Outline minor mode' mode.  If the prefix argument is
positive, enable the mode, and if it is zero or negative, disable
the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable
the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `pdf-outline-minor-mode'.

The mode's hook is called both when the mode is enabled and when
it is disabled.

This provides a PDF's outline on the menu bar via imenu.
Additionally the same outline may be viewed in a designated
buffer.

\\{pdf-outline-minor-mode-map}

\(fn &optional ARG)" t nil)

(autoload 'pdf-outline "pdf-outline" "\
Display an PDF outline of BUFFER.

BUFFER defaults to the current buffer.  Select the outline
buffer, unless NO-SELECT-WINDOW-P is non-nil.

\(fn &optional BUFFER NO-SELECT-WINDOW-P)" t nil)

(autoload 'pdf-outline-imenu-enable "pdf-outline" "\
Enable imenu in the current PDF buffer." t nil)

(register-definition-prefixes "pdf-outline" '("pdf-outline"))



(autoload 'pdf-sync-minor-mode "pdf-sync" "\
Correlate a PDF position with the TeX file.
\\<pdf-sync-minor-mode-map>
This works via SyncTeX, which means the TeX sources need to have
been compiled with `--synctex=1'.  In AUCTeX this can be done by
setting `TeX-source-correlate-method' to `synctex' (before AUCTeX
is loaded) and enabling `TeX-source-correlate-mode'.

This is a minor mode.  If called interactively, toggle the
`Pdf-Sync minor mode' mode.  If the prefix argument is positive,
enable the mode, and if it is zero or negative, disable the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable
the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `pdf-sync-minor-mode'.

The mode's hook is called both when the mode is enabled and when
it is disabled.

Then \\[pdf-sync-backward-search-mouse] in the PDF buffer will
open the corresponding TeX location.

If AUCTeX is your preferred tex-mode, this library arranges to
bind `pdf-sync-forward-display-pdf-key' (the default is `C-c C-g')
to `pdf-sync-forward-search' in `TeX-source-correlate-map'.  This
function displays the PDF page corresponding to the current
position in the TeX buffer.  This function only works together
with AUCTeX.

\(fn &optional ARG)" t nil)

(register-definition-prefixes "pdf-sync" '("pdf-sync-"))



(defvar pdf-tools-handle-upgrades t "\
Whether PDF Tools should handle upgrading itself.")

(custom-autoload 'pdf-tools-handle-upgrades "pdf-tools" t)

(autoload 'pdf-tools-install "pdf-tools" "\
Install PDF-Tools in all current and future PDF buffers.

If the `pdf-info-epdfinfo-program' is not running or does not
appear to be working, attempt to rebuild it.  If this build
succeeded, continue with the activation of the package.
Otherwise fail silently, i.e. no error is signaled.

Build the program (if necessary) without asking first, if
NO-QUERY-P is non-nil.

Don't attempt to install system packages, if SKIP-DEPENDENCIES-P
is non-nil.

Do not signal an error in case the build failed, if NO-ERROR-P is
non-nil.

Attempt to install system packages (even if it is deemed
unnecessary), if FORCE-DEPENDENCIES-P is non-nil.

Note that SKIP-DEPENDENCIES-P and FORCE-DEPENDENCIES-P are
mutually exclusive.

Note further, that you can influence the installation directory
by setting `pdf-info-epdfinfo-program' to an appropriate
value (e.g. ~/bin/epdfinfo) before calling this function.

See `pdf-view-mode' and `pdf-tools-enabled-modes'.

\(fn &optional NO-QUERY-P SKIP-DEPENDENCIES-P NO-ERROR-P FORCE-DEPENDENCIES-P)" t nil)

(autoload 'pdf-tools-enable-minor-modes "pdf-tools" "\
Enable MODES in the current buffer.

MODES defaults to `pdf-tools-enabled-modes'.

\(fn &optional MODES)" t nil)

(autoload 'pdf-tools-help "pdf-tools" "\
Show a Help buffer for `pdf-tools'." t nil)

(register-definition-prefixes "pdf-tools" '("pdf-tools-"))



(register-definition-prefixes "pdf-util" '("display-buffer-split-below-and-attach" "pdf-util-"))



(autoload 'pdf-view-bookmark-jump-handler "pdf-view" "\
The bookmark handler-function interface for bookmark BMK.

See also `pdf-view-bookmark-make-record'.

\(fn BMK)" nil nil)

(register-definition-prefixes "pdf-view" '("cua-copy-region--pdf-view-advice" "pdf-view-"))



(autoload 'pdf-virtual-edit-mode "pdf-virtual" "\
Major mode when editing a virtual PDF buffer.

\(fn)" t nil)

(autoload 'pdf-virtual-view-mode "pdf-virtual" "\
Major mode in virtual PDF buffers.

\(fn)" t nil)

(defvar pdf-virtual-global-minor-mode nil "\
Non-nil if Pdf-Virtual-Global minor mode is enabled.
See the `pdf-virtual-global-minor-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `pdf-virtual-global-minor-mode'.")

(custom-autoload 'pdf-virtual-global-minor-mode "pdf-virtual" nil)

(autoload 'pdf-virtual-global-minor-mode "pdf-virtual" "\
Enable recognition and handling of VPDF files.

This is a minor mode.  If called interactively, toggle the
`Pdf-Virtual-Global minor mode' mode.  If the prefix argument is
positive, enable the mode, and if it is zero or negative, disable
the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable
the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `(default-value \\='pdf-virtual-global-minor-mode)'.

The mode's hook is called both when the mode is enabled and when
it is disabled.

\(fn &optional ARG)" t nil)

(autoload 'pdf-virtual-buffer-create "pdf-virtual" "\


\(fn &optional FILENAMES BUFFER-NAME DISPLAY-P)" t nil)

(register-definition-prefixes "pdf-virtual" '("pdf-virtual-"))




)
(let ((load-true-file-name "/home/cam/.emacs.d/elpa/paredit-26/paredit-autoloads.el")(load-file-name "/home/cam/.emacs.d/elpa/paredit-26/paredit-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/home/cam/.emacs.d/elpa/paredit-26/paredit-autoloads.el") (car load-path))))



(autoload 'paredit-mode "paredit" "\
Minor mode for pseudo-structurally editing Lisp code.
With a prefix argument, enable Paredit Mode even if there are
  unbalanced parentheses in the buffer.
Paredit behaves badly if parentheses are unbalanced, so exercise
  caution when forcing Paredit Mode to be enabled, and consider
  fixing unbalanced parentheses instead.
\\<paredit-mode-map>

If called interactively, enable Paredit mode if ARG is positive,
and disable it if ARG is zero or negative.  If called from Lisp,
also enable the mode if ARG is omitted or nil, and toggle it if
ARG is `toggle'; disable the mode otherwise.

\(fn &optional ARG)" t nil)

(autoload 'enable-paredit-mode "paredit" "\
Turn on pseudo-structural editing of Lisp code." t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "paredit" '("?\\" "disable-paredit-mode" "paredit-")))




)
(let ((load-true-file-name "/home/cam/.emacs.d/elpa/organic-green-theme-20231225.149/organic-green-theme-autoloads.el")(load-file-name "/home/cam/.emacs.d/elpa/organic-green-theme-20231225.149/organic-green-theme-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/home/cam/.emacs.d/elpa/organic-green-theme-20231225.149/organic-green-theme-autoloads.el") (car load-path))))



(when (and (boundp 'custom-theme-load-path) load-file-name) (add-to-list 'custom-theme-load-path (file-name-as-directory (file-name-directory load-file-name))))

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "organic-green-theme" '("organic-green")))




)
(let ((load-true-file-name "/home/cam/.emacs.d/elpa/htmlize-20210825.2150/htmlize-autoloads.el")(load-file-name "/home/cam/.emacs.d/elpa/htmlize-20210825.2150/htmlize-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/home/cam/.emacs.d/elpa/htmlize-20210825.2150/htmlize-autoloads.el") (car load-path))))



(autoload 'htmlize-buffer "htmlize" "\
Convert BUFFER to HTML, preserving colors and decorations.

The generated HTML is available in a new buffer, which is returned.
When invoked interactively, the new buffer is selected in the current
window.  The title of the generated document will be set to the buffer's
file name or, if that's not available, to the buffer's name.

Note that htmlize doesn't fontify your buffers, it only uses the
decorations that are already present.  If you don't set up font-lock or
something else to fontify your buffers, the resulting HTML will be
plain.  Likewise, if you don't like the choice of colors, fix the mode
that created them, or simply alter the faces it uses.

\(fn &optional BUFFER)" t nil)

(autoload 'htmlize-region "htmlize" "\
Convert the region to HTML, preserving colors and decorations.
See `htmlize-buffer' for details.

\(fn BEG END)" t nil)

(autoload 'htmlize-file "htmlize" "\
Load FILE, fontify it, convert it to HTML, and save the result.

Contents of FILE are inserted into a temporary buffer, whose major mode
is set with `normal-mode' as appropriate for the file type.  The buffer
is subsequently fontified with `font-lock' and converted to HTML.  Note
that, unlike `htmlize-buffer', this function explicitly turns on
font-lock.  If a form of highlighting other than font-lock is desired,
please use `htmlize-buffer' directly on buffers so highlighted.

Buffers currently visiting FILE are unaffected by this function.  The
function does not change current buffer or move the point.

If TARGET is specified and names a directory, the resulting file will be
saved there instead of to FILE's directory.  If TARGET is specified and
does not name a directory, it will be used as output file name.

\(fn FILE &optional TARGET)" t nil)

(autoload 'htmlize-many-files "htmlize" "\
Convert FILES to HTML and save the corresponding HTML versions.

FILES should be a list of file names to convert.  This function calls
`htmlize-file' on each file; see that function for details.  When
invoked interactively, you are prompted for a list of files to convert,
terminated with RET.

If TARGET-DIRECTORY is specified, the HTML files will be saved to that
directory.  Normally, each HTML file is saved to the directory of the
corresponding source file.

\(fn FILES &optional TARGET-DIRECTORY)" t nil)

(autoload 'htmlize-many-files-dired "htmlize" "\
HTMLize dired-marked files.

\(fn ARG &optional TARGET-DIRECTORY)" t nil)

(register-definition-prefixes "htmlize" '("htmlize-"))




)
(let ((load-true-file-name "/home/cam/.emacs.d/elpa/org-re-reveal-3.25.1/org-re-reveal-autoloads.el")(load-file-name "/home/cam/.emacs.d/elpa/org-re-reveal-3.25.1/org-re-reveal-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/home/cam/.emacs.d/elpa/org-re-reveal-3.25.1/org-re-reveal-autoloads.el") (car load-path))))



(autoload 'org-re-reveal-publish-to-reveal "org-re-reveal" "\
Publish an Org file to HTML.
FILENAME is the filename of the Org file to be published.  PLIST
is the property list for the given project.  PUB-DIR is the
publishing directory.  Optional BACKEND may specify a derived export
backend.
Return output file name.

\(fn PLIST FILENAME PUB-DIR &optional BACKEND)" nil nil)

(autoload 'org-re-reveal-publish-to-reveal-client "org-re-reveal" "\
Publish an Org file to HTML as multiplex client.
FILENAME is the filename of the Org file to be published.  PLIST
is the property list for the given project.  PUB-DIR is the
publishing directory.  Optional BACKEND may specify a derived export
backend.
If `org-re-reveal-client-multiplex-filter' is non-nil, use it as regular
expression to only publish FILENAME if it matches this regular expression.
Return output file name.

\(fn PLIST FILENAME PUB-DIR &optional BACKEND)" nil nil)

(autoload 'org-re-reveal-version "org-re-reveal" "\
Display version string for org-re-reveal from Lisp file." t nil)

(register-definition-prefixes "org-re-reveal" '("org-re-reveal-"))




)
(let ((load-true-file-name "/home/cam/.emacs.d/elpa/omtose-phellack-theme-20161111.2120/omtose-phellack-theme-autoloads.el")(load-file-name "/home/cam/.emacs.d/elpa/omtose-phellack-theme-20161111.2120/omtose-phellack-theme-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/home/cam/.emacs.d/elpa/omtose-phellack-theme-20161111.2120/omtose-phellack-theme-autoloads.el") (car load-path))))



(when (and (boundp 'custom-theme-load-path) load-file-name) (add-to-list 'custom-theme-load-path (file-name-as-directory (file-name-directory load-file-name))))

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "omtose-darker-theme" '("omtose-darker")))



(when (and (boundp 'custom-theme-load-path) load-file-name) (add-to-list 'custom-theme-load-path (file-name-as-directory (file-name-directory load-file-name))))

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "omtose-softer-theme" '("omtose-softer")))




)
(let ((load-true-file-name "/home/cam/.emacs.d/elpa/oldlace-theme-20150705.1300/oldlace-theme-autoloads.el")(load-file-name "/home/cam/.emacs.d/elpa/oldlace-theme-20150705.1300/oldlace-theme-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/home/cam/.emacs.d/elpa/oldlace-theme-20150705.1300/oldlace-theme-autoloads.el") (car load-path))))



(when load-file-name (add-to-list 'custom-theme-load-path (file-name-as-directory (file-name-directory load-file-name))))




)
(let ((load-true-file-name "/home/cam/.emacs.d/elpa/occidental-theme-20130312.1958/occidental-theme-autoloads.el")(load-file-name "/home/cam/.emacs.d/elpa/occidental-theme-20130312.1958/occidental-theme-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/home/cam/.emacs.d/elpa/occidental-theme-20130312.1958/occidental-theme-autoloads.el") (car load-path))))



(when (and (boundp 'custom-theme-load-path) load-file-name) (add-to-list 'custom-theme-load-path (file-name-as-directory (file-name-directory load-file-name))))

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "occidental-theme" '("occidental")))




)
(let ((load-true-file-name "/home/cam/.emacs.d/elpa/obsidian-theme-20170719.948/obsidian-theme-autoloads.el")(load-file-name "/home/cam/.emacs.d/elpa/obsidian-theme-20170719.948/obsidian-theme-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/home/cam/.emacs.d/elpa/obsidian-theme-20170719.948/obsidian-theme-autoloads.el") (car load-path))))



(when load-file-name (add-to-list 'custom-theme-load-path (file-name-as-directory (file-name-directory load-file-name))))




)
(let ((load-true-file-name "/home/cam/.emacs.d/elpa/ob-sagemath-20191106.828/ob-sagemath-autoloads.el")(load-file-name "/home/cam/.emacs.d/elpa/ob-sagemath-20191106.828/ob-sagemath-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/home/cam/.emacs.d/elpa/ob-sagemath-20191106.828/ob-sagemath-autoloads.el") (car load-path))))



(autoload 'ob-sagemath-execute-async "ob-sagemath" "\
Execute current src code block. With prefix argument, evaluate all code in a
buffer.

\(fn ARG)" t nil)

(autoload 'org-babel-execute:sage "ob-sagemath" "\


\(fn BODY PARAMS)" nil nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "ob-sagemath" '("ob-sagemath-" "org-babel-header-args:sage")))




)
(let ((load-true-file-name "/home/cam/.emacs.d/elpa/f-0.20.0/f-autoloads.el")(load-file-name "/home/cam/.emacs.d/elpa/f-0.20.0/f-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/home/cam/.emacs.d/elpa/f-0.20.0/f-autoloads.el") (car load-path))))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "f" '("f-")))




)
(let ((load-true-file-name "/home/cam/.emacs.d/elpa/dash-functional-2.19.1/dash-functional-autoloads.el")(load-file-name "/home/cam/.emacs.d/elpa/dash-functional-2.19.1/dash-functional-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/home/cam/.emacs.d/elpa/dash-functional-2.19.1/dash-functional-autoloads.el") (car load-path))))


)
(let ((load-true-file-name "/home/cam/.emacs.d/elpa/nvm-0.3.0/nvm-autoloads.el")(load-file-name "/home/cam/.emacs.d/elpa/nvm-0.3.0/nvm-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/home/cam/.emacs.d/elpa/nvm-0.3.0/nvm-autoloads.el") (car load-path))))



(autoload 'nvm-use "nvm" "\
Activate Node VERSION.

If CALLBACK is specified, active in that scope and then reset to
previously used version.

\(fn VERSION &optional CALLBACK)" nil nil)

(autoload 'nvm-use-for "nvm" "\
Activate Node for PATH or `default-directory'.

This function will look for a .nvmrc file in that path and
activate the version specified in that file.

If CALLBACK is specified, active in that scope and then reset to
previously used version.

\(fn &optional PATH CALLBACK)" nil nil)

(autoload 'nvm-use-for-buffer "nvm" "\
Activate Node based on an .nvmrc for the current file.
If buffer is not visiting a file, do nothing." nil nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "nvm" '("nvm-")))




)
(let ((load-true-file-name "/home/cam/.emacs.d/elpa/kv-20140108.1534/kv-autoloads.el")(load-file-name "/home/cam/.emacs.d/elpa/kv-20140108.1534/kv-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/home/cam/.emacs.d/elpa/kv-20140108.1534/kv-autoloads.el") (car load-path))))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "kv" '("dotass" "keyword->symbol" "map-bind")))




)
(let ((load-true-file-name "/home/cam/.emacs.d/elpa/esxml-20230308.2254/esxml-autoloads.el")(load-file-name "/home/cam/.emacs.d/elpa/esxml-20230308.2254/esxml-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/home/cam/.emacs.d/elpa/esxml-20230308.2254/esxml-autoloads.el") (car load-path))))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "esxml" '("attr" "esxml-" "pp-esxml-to-xml" "string-trim-whitespace" "sxml-to-" "xml-to-esxml")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "esxml-query" '("esxml-")))




)
(let ((load-true-file-name "/home/cam/.emacs.d/elpa/nov-20230715.1434/nov-autoloads.el")(load-file-name "/home/cam/.emacs.d/elpa/nov-20230715.1434/nov-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/home/cam/.emacs.d/elpa/nov-20230715.1434/nov-autoloads.el") (car load-path))))



(autoload 'nov-mode "nov" "\
Major mode for reading EPUB documents

\(fn)" t nil)

(autoload 'nov-bookmark-jump-handler "nov" "\
The bookmark handler-function interface for bookmark BMK.

See also `nov-bookmark-make-record'.

\(fn BMK)" nil nil)

(register-definition-prefixes "nov" '("nov-"))




)
(let ((load-true-file-name "/home/cam/.emacs.d/elpa/nord-theme-20230311.1131/nord-theme-autoloads.el")(load-file-name "/home/cam/.emacs.d/elpa/nord-theme-20230311.1131/nord-theme-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/home/cam/.emacs.d/elpa/nord-theme-20230311.1131/nord-theme-autoloads.el") (car load-path))))



(when (and (boundp 'custom-theme-load-path) load-file-name) (add-to-list 'custom-theme-load-path (file-name-as-directory (file-name-directory load-file-name))))

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "nord-theme" '("nord")))




)
(let ((load-true-file-name "/home/cam/.emacs.d/elpa/noctilux-theme-20161113.1442/noctilux-theme-autoloads.el")(load-file-name "/home/cam/.emacs.d/elpa/noctilux-theme-20161113.1442/noctilux-theme-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/home/cam/.emacs.d/elpa/noctilux-theme-20161113.1442/noctilux-theme-autoloads.el") (car load-path))))



(and load-file-name (boundp 'custom-theme-load-path) (add-to-list 'custom-theme-load-path (file-name-as-directory (file-name-directory load-file-name))))

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "noctilux-theme" '("create-noctilux-theme" "noct")))




)
(let ((load-true-file-name "/home/cam/.emacs.d/elpa/neotree-0.6.0/neotree-autoloads.el")(load-file-name "/home/cam/.emacs.d/elpa/neotree-0.6.0/neotree-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/home/cam/.emacs.d/elpa/neotree-0.6.0/neotree-autoloads.el") (car load-path))))



(autoload 'neotree-find "neotree" "\
Quick select node which specified PATH in NeoTree.
If path is nil and no buffer file name, then use DEFAULT-PATH,

\(fn &optional PATH DEFAULT-PATH)" t nil)

(autoload 'neotree-projectile-action "neotree" "\
Integration with `Projectile'.

Usage:
    (setq projectile-switch-project-action 'neotree-projectile-action).

When running `projectile-switch-project' (C-c p p), `neotree' will change root
automatically." t nil)

(autoload 'neotree-toggle "neotree" "\
Toggle show the NeoTree window." t nil)

(autoload 'neotree-show "neotree" "\
Show the NeoTree window." t nil)

(autoload 'neotree-hide "neotree" "\
Close the NeoTree window." t nil)

(autoload 'neotree-dir "neotree" "\
Show the NeoTree window, and change root to PATH.

\(fn PATH)" t nil)

(defalias 'neotree 'neotree-show "\
Show the NeoTree window.")

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "neotree" '("neo" "off-p")))




)
(let ((load-true-file-name "/home/cam/.emacs.d/elpa/native-complete-20231218.316/native-complete-autoloads.el")(load-file-name "/home/cam/.emacs.d/elpa/native-complete-20231218.316/native-complete-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/home/cam/.emacs.d/elpa/native-complete-20231218.316/native-complete-autoloads.el") (car load-path))))



(autoload 'native-complete-setup-bash "native-complete" "\
Setup support for native-complete enabled bash shells.
This involves not sending the `--noediting' argument as well as
setting `TERM' to a value other then dumb." t nil)

(autoload 'native-complete-at-point "native-complete" "\
Get the candidates from the underlying shell.
This should behave the same as sending TAB in an terminal
emulator." nil nil)

(autoload 'native-complete-check-config "native-complete" nil t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "native-complete" '("native-complete-")))




)
(let ((load-true-file-name "/home/cam/.emacs.d/elpa/naquadah-theme-20190225.1427/naquadah-theme-autoloads.el")(load-file-name "/home/cam/.emacs.d/elpa/naquadah-theme-20190225.1427/naquadah-theme-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/home/cam/.emacs.d/elpa/naquadah-theme-20190225.1427/naquadah-theme-autoloads.el") (car load-path))))



(when (and (boundp 'custom-theme-load-path) load-file-name) (add-to-list 'custom-theme-load-path (file-name-as-directory (file-name-directory load-file-name))))

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "naquadah-theme" '("naquadah")))




)
(let ((load-true-file-name "/home/cam/.emacs.d/elpa/mustang-theme-20170719.946/mustang-theme-autoloads.el")(load-file-name "/home/cam/.emacs.d/elpa/mustang-theme-20170719.946/mustang-theme-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/home/cam/.emacs.d/elpa/mustang-theme-20170719.946/mustang-theme-autoloads.el") (car load-path))))



(when load-file-name (add-to-list 'custom-theme-load-path (file-name-as-directory (file-name-directory load-file-name))))




)
(let ((load-true-file-name "/home/cam/.emacs.d/elpa/monokai-theme-20220117.1244/monokai-theme-autoloads.el")(load-file-name "/home/cam/.emacs.d/elpa/monokai-theme-20220117.1244/monokai-theme-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/home/cam/.emacs.d/elpa/monokai-theme-20220117.1244/monokai-theme-autoloads.el") (car load-path))))



(when (and (boundp 'custom-theme-load-path) load-file-name) (add-to-list 'custom-theme-load-path (file-name-as-directory (file-name-directory load-file-name))))

(register-definition-prefixes "monokai-theme" '("monokai"))




)
(let ((load-true-file-name "/home/cam/.emacs.d/elpa/monochrome-theme-20140326.1050/monochrome-theme-autoloads.el")(load-file-name "/home/cam/.emacs.d/elpa/monochrome-theme-20140326.1050/monochrome-theme-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/home/cam/.emacs.d/elpa/monochrome-theme-20140326.1050/monochrome-theme-autoloads.el") (car load-path))))



(when (and (boundp 'custom-theme-load-path) load-file-name) (add-to-list 'custom-theme-load-path (file-name-as-directory (file-name-directory load-file-name))))

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "monochrome-bright-theme" '("monochrome-bright")))



(when (and (boundp 'custom-theme-load-path) load-file-name) (add-to-list 'custom-theme-load-path (file-name-as-directory (file-name-directory load-file-name))))

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "monochrome-theme" '("monochrome")))




)
(let ((load-true-file-name "/home/cam/.emacs.d/elpa/molokai-theme-20220106.1520/molokai-theme-autoloads.el")(load-file-name "/home/cam/.emacs.d/elpa/molokai-theme-20220106.1520/molokai-theme-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/home/cam/.emacs.d/elpa/molokai-theme-20220106.1520/molokai-theme-autoloads.el") (car load-path))))



(when load-file-name (add-to-list 'custom-theme-load-path (file-name-as-directory (file-name-directory load-file-name))))

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "molokai-theme" '("molokai")))




)
(let ((load-true-file-name "/home/cam/.emacs.d/elpa/moe-theme-20231006.639/moe-theme-autoloads.el")(load-file-name "/home/cam/.emacs.d/elpa/moe-theme-20231006.639/moe-theme-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/home/cam/.emacs.d/elpa/moe-theme-20231006.639/moe-theme-autoloads.el") (car load-path))))



(register-definition-prefixes "moe-dark-theme" '("moe-dark"))



(register-definition-prefixes "moe-light-theme" '("moe-light"))



(when (and (boundp 'custom-theme-load-path) load-file-name) (add-to-list 'custom-theme-load-path (file-name-as-directory (file-name-directory load-file-name))))

(register-definition-prefixes "moe-theme" '("moe-"))



(register-definition-prefixes "moe-theme-flavours" '("moe-theme-"))



(register-definition-prefixes "moe-theme-switcher" '("convert-time-format-of-sunrise-and-sunset" "get-sunrise-sunset-string" "moe-" "switch-"))




)
(let ((load-true-file-name "/home/cam/.emacs.d/elpa/modus-themes-20240103.755/modus-themes-autoloads.el")(load-file-name "/home/cam/.emacs.d/elpa/modus-themes-20240103.755/modus-themes-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/home/cam/.emacs.d/elpa/modus-themes-20240103.755/modus-themes-autoloads.el") (car load-path))))



(autoload 'modus-themes-contrast "modus-themes" "\
Measure WCAG contrast ratio between C1 and C2.
C1 and C2 are color values written in hexadecimal RGB.

\(fn C1 C2)" nil nil)

(autoload 'modus-themes-select "modus-themes" "\
Load a Modus THEME using minibuffer completion.
Run `modus-themes-after-load-theme-hook' after loading the theme.
Disable other themes per `modus-themes-disable-other-themes'.

\(fn THEME)" t nil)

(autoload 'modus-themes-toggle "modus-themes" "\
Toggle between the two `modus-themes-to-toggle'.
If `modus-themes-to-toggle' does not specify two Modus themes,
prompt with completion for a theme among our collection (this is
practically the same as the `modus-themes-select' command).

Run `modus-themes-after-load-theme-hook' after loading the theme.
Disable other themes per `modus-themes-disable-other-themes'." t nil)

(autoload 'modus-themes-theme "modus-themes" "\
Bind NAME's color PALETTE around face specs and variables.
Face specifications are passed to `custom-theme-set-faces'.
While variables are handled by `custom-theme-set-variables'.
Those are stored in `modus-themes-faces' and
`modus-themes-custom-variables' respectively.

Optional OVERRIDES are appended to PALETTE, overriding
corresponding entries.

\(fn NAME PALETTE &optional OVERRIDES)" nil t)

(function-put 'modus-themes-theme 'lisp-indent-function '0)

(when load-file-name (let ((dir (file-name-directory load-file-name))) (unless (equal dir (expand-file-name "themes/" data-directory)) (add-to-list 'custom-theme-load-path dir))))

(register-definition-prefixes "modus-themes" '("modus-themes-"))




)
(let ((load-true-file-name "/home/cam/.emacs.d/elpa/minimal-theme-20190113.2132/minimal-theme-autoloads.el")(load-file-name "/home/cam/.emacs.d/elpa/minimal-theme-20190113.2132/minimal-theme-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/home/cam/.emacs.d/elpa/minimal-theme-20190113.2132/minimal-theme-autoloads.el") (car load-path))))



(when (and (boundp 'custom-theme-load-path) load-file-name) (add-to-list 'custom-theme-load-path (file-name-as-directory (file-name-directory load-file-name))))

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "minimal-black-theme" '("minimal-black")))



(when (and (boundp 'custom-theme-load-path) load-file-name) (add-to-list 'custom-theme-load-path (file-name-as-directory (file-name-directory load-file-name))))

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "minimal-light-theme" '("minimal-light")))



(when (and (boundp 'custom-theme-load-path) load-file-name) (add-to-list 'custom-theme-load-path (file-name-as-directory (file-name-directory load-file-name))))

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "minimal-theme" '("minimal")))




)
(let ((load-true-file-name "/home/cam/.emacs.d/elpa/material-theme-20210904.1226/material-theme-autoloads.el")(load-file-name "/home/cam/.emacs.d/elpa/material-theme-20210904.1226/material-theme-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/home/cam/.emacs.d/elpa/material-theme-20210904.1226/material-theme-autoloads.el") (car load-path))))



(when (and (boundp 'custom-theme-load-path) load-file-name) (add-to-list 'custom-theme-load-path (file-name-as-directory (file-name-directory load-file-name))))

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "material-light-theme" '("material-light")))



(when (and (boundp 'custom-theme-load-path) load-file-name) (add-to-list 'custom-theme-load-path (file-name-as-directory (file-name-directory load-file-name))))

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "material-theme" '("material")))




)
(let ((load-true-file-name "/home/cam/.emacs.d/elpa/markdown-mode-2.6/markdown-mode-autoloads.el")(load-file-name "/home/cam/.emacs.d/elpa/markdown-mode-2.6/markdown-mode-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/home/cam/.emacs.d/elpa/markdown-mode-2.6/markdown-mode-autoloads.el") (car load-path))))



(autoload 'markdown-mode "markdown-mode" "\
Major mode for editing Markdown files.

\(fn)" t nil)

(add-to-list 'auto-mode-alist '("\\.\\(?:md\\|markdown\\|mkd\\|mdown\\|mkdn\\|mdwn\\)\\'" . markdown-mode))

(autoload 'gfm-mode "markdown-mode" "\
Major mode for editing GitHub Flavored Markdown files.

\(fn)" t nil)

(autoload 'markdown-view-mode "markdown-mode" "\
Major mode for viewing Markdown content.

\(fn)" t nil)

(autoload 'gfm-view-mode "markdown-mode" "\
Major mode for viewing GitHub Flavored Markdown content.

\(fn)" t nil)

(autoload 'markdown-live-preview-mode "markdown-mode" "\
Toggle native previewing on save for a specific markdown file.

If called interactively, enable Markdown-Live-Preview mode if ARG
is positive, and disable it if ARG is zero or negative.  If
called from Lisp, also enable the mode if ARG is omitted or nil,
and toggle it if ARG is `toggle'; disable the mode otherwise.

\(fn &optional ARG)" t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "markdown-mode" '("defun-markdown-" "gfm-" "markdown")))




)
(let ((load-true-file-name "/home/cam/.emacs.d/elpa/marginalia-1.6/marginalia-autoloads.el")(load-file-name "/home/cam/.emacs.d/elpa/marginalia-1.6/marginalia-autoloads.el"))



(add-to-list 'load-path (or (and load-file-name (directory-file-name (file-name-directory load-file-name))) (car load-path)))




(defvar marginalia-mode nil "\
Non-nil if Marginalia mode is enabled.
See the `marginalia-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `marginalia-mode'.")
(custom-autoload 'marginalia-mode "marginalia" nil)
(autoload 'marginalia-mode "marginalia" "\
Annotate completion candidates with richer information.

This is a global minor mode.  If called interactively, toggle the
`Marginalia mode' mode.  If the prefix argument is positive,
enable the mode, and if it is zero or negative, disable the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable
the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `(default-value \\='marginalia-mode)'.

The mode's hook is called both when the mode is enabled and when
it is disabled.

(fn &optional ARG)" t)
(autoload 'marginalia-cycle "marginalia" "\
Cycle between annotators in `marginalia-annotator-registry'." t)
(register-definition-prefixes "marginalia" '("marginalia-"))


(provide 'marginalia-autoloads)


)
(let ((load-true-file-name "/home/cam/.emacs.d/elpa/majapahit-themes-20221207.121/majapahit-themes-autoloads.el")(load-file-name "/home/cam/.emacs.d/elpa/majapahit-themes-20221207.121/majapahit-themes-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/home/cam/.emacs.d/elpa/majapahit-themes-20221207.121/majapahit-themes-autoloads.el") (car load-path))))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "majapahit-dark-theme" '("majapahit-dark")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "majapahit-light-theme" '("majapahit-light")))



(when load-file-name (add-to-list 'custom-theme-load-path (file-name-as-directory (file-name-directory load-file-name))))

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "majapahit-themes" '("create-majapahit-theme" "majapahit-theme-")))




)
(let ((load-true-file-name "/home/cam/.emacs.d/elpa/magit-section-3.3.0/magit-section-autoloads.el")(load-file-name "/home/cam/.emacs.d/elpa/magit-section-3.3.0/magit-section-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/home/cam/.emacs.d/elpa/magit-section-3.3.0/magit-section-autoloads.el") (car load-path))))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "magit-section" '("isearch-clean-overlays@magit-mode" "magit-")))




)
(let ((load-true-file-name "/home/cam/.emacs.d/elpa/git-commit-3.3.0/git-commit-autoloads.el")(load-file-name "/home/cam/.emacs.d/elpa/git-commit-3.3.0/git-commit-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/home/cam/.emacs.d/elpa/git-commit-3.3.0/git-commit-autoloads.el") (car load-path))))


(put 'git-commit-major-mode 'safe-local-variable
    (lambda (val)
      (memq val '(text-mode
                  markdown-mode
                  org-mode
                  fundamental-mode
                  git-commit-elisp-text-mode))))

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "git-commit" '("git-commit-" "global-git-commit-mode")))




)
(let ((load-true-file-name "/home/cam/.emacs.d/elpa/magit-3.3.0/magit-autoloads.el")(load-file-name "/home/cam/.emacs.d/elpa/magit-3.3.0/magit-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/home/cam/.emacs.d/elpa/magit-3.3.0/magit-autoloads.el") (car load-path))))



(autoload 'git-rebase-current-line "git-rebase" "\
Parse current line into a `git-rebase-action' instance.
If the current line isn't recognized as a rebase line, an
instance with all nil values is returned." nil nil)

(autoload 'git-rebase-mode "git-rebase" "\
Major mode for editing of a Git rebase file.

Rebase files are generated when you run 'git rebase -i' or run
`magit-interactive-rebase'.  They describe how Git should perform
the rebase.  See the documentation for git-rebase (e.g., by
running 'man git-rebase' at the command line) for details.

\(fn)" t nil)

(defconst git-rebase-filename-regexp "/git-rebase-todo\\'")

(add-to-list 'auto-mode-alist (cons git-rebase-filename-regexp 'git-rebase-mode))

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "git-rebase" '("git-rebase-")))



(define-obsolete-variable-alias 'global-magit-file-mode 'magit-define-global-key-bindings "Magit 3.0.0")

(defvar magit-define-global-key-bindings t "\
Whether to bind some Magit commands in the global keymap.

If this variable is non-nil, then the following bindings may
be added to the global keymap.  The default is t.

key             binding
---             -------
C-x g           magit-status
C-x M-g         magit-dispatch
C-c M-g         magit-file-dispatch

These bindings may be added when `after-init-hook' is run.
Each binding is added if and only if at that time no other key
is bound to the same command and no other command is bound to
the same key.  In other words we try to avoid adding bindings
that are unnecessary, as well as bindings that conflict with
other bindings.

Adding the above bindings is delayed until `after-init-hook'
is called to allow users to set the variable anywhere in their
init file (without having to make sure to do so before `magit'
is loaded or autoloaded) and to increase the likelihood that
all the potentially conflicting user bindings have already
been added.

To set this variable use either `setq' or the Custom interface.
Do not use the function `customize-set-variable' because doing
that would cause Magit to be loaded immediately when that form
is evaluated (this differs from `custom-set-variables', which
doesn't load the libraries that define the customized variables).

Setting this variable to nil has no effect if that is done after
the key bindings have already been added.

We recommend that you bind \"C-c g\" instead of \"C-c M-g\" to
`magit-file-dispatch'.  The former is a much better binding
but the \"C-c <letter>\" namespace is strictly reserved for
users; preventing Magit from using it by default.

Also see info node `(magit)Commands for Buffers Visiting Files'.")

(custom-autoload 'magit-define-global-key-bindings "magit" t)

(defun magit-maybe-define-global-key-bindings nil (when magit-define-global-key-bindings (let ((map (current-global-map))) (dolist (elt '(("C-x g" . magit-status) ("C-x M-g" . magit-dispatch) ("C-c M-g" . magit-file-dispatch))) (let ((key (kbd (car elt))) (def (cdr elt))) (unless (or (lookup-key map key) (where-is-internal def (make-sparse-keymap) t)) (define-key map key def)))))))

(if after-init-time (magit-maybe-define-global-key-bindings) (add-hook 'after-init-hook 'magit-maybe-define-global-key-bindings t))
 (autoload 'magit-dispatch "magit" nil t)
 (autoload 'magit-run "magit" nil t)

(autoload 'magit-git-command "magit" "\
Execute COMMAND asynchronously; display output.

Interactively, prompt for COMMAND in the minibuffer. \"git \" is
used as initial input, but can be deleted to run another command.

With a prefix argument COMMAND is run in the top-level directory
of the current working tree, otherwise in `default-directory'.

\(fn COMMAND)" t nil)

(autoload 'magit-git-command-topdir "magit" "\
Execute COMMAND asynchronously; display output.

Interactively, prompt for COMMAND in the minibuffer. \"git \" is
used as initial input, but can be deleted to run another command.

COMMAND is run in the top-level directory of the current
working tree.

\(fn COMMAND)" t nil)

(autoload 'magit-shell-command "magit" "\
Execute COMMAND asynchronously; display output.

Interactively, prompt for COMMAND in the minibuffer.  With a
prefix argument COMMAND is run in the top-level directory of
the current working tree, otherwise in `default-directory'.

\(fn COMMAND)" t nil)

(autoload 'magit-shell-command-topdir "magit" "\
Execute COMMAND asynchronously; display output.

Interactively, prompt for COMMAND in the minibuffer.  COMMAND
is run in the top-level directory of the current working tree.

\(fn COMMAND)" t nil)

(autoload 'magit-version "magit" "\
Return the version of Magit currently in use.
If optional argument PRINT-DEST is non-nil, output
stream (interactively, the echo area, or the current buffer with
a prefix argument), also print the used versions of Magit, Git,
and Emacs to it.

\(fn &optional PRINT-DEST)" t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "magit" '("magit-")))



(autoload 'magit-stage-file "magit-apply" "\
Stage all changes to FILE.
With a prefix argument or when there is no file at point ask for
the file to be staged.  Otherwise stage the file at point without
requiring confirmation.

\(fn FILE)" t nil)

(autoload 'magit-stage-modified "magit-apply" "\
Stage all changes to files modified in the worktree.
Stage all new content of tracked files and remove tracked files
that no longer exist in the working tree from the index also.
With a prefix argument also stage previously untracked (but not
ignored) files.

\(fn &optional ALL)" t nil)

(autoload 'magit-unstage-file "magit-apply" "\
Unstage all changes to FILE.
With a prefix argument or when there is no file at point ask for
the file to be unstaged.  Otherwise unstage the file at point
without requiring confirmation.

\(fn FILE)" t nil)

(autoload 'magit-unstage-all "magit-apply" "\
Remove all changes from the staging area." t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "magit-apply" '("magit-")))



(put 'magit-auto-revert-mode 'globalized-minor-mode t)

(defvar magit-auto-revert-mode (not (or global-auto-revert-mode noninteractive)) "\
Non-nil if Magit-Auto-Revert mode is enabled.
See the `magit-auto-revert-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `magit-auto-revert-mode'.")

(custom-autoload 'magit-auto-revert-mode "magit-autorevert" nil)

(autoload 'magit-auto-revert-mode "magit-autorevert" "\
Toggle Auto-Revert mode in all buffers.
With prefix ARG, enable Magit-Auto-Revert mode if ARG is positive;
otherwise, disable it.  If called from Lisp, enable the mode if
ARG is omitted or nil.

Auto-Revert mode is enabled in all buffers where
`magit-turn-on-auto-revert-mode-if-desired' would do it.
See `auto-revert-mode' for more information on Auto-Revert mode.

\(fn &optional ARG)" t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "magit-autorevert" '("auto-revert-buffer" "magit-")))


 (autoload 'magit-bisect "magit-bisect" nil t)

(autoload 'magit-bisect-start "magit-bisect" "\
Start a bisect session.

Bisecting a bug means to find the commit that introduced it.
This command starts such a bisect session by asking for a known
good and a known bad commit.  To move the session forward use the
other actions from the bisect transient command (\\<magit-status-mode-map>\\[magit-bisect]).

\(fn BAD GOOD ARGS)" t nil)

(autoload 'magit-bisect-reset "magit-bisect" "\
After bisecting, cleanup bisection state and return to original `HEAD'." t nil)

(autoload 'magit-bisect-good "magit-bisect" "\
While bisecting, mark the current commit as good.
Use this after you have asserted that the commit does not contain
the bug in question." t nil)

(autoload 'magit-bisect-bad "magit-bisect" "\
While bisecting, mark the current commit as bad.
Use this after you have asserted that the commit does contain the
bug in question." t nil)

(autoload 'magit-bisect-mark "magit-bisect" "\
While bisecting, mark the current commit with a bisect term.
During a bisect using alternate terms, commits can still be
marked with `magit-bisect-good' and `magit-bisect-bad', as those
commands map to the correct term (\"good\" to --term-old's value
and \"bad\" to --term-new's).  However, in some cases, it can be
difficult to keep that mapping straight in your head; this
command provides an interface that exposes the underlying terms." t nil)

(autoload 'magit-bisect-skip "magit-bisect" "\
While bisecting, skip the current commit.
Use this if for some reason the current commit is not a good one
to test.  This command lets Git choose a different one." t nil)

(autoload 'magit-bisect-run "magit-bisect" "\
Bisect automatically by running commands after each step.

Unlike `git bisect run' this can be used before bisecting has
begun.  In that case it behaves like `git bisect start; git
bisect run'.

\(fn CMDLINE &optional BAD GOOD ARGS)" t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "magit-bisect" '("magit-")))


 (autoload 'magit-blame-echo "magit-blame" nil t)
 (autoload 'magit-blame-addition "magit-blame" nil t)
 (autoload 'magit-blame-removal "magit-blame" nil t)
 (autoload 'magit-blame-reverse "magit-blame" nil t)
 (autoload 'magit-blame "magit-blame" nil t)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "magit-blame" '("magit-")))



(autoload 'magit--handle-bookmark "magit-bookmark" "\
Open a bookmark created by `magit--make-bookmark'.
Call the `magit-*-setup-buffer' function of the the major-mode
with the variables' values as arguments, which were recorded by
`magit--make-bookmark'.  Ignore `magit-display-buffer-function'.

\(fn BOOKMARK)" nil nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "magit-bookmark" '("magit--make-bookmark")))


 (autoload 'magit-branch "magit" nil t)

(autoload 'magit-checkout "magit-branch" "\
Checkout REVISION, updating the index and the working tree.
If REVISION is a local branch, then that becomes the current
branch.  If it is something else, then `HEAD' becomes detached.
Checkout fails if the working tree or the staging area contain
changes.

\(git checkout REVISION).

\(fn REVISION &optional ARGS)" t nil)

(autoload 'magit-branch-create "magit-branch" "\
Create BRANCH at branch or revision START-POINT.

\(fn BRANCH START-POINT)" t nil)

(autoload 'magit-branch-and-checkout "magit-branch" "\
Create and checkout BRANCH at branch or revision START-POINT.

\(fn BRANCH START-POINT &optional ARGS)" t nil)

(autoload 'magit-branch-or-checkout "magit-branch" "\
Hybrid between `magit-checkout' and `magit-branch-and-checkout'.

Ask the user for an existing branch or revision.  If the user
input actually can be resolved as a branch or revision, then
check that out, just like `magit-checkout' would.

Otherwise create and checkout a new branch using the input as
its name.  Before doing so read the starting-point for the new
branch.  This is similar to what `magit-branch-and-checkout'
does.

\(fn ARG &optional START-POINT)" t nil)

(autoload 'magit-branch-checkout "magit-branch" "\
Checkout an existing or new local branch.

Read a branch name from the user offering all local branches and
a subset of remote branches as candidates.  Omit remote branches
for which a local branch by the same name exists from the list
of candidates.  The user can also enter a completely new branch
name.

- If the user selects an existing local branch, then check that
  out.

- If the user selects a remote branch, then create and checkout
  a new local branch with the same name.  Configure the selected
  remote branch as push target.

- If the user enters a new branch name, then create and check
  that out, after also reading the starting-point from the user.

In the latter two cases the upstream is also set.  Whether it is
set to the chosen START-POINT or something else depends on the
value of `magit-branch-adjust-remote-upstream-alist', just like
when using `magit-branch-and-checkout'.

\(fn BRANCH &optional START-POINT)" t nil)

(autoload 'magit-branch-orphan "magit-branch" "\
Create and checkout an orphan BRANCH with contents from revision START-POINT.

\(fn BRANCH START-POINT)" t nil)

(autoload 'magit-branch-spinout "magit-branch" "\
Create new branch from the unpushed commits.
Like `magit-branch-spinoff' but remain on the current branch.
If there are any uncommitted changes, then behave exactly like
`magit-branch-spinoff'.

\(fn BRANCH &optional FROM)" t nil)

(autoload 'magit-branch-spinoff "magit-branch" "\
Create new branch from the unpushed commits.

Create and checkout a new branch starting at and tracking the
current branch.  That branch in turn is reset to the last commit
it shares with its upstream.  If the current branch has no
upstream or no unpushed commits, then the new branch is created
anyway and the previously current branch is not touched.

This is useful to create a feature branch after work has already
began on the old branch (likely but not necessarily \"master\").

If the current branch is a member of the value of option
`magit-branch-prefer-remote-upstream' (which see), then the
current branch will be used as the starting point as usual, but
the upstream of the starting-point may be used as the upstream
of the new branch, instead of the starting-point itself.

If optional FROM is non-nil, then the source branch is reset
to `FROM~', instead of to the last commit it shares with its
upstream.  Interactively, FROM is only ever non-nil, if the
region selects some commits, and among those commits, FROM is
the commit that is the fewest commits ahead of the source
branch.

The commit at the other end of the selection actually does not
matter, all commits between FROM and `HEAD' are moved to the new
branch.  If FROM is not reachable from `HEAD' or is reachable
from the source branch's upstream, then an error is raised.

\(fn BRANCH &optional FROM)" t nil)

(autoload 'magit-branch-reset "magit-branch" "\
Reset a branch to the tip of another branch or any other commit.

When the branch being reset is the current branch, then do a
hard reset.  If there are any uncommitted changes, then the user
has to confirm the reset because those changes would be lost.

This is useful when you have started work on a feature branch but
realize it's all crap and want to start over.

When resetting to another branch and a prefix argument is used,
then also set the target branch as the upstream of the branch
that is being reset.

\(fn BRANCH TO &optional SET-UPSTREAM)" t nil)

(autoload 'magit-branch-delete "magit-branch" "\
Delete one or multiple branches.
If the region marks multiple branches, then offer to delete
those, otherwise prompt for a single branch to be deleted,
defaulting to the branch at point.

\(fn BRANCHES &optional FORCE)" t nil)

(autoload 'magit-branch-rename "magit-branch" "\
Rename the branch named OLD to NEW.

With a prefix argument FORCE, rename even if a branch named NEW
already exists.

If `branch.OLD.pushRemote' is set, then unset it.  Depending on
the value of `magit-branch-rename-push-target' (which see) maybe
set `branch.NEW.pushRemote' and maybe rename the push-target on
the remote.

\(fn OLD NEW &optional FORCE)" t nil)

(autoload 'magit-branch-shelve "magit-branch" "\
Shelve a BRANCH.
Rename \"refs/heads/BRANCH\" to \"refs/shelved/BRANCH\",
and also rename the respective reflog file.

\(fn BRANCH)" t nil)

(autoload 'magit-branch-unshelve "magit-branch" "\
Unshelve a BRANCH
Rename \"refs/shelved/BRANCH\" to \"refs/heads/BRANCH\",
and also rename the respective reflog file.

\(fn BRANCH)" t nil)
 (autoload 'magit-branch-configure "magit-branch" nil t)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "magit-branch" '("magit-")))


 (autoload 'magit-bundle "magit-bundle" nil t)
 (autoload 'magit-bundle-import "magit-bundle" nil t)

(autoload 'magit-bundle-create-tracked "magit-bundle" "\
Create and track a new bundle.

\(fn FILE TAG BRANCH REFS ARGS)" t nil)

(autoload 'magit-bundle-update-tracked "magit-bundle" "\
Update a bundle that is being tracked using TAG.

\(fn TAG)" t nil)

(autoload 'magit-bundle-verify "magit-bundle" "\
Check whether FILE is valid and applies to the current repository.

\(fn FILE)" t nil)

(autoload 'magit-bundle-list-heads "magit-bundle" "\
List the refs in FILE.

\(fn FILE)" t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "magit-bundle" '("magit-")))


 (autoload 'magit-clone "magit-clone" nil t)

(autoload 'magit-clone-regular "magit-clone" "\
Create a clone of REPOSITORY in DIRECTORY.
Then show the status buffer for the new repository.

\(fn REPOSITORY DIRECTORY ARGS)" t nil)

(autoload 'magit-clone-shallow "magit-clone" "\
Create a shallow clone of REPOSITORY in DIRECTORY.
Then show the status buffer for the new repository.
With a prefix argument read the DEPTH of the clone;
otherwise use 1.

\(fn REPOSITORY DIRECTORY ARGS DEPTH)" t nil)

(autoload 'magit-clone-shallow-since "magit-clone" "\
Create a shallow clone of REPOSITORY in DIRECTORY.
Then show the status buffer for the new repository.
Exclude commits before DATE, which is read from the
user.

\(fn REPOSITORY DIRECTORY ARGS DATE)" t nil)

(autoload 'magit-clone-shallow-exclude "magit-clone" "\
Create a shallow clone of REPOSITORY in DIRECTORY.
Then show the status buffer for the new repository.
Exclude commits reachable from EXCLUDE, which is a
branch or tag read from the user.

\(fn REPOSITORY DIRECTORY ARGS EXCLUDE)" t nil)

(autoload 'magit-clone-bare "magit-clone" "\
Create a bare clone of REPOSITORY in DIRECTORY.
Then show the status buffer for the new repository.

\(fn REPOSITORY DIRECTORY ARGS)" t nil)

(autoload 'magit-clone-mirror "magit-clone" "\
Create a mirror of REPOSITORY in DIRECTORY.
Then show the status buffer for the new repository.

\(fn REPOSITORY DIRECTORY ARGS)" t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "magit-clone" '("magit-clone-")))


 (autoload 'magit-commit "magit-commit" nil t)

(autoload 'magit-commit-create "magit-commit" "\
Create a new commit on `HEAD'.
With a prefix argument, amend to the commit at `HEAD' instead.

\(git commit [--amend] ARGS)

\(fn &optional ARGS)" t nil)

(autoload 'magit-commit-amend "magit-commit" "\
Amend the last commit.

\(git commit --amend ARGS)

\(fn &optional ARGS)" t nil)

(autoload 'magit-commit-extend "magit-commit" "\
Amend the last commit, without editing the message.

With a prefix argument keep the committer date, otherwise change
it.  The option `magit-commit-extend-override-date' can be used
to inverse the meaning of the prefix argument.  
\(git commit
--amend --no-edit)

\(fn &optional ARGS OVERRIDE-DATE)" t nil)

(autoload 'magit-commit-reword "magit-commit" "\
Reword the last commit, ignoring staged changes.

With a prefix argument keep the committer date, otherwise change
it.  The option `magit-commit-reword-override-date' can be used
to inverse the meaning of the prefix argument.

Non-interactively respect the optional OVERRIDE-DATE argument
and ignore the option.

\(git commit --amend --only)

\(fn &optional ARGS OVERRIDE-DATE)" t nil)

(autoload 'magit-commit-fixup "magit-commit" "\
Create a fixup commit.

With a prefix argument the target COMMIT has to be confirmed.
Otherwise the commit at point may be used without confirmation
depending on the value of option `magit-commit-squash-confirm'.

\(fn &optional COMMIT ARGS)" t nil)

(autoload 'magit-commit-squash "magit-commit" "\
Create a squash commit, without editing the squash message.

With a prefix argument the target COMMIT has to be confirmed.
Otherwise the commit at point may be used without confirmation
depending on the value of option `magit-commit-squash-confirm'.

If you want to immediately add a message to the squash commit,
then use `magit-commit-augment' instead of this command.

\(fn &optional COMMIT ARGS)" t nil)

(autoload 'magit-commit-augment "magit-commit" "\
Create a squash commit, editing the squash message.

With a prefix argument the target COMMIT has to be confirmed.
Otherwise the commit at point may be used without confirmation
depending on the value of option `magit-commit-squash-confirm'.

\(fn &optional COMMIT ARGS)" t nil)

(autoload 'magit-commit-instant-fixup "magit-commit" "\
Create a fixup commit targeting COMMIT and instantly rebase.

\(fn &optional COMMIT ARGS)" t nil)

(autoload 'magit-commit-instant-squash "magit-commit" "\
Create a squash commit targeting COMMIT and instantly rebase.

\(fn &optional COMMIT ARGS)" t nil)

(autoload 'magit-commit-reshelve "magit-commit" "\
Change the committer date and possibly the author date of `HEAD'.

The current time is used as the initial minibuffer input and the
original author or committer date is available as the previous
history element.

Both the author and the committer dates are changes, unless one
of the following is true, in which case only the committer date
is updated:
- You are not the author of the commit that is being reshelved.
- The command was invoked with a prefix argument.
- Non-interactively if UPDATE-AUTHOR is nil.

\(fn DATE UPDATE-AUTHOR &optional ARGS)" t nil)

(autoload 'magit-commit-absorb-modules "magit-commit" "\
Spread modified modules across recent commits.

\(fn PHASE COMMIT)" t nil)
 (autoload 'magit-commit-absorb "magit-commit" nil t)
 (autoload 'magit-commit-autofixup "magit-commit" nil t)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "magit-commit" '("magit-")))


 (autoload 'magit-diff "magit-diff" nil t)
 (autoload 'magit-diff-refresh "magit-diff" nil t)

(autoload 'magit-diff-dwim "magit-diff" "\
Show changes for the thing at point.

\(fn &optional ARGS FILES)" t nil)

(autoload 'magit-diff-range "magit-diff" "\
Show differences between two commits.

REV-OR-RANGE should be a range or a single revision.  If it is a
revision, then show changes in the working tree relative to that
revision.  If it is a range, but one side is omitted, then show
changes relative to `HEAD'.

If the region is active, use the revisions on the first and last
line of the region as the two sides of the range.  With a prefix
argument, instead of diffing the revisions, choose a revision to
view changes along, starting at the common ancestor of both
revisions (i.e., use a \"...\" range).

\(fn REV-OR-RANGE &optional ARGS FILES)" t nil)

(autoload 'magit-diff-working-tree "magit-diff" "\
Show changes between the current working tree and the `HEAD' commit.
With a prefix argument show changes between the working tree and
a commit read from the minibuffer.

\(fn &optional REV ARGS FILES)" t nil)

(autoload 'magit-diff-staged "magit-diff" "\
Show changes between the index and the `HEAD' commit.
With a prefix argument show changes between the index and
a commit read from the minibuffer.

\(fn &optional REV ARGS FILES)" t nil)

(autoload 'magit-diff-unstaged "magit-diff" "\
Show changes between the working tree and the index.

\(fn &optional ARGS FILES)" t nil)

(autoload 'magit-diff-unmerged "magit-diff" "\
Show changes that are being merged.

\(fn &optional ARGS FILES)" t nil)

(autoload 'magit-diff-while-committing "magit-diff" "\
While committing, show the changes that are about to be committed.
While amending, invoking the command again toggles between
showing just the new changes or all the changes that will
be committed.

\(fn &optional ARGS)" t nil)

(autoload 'magit-diff-buffer-file "magit-diff" "\
Show diff for the blob or file visited in the current buffer.

When the buffer visits a blob, then show the respective commit.
When the buffer visits a file, then show the differenced between
`HEAD' and the working tree.  In both cases limit the diff to
the file or blob." t nil)

(autoload 'magit-diff-paths "magit-diff" "\
Show changes between any two files on disk.

\(fn A B)" t nil)

(autoload 'magit-show-commit "magit-diff" "\
Visit the revision at point in another buffer.
If there is no revision at point or with a prefix argument prompt
for a revision.

\(fn REV &optional ARGS FILES MODULE)" t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "magit-diff" '("magit-")))


 (autoload 'magit-ediff "magit-ediff" nil)

(autoload 'magit-ediff-resolve "magit-ediff" "\
Resolve outstanding conflicts in FILE using Ediff.
FILE has to be relative to the top directory of the repository.

In the rare event that you want to manually resolve all
conflicts, including those already resolved by Git, use
`ediff-merge-revisions-with-ancestor'.

\(fn FILE)" t nil)

(autoload 'magit-ediff-stage "magit-ediff" "\
Stage and unstage changes to FILE using Ediff.
FILE has to be relative to the top directory of the repository.

\(fn FILE)" t nil)

(autoload 'magit-ediff-compare "magit-ediff" "\
Compare REVA:FILEA with REVB:FILEB using Ediff.

FILEA and FILEB have to be relative to the top directory of the
repository.  If REVA or REVB is nil, then this stands for the
working tree state.

If the region is active, use the revisions on the first and last
line of the region.  With a prefix argument, instead of diffing
the revisions, choose a revision to view changes along, starting
at the common ancestor of both revisions (i.e., use a \"...\"
range).

\(fn REVA REVB FILEA FILEB)" t nil)

(autoload 'magit-ediff-dwim "magit-ediff" "\
Compare, stage, or resolve using Ediff.
This command tries to guess what file, and what commit or range
the user wants to compare, stage, or resolve using Ediff.  It
might only be able to guess either the file, or range or commit,
in which case the user is asked about the other.  It might not
always guess right, in which case the appropriate `magit-ediff-*'
command has to be used explicitly.  If it cannot read the user's
mind at all, then it asks the user for a command to run." t nil)

(autoload 'magit-ediff-show-staged "magit-ediff" "\
Show staged changes using Ediff.

This only allows looking at the changes; to stage, unstage,
and discard changes using Ediff, use `magit-ediff-stage'.

FILE must be relative to the top directory of the repository.

\(fn FILE)" t nil)

(autoload 'magit-ediff-show-unstaged "magit-ediff" "\
Show unstaged changes using Ediff.

This only allows looking at the changes; to stage, unstage,
and discard changes using Ediff, use `magit-ediff-stage'.

FILE must be relative to the top directory of the repository.

\(fn FILE)" t nil)

(autoload 'magit-ediff-show-working-tree "magit-ediff" "\
Show changes between `HEAD' and working tree using Ediff.
FILE must be relative to the top directory of the repository.

\(fn FILE)" t nil)

(autoload 'magit-ediff-show-commit "magit-ediff" "\
Show changes introduced by COMMIT using Ediff.

\(fn COMMIT)" t nil)

(autoload 'magit-ediff-show-stash "magit-ediff" "\
Show changes introduced by STASH using Ediff.
`magit-ediff-show-stash-with-index' controls whether a
three-buffer Ediff is used in order to distinguish changes in the
stash that were staged.

\(fn STASH)" t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "magit-ediff" '("magit-ediff-")))



(autoload 'magit-run-git-gui "magit-extras" "\
Run `git gui' for the current git repository." t nil)

(autoload 'magit-run-git-gui-blame "magit-extras" "\
Run `git gui blame' on the given FILENAME and COMMIT.
Interactively run it for the current file and the `HEAD', with a
prefix or when the current file cannot be determined let the user
choose.  When the current buffer is visiting FILENAME instruct
blame to center around the line point is on.

\(fn COMMIT FILENAME &optional LINENUM)" t nil)

(autoload 'magit-run-gitk "magit-extras" "\
Run `gitk' in the current repository." t nil)

(autoload 'magit-run-gitk-branches "magit-extras" "\
Run `gitk --branches' in the current repository." t nil)

(autoload 'magit-run-gitk-all "magit-extras" "\
Run `gitk --all' in the current repository." t nil)

(autoload 'ido-enter-magit-status "magit-extras" "\
Drop into `magit-status' from file switching.

This command does not work in Emacs 26.1.
See https://github.com/magit/magit/issues/3634
and https://debbugs.gnu.org/cgi/bugreport.cgi?bug=31707.

To make this command available use something like:

  (add-hook \\='ido-setup-hook
            (lambda ()
              (define-key ido-completion-map
                (kbd \"C-x g\") \\='ido-enter-magit-status)))

Starting with Emacs 25.1 the Ido keymaps are defined just once
instead of every time Ido is invoked, so now you can modify it
like pretty much every other keymap:

  (define-key ido-common-completion-map
    (kbd \"C-x g\") \\='ido-enter-magit-status)" t nil)

(autoload 'magit-project-status "magit-extras" "\
Run `magit-status' in the current project's root." t nil)

(autoload 'magit-dired-jump "magit-extras" "\
Visit file at point using Dired.
With a prefix argument, visit in another window.  If there
is no file at point, then instead visit `default-directory'.

\(fn &optional OTHER-WINDOW)" t nil)

(autoload 'magit-dired-log "magit-extras" "\
Show log for all marked files, or the current file.

\(fn &optional FOLLOW)" t nil)

(autoload 'magit-dired-am-apply-patches "magit-extras" "\
In Dired, apply the marked (or next ARG) files as patches.
If inside a repository, then apply in that.  Otherwise prompt
for a repository.

\(fn REPO &optional ARG)" t nil)

(autoload 'magit-do-async-shell-command "magit-extras" "\
Open FILE with `dired-do-async-shell-command'.
Interactively, open the file at point.

\(fn FILE)" t nil)

(autoload 'magit-previous-line "magit-extras" "\
Like `previous-line' but with Magit-specific shift-selection.

Magit's selection mechanism is based on the region but selects an
area that is larger than the region.  This causes `previous-line'
when invoked while holding the shift key to move up one line and
thereby select two lines.  When invoked inside a hunk body this
command does not move point on the first invocation and thereby
it only selects a single line.  Which inconsistency you prefer
is a matter of preference.

\(fn &optional ARG TRY-VSCROLL)" t nil)

(function-put 'magit-previous-line 'interactive-only '"use `forward-line' with negative argument instead.")

(autoload 'magit-next-line "magit-extras" "\
Like `next-line' but with Magit-specific shift-selection.

Magit's selection mechanism is based on the region but selects
an area that is larger than the region.  This causes `next-line'
when invoked while holding the shift key to move down one line
and thereby select two lines.  When invoked inside a hunk body
this command does not move point on the first invocation and
thereby it only selects a single line.  Which inconsistency you
prefer is a matter of preference.

\(fn &optional ARG TRY-VSCROLL)" t nil)

(function-put 'magit-next-line 'interactive-only 'forward-line)

(autoload 'magit-clean "magit-extras" "\
Remove untracked files from the working tree.
With a prefix argument also remove ignored files,
with two prefix arguments remove ignored files only.

\(git clean -f -d [-x|-X])

\(fn &optional ARG)" t nil)

(autoload 'magit-add-change-log-entry "magit-extras" "\
Find change log file and add date entry and item for current change.
This differs from `add-change-log-entry' (which see) in that
it acts on the current hunk in a Magit buffer instead of on
a position in a file-visiting buffer.

\(fn &optional WHOAMI FILE-NAME OTHER-WINDOW)" t nil)

(autoload 'magit-add-change-log-entry-other-window "magit-extras" "\
Find change log file in other window and add entry and item.
This differs from `add-change-log-entry-other-window' (which see)
in that it acts on the current hunk in a Magit buffer instead of
on a position in a file-visiting buffer.

\(fn &optional WHOAMI FILE-NAME)" t nil)

(autoload 'magit-edit-line-commit "magit-extras" "\
Edit the commit that added the current line.

With a prefix argument edit the commit that removes the line,
if any.  The commit is determined using `git blame' and made
editable using `git rebase --interactive' if it is reachable
from `HEAD', or by checking out the commit (or a branch that
points at it) otherwise.

\(fn &optional TYPE)" t nil)

(autoload 'magit-diff-edit-hunk-commit "magit-extras" "\
From a hunk, edit the respective commit and visit the file.

First visit the file being modified by the hunk at the correct
location using `magit-diff-visit-file'.  This actually visits a
blob.  When point is on a diff header, not within an individual
hunk, then this visits the blob the first hunk is about.

Then invoke `magit-edit-line-commit', which uses an interactive
rebase to make the commit editable, or if that is not possible
because the commit is not reachable from `HEAD' by checking out
that commit directly.  This also causes the actual worktree file
to be visited.

Neither the blob nor the file buffer are killed when finishing
the rebase.  If that is undesirable, then it might be better to
use `magit-rebase-edit-command' instead of this command.

\(fn FILE)" t nil)

(autoload 'magit-reshelve-since "magit-extras" "\
Change the author and committer dates of the commits since REV.

Ask the user for the first reachable commit whose dates should
be changed.  Then read the new date for that commit.  The initial
minibuffer input and the previous history element offer good
values.  The next commit will be created one minute later and so
on.

This command is only intended for interactive use and should only
be used on highly rearranged and unpublished history.

If KEYID is non-nil, then use that to sign all reshelved commits.
Interactively use the value of the \"--gpg-sign\" option in the
list returned by `magit-rebase-arguments'.

\(fn REV KEYID)" t nil)

(autoload 'magit-pop-revision-stack "magit-extras" "\
Insert a representation of a revision into the current buffer.

Pop a revision from the `magit-revision-stack' and insert it into
the current buffer according to `magit-pop-revision-stack-format'.
Revisions can be put on the stack using `magit-copy-section-value'
and `magit-copy-buffer-revision'.

If the stack is empty or with a prefix argument, instead read a
revision in the minibuffer.  By using the minibuffer history this
allows selecting an item which was popped earlier or to insert an
arbitrary reference or revision without first pushing it onto the
stack.

When reading the revision from the minibuffer, then it might not
be possible to guess the correct repository.  When this command
is called inside a repository (e.g. while composing a commit
message), then that repository is used.  Otherwise (e.g. while
composing an email) then the repository recorded for the top
element of the stack is used (even though we insert another
revision).  If not called inside a repository and with an empty
stack, or with two prefix arguments, then read the repository in
the minibuffer too.

\(fn REV TOPLEVEL)" t nil)

(autoload 'magit-copy-section-value "magit-extras" "\
Save the value of the current section for later use.

Save the section value to the `kill-ring', and, provided that
the current section is a commit, branch, or tag section, push
the (referenced) revision to the `magit-revision-stack' for use
with `magit-pop-revision-stack'.

When `magit-copy-revision-abbreviated' is non-nil, save the
abbreviated revision to the `kill-ring' and the
`magit-revision-stack'.

When the current section is a branch or a tag, and a prefix
argument is used, then save the revision at its tip to the
`kill-ring' instead of the reference name.

When the region is active, then save that to the `kill-ring',
like `kill-ring-save' would, instead of behaving as described
above.  If a prefix argument is used and the region is within
a hunk, then strip the diff marker column and keep only either
the added or removed lines, depending on the sign of the prefix
argument.

\(fn ARG)" t nil)

(autoload 'magit-copy-buffer-revision "magit-extras" "\
Save the revision of the current buffer for later use.

Save the revision shown in the current buffer to the `kill-ring'
and push it to the `magit-revision-stack'.

This command is mainly intended for use in `magit-revision-mode'
buffers, the only buffers where it is always unambiguous exactly
which revision should be saved.

Most other Magit buffers usually show more than one revision, in
some way or another, so this command has to select one of them,
and that choice might not always be the one you think would have
been the best pick.

In such buffers it is often more useful to save the value of
the current section instead, using `magit-copy-section-value'.

When the region is active, then save that to the `kill-ring',
like `kill-ring-save' would, instead of behaving as described
above.

When `magit-copy-revision-abbreviated' is non-nil, save the
abbreviated revision to the `kill-ring' and the
`magit-revision-stack'." t nil)

(autoload 'magit-display-repository-buffer "magit-extras" "\
Display a Magit buffer belonging to the current Git repository.
The buffer is displayed using `magit-display-buffer', which see.

\(fn BUFFER)" t nil)

(autoload 'magit-switch-to-repository-buffer "magit-extras" "\
Switch to a Magit buffer belonging to the current Git repository.

\(fn BUFFER)" t nil)

(autoload 'magit-switch-to-repository-buffer-other-window "magit-extras" "\
Switch to a Magit buffer belonging to the current Git repository.

\(fn BUFFER)" t nil)

(autoload 'magit-switch-to-repository-buffer-other-frame "magit-extras" "\
Switch to a Magit buffer belonging to the current Git repository.

\(fn BUFFER)" t nil)

(autoload 'magit-abort-dwim "magit-extras" "\
Abort current operation.
Depending on the context, this will abort a merge, a rebase, a
patch application, a cherry-pick, a revert, or a bisect." t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "magit-extras" '("magit-")))


 (autoload 'magit-fetch "magit-fetch" nil t)
 (autoload 'magit-fetch-from-pushremote "magit-fetch" nil t)
 (autoload 'magit-fetch-from-upstream "magit-fetch" nil t)

(autoload 'magit-fetch-other "magit-fetch" "\
Fetch from another repository.

\(fn REMOTE ARGS)" t nil)

(autoload 'magit-fetch-branch "magit-fetch" "\
Fetch a BRANCH from a REMOTE.

\(fn REMOTE BRANCH ARGS)" t nil)

(autoload 'magit-fetch-refspec "magit-fetch" "\
Fetch a REFSPEC from a REMOTE.

\(fn REMOTE REFSPEC ARGS)" t nil)

(autoload 'magit-fetch-all "magit-fetch" "\
Fetch from all remotes.

\(fn ARGS)" t nil)

(autoload 'magit-fetch-all-prune "magit-fetch" "\
Fetch from all remotes, and prune.
Prune remote tracking branches for branches that have been
removed on the respective remote." t nil)

(autoload 'magit-fetch-all-no-prune "magit-fetch" "\
Fetch from all remotes." t nil)

(autoload 'magit-fetch-modules "magit-fetch" "\
Fetch all submodules.

Option `magit-fetch-modules-jobs' controls how many submodules
are being fetched in parallel.  Also fetch the super-repository,
because `git-fetch' does not support not doing that.  With a
prefix argument fetch all remotes.

\(fn &optional ALL)" t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "magit-fetch" '("magit-")))



(autoload 'magit-find-file "magit-files" "\
View FILE from REV.
Switch to a buffer visiting blob REV:FILE, creating one if none
already exists.  If prior to calling this command the current
buffer and/or cursor position is about the same file, then go
to the line and column corresponding to that location.

\(fn REV FILE)" t nil)

(autoload 'magit-find-file-other-window "magit-files" "\
View FILE from REV, in another window.
Switch to a buffer visiting blob REV:FILE, creating one if none
already exists.  If prior to calling this command the current
buffer and/or cursor position is about the same file, then go to
the line and column corresponding to that location.

\(fn REV FILE)" t nil)

(autoload 'magit-find-file-other-frame "magit-files" "\
View FILE from REV, in another frame.
Switch to a buffer visiting blob REV:FILE, creating one if none
already exists.  If prior to calling this command the current
buffer and/or cursor position is about the same file, then go to
the line and column corresponding to that location.

\(fn REV FILE)" t nil)
 (autoload 'magit-file-dispatch "magit" nil t)

(autoload 'magit-blob-visit-file "magit-files" "\
View the file from the worktree corresponding to the current blob.
When visiting a blob or the version from the index, then go to
the same location in the respective file in the working tree." t nil)

(autoload 'magit-file-checkout "magit-files" "\
Checkout FILE from REV.

\(fn REV FILE)" t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "magit-files" '("magit-")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "magit-git" '("magit-")))


 (autoload 'magit-gitignore "magit-gitignore" nil t)

(autoload 'magit-gitignore-in-topdir "magit-gitignore" "\
Add the Git ignore RULE to the top-level \".gitignore\" file.
Since this file is tracked, it is shared with other clones of the
repository.  Also stage the file.

\(fn RULE)" t nil)

(autoload 'magit-gitignore-in-subdir "magit-gitignore" "\
Add the Git ignore RULE to a \".gitignore\" file in DIRECTORY.
Prompt the user for a directory and add the rule to the
\".gitignore\" file in that directory.  Since such files are
tracked, they are shared with other clones of the repository.
Also stage the file.

\(fn RULE DIRECTORY)" t nil)

(autoload 'magit-gitignore-in-gitdir "magit-gitignore" "\
Add the Git ignore RULE to \"$GIT_DIR/info/exclude\".
Rules in that file only affects this clone of the repository.

\(fn RULE)" t nil)

(autoload 'magit-gitignore-on-system "magit-gitignore" "\
Add the Git ignore RULE to the file specified by `core.excludesFile'.
Rules that are defined in that file affect all local repositories.

\(fn RULE)" t nil)

(autoload 'magit-skip-worktree "magit-gitignore" "\
Call \"git update-index --skip-worktree -- FILE\".

\(fn FILE)" t nil)

(autoload 'magit-no-skip-worktree "magit-gitignore" "\
Call \"git update-index --no-skip-worktree -- FILE\".

\(fn FILE)" t nil)

(autoload 'magit-assume-unchanged "magit-gitignore" "\
Call \"git update-index --assume-unchanged -- FILE\".

\(fn FILE)" t nil)

(autoload 'magit-no-assume-unchanged "magit-gitignore" "\
Call \"git update-index --no-assume-unchanged -- FILE\".

\(fn FILE)" t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "magit-gitignore" '("magit-")))



(autoload 'magit-imenu--log-prev-index-position-function "magit-imenu" "\
Move point to previous line in current buffer.
This function is used as a value for
`imenu-prev-index-position-function'." nil nil)

(autoload 'magit-imenu--log-extract-index-name-function "magit-imenu" "\
Return imenu name for line at point.
This function is used as a value for
`imenu-extract-index-name-function'.  Point should be at the
beginning of the line." nil nil)

(autoload 'magit-imenu--diff-prev-index-position-function "magit-imenu" "\
Move point to previous file line in current buffer.
This function is used as a value for
`imenu-prev-index-position-function'." nil nil)

(autoload 'magit-imenu--diff-extract-index-name-function "magit-imenu" "\
Return imenu name for line at point.
This function is used as a value for
`imenu-extract-index-name-function'.  Point should be at the
beginning of the line." nil nil)

(autoload 'magit-imenu--status-create-index-function "magit-imenu" "\
Return an alist of all imenu entries in current buffer.
This function is used as a value for
`imenu-create-index-function'." nil nil)

(autoload 'magit-imenu--refs-create-index-function "magit-imenu" "\
Return an alist of all imenu entries in current buffer.
This function is used as a value for
`imenu-create-index-function'." nil nil)

(autoload 'magit-imenu--cherry-create-index-function "magit-imenu" "\
Return an alist of all imenu entries in current buffer.
This function is used as a value for
`imenu-create-index-function'." nil nil)

(autoload 'magit-imenu--submodule-prev-index-position-function "magit-imenu" "\
Move point to previous line in magit-submodule-list buffer.
This function is used as a value for
`imenu-prev-index-position-function'." nil nil)

(autoload 'magit-imenu--submodule-extract-index-name-function "magit-imenu" "\
Return imenu name for line at point.
This function is used as a value for
`imenu-extract-index-name-function'.  Point should be at the
beginning of the line." nil nil)

(autoload 'magit-imenu--repolist-prev-index-position-function "magit-imenu" "\
Move point to previous line in magit-repolist buffer.
This function is used as a value for
`imenu-prev-index-position-function'." nil nil)

(autoload 'magit-imenu--repolist-extract-index-name-function "magit-imenu" "\
Return imenu name for line at point.
This function is used as a value for
`imenu-extract-index-name-function'.  Point should be at the
beginning of the line." nil nil)

(autoload 'magit-imenu--process-prev-index-position-function "magit-imenu" "\
Move point to previous process in magit-process buffer.
This function is used as a value for
`imenu-prev-index-position-function'." nil nil)

(autoload 'magit-imenu--process-extract-index-name-function "magit-imenu" "\
Return imenu name for line at point.
This function is used as a value for
`imenu-extract-index-name-function'.  Point should be at the
beginning of the line." nil nil)

(autoload 'magit-imenu--rebase-prev-index-position-function "magit-imenu" "\
Move point to previous commit in git-rebase buffer.
This function is used as a value for
`imenu-prev-index-position-function'." nil nil)

(autoload 'magit-imenu--rebase-extract-index-name-function "magit-imenu" "\
Return imenu name for line at point.
This function is used as a value for
`imenu-extract-index-name-function'.  Point should be at the
beginning of the line." nil nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "magit-imenu" '("magit-imenu--index-function")))


 (autoload 'magit-log "magit-log" nil t)
 (autoload 'magit-log-refresh "magit-log" nil t)

(autoload 'magit-log-current "magit-log" "\
Show log for the current branch.
When `HEAD' is detached or with a prefix argument show log for
one or more revs read from the minibuffer.

\(fn REVS &optional ARGS FILES)" t nil)

(autoload 'magit-log-other "magit-log" "\
Show log for one or more revs read from the minibuffer.
The user can input any revision or revisions separated by a
space, or even ranges, but only branches and tags, and a
representation of the commit at point, are available as
completion candidates.

\(fn REVS &optional ARGS FILES)" t nil)

(autoload 'magit-log-head "magit-log" "\
Show log for `HEAD'.

\(fn &optional ARGS FILES)" t nil)

(autoload 'magit-log-branches "magit-log" "\
Show log for all local branches and `HEAD'.

\(fn &optional ARGS FILES)" t nil)

(autoload 'magit-log-matching-branches "magit-log" "\
Show log for all branches matching PATTERN and `HEAD'.

\(fn PATTERN &optional ARGS FILES)" t nil)

(autoload 'magit-log-matching-tags "magit-log" "\
Show log for all tags matching PATTERN and `HEAD'.

\(fn PATTERN &optional ARGS FILES)" t nil)

(autoload 'magit-log-all-branches "magit-log" "\
Show log for all local and remote branches and `HEAD'.

\(fn &optional ARGS FILES)" t nil)

(autoload 'magit-log-all "magit-log" "\
Show log for all references and `HEAD'.

\(fn &optional ARGS FILES)" t nil)

(autoload 'magit-log-buffer-file "magit-log" "\
Show log for the blob or file visited in the current buffer.
With a prefix argument or when `--follow' is an active log
argument, then follow renames.  When the region is active,
restrict the log to the lines that the region touches.

\(fn &optional FOLLOW BEG END)" t nil)

(autoload 'magit-log-trace-definition "magit-log" "\
Show log for the definition at point.

\(fn FILE FN REV)" t nil)

(autoload 'magit-log-merged "magit-log" "\
Show log for the merge of COMMIT into BRANCH.

More precisely, find merge commit M that brought COMMIT into
BRANCH, and show the log of the range \"M^1..M\".  If COMMIT is
directly on BRANCH, then show approximately twenty surrounding
commits instead.

This command requires git-when-merged, which is available from
https://github.com/mhagger/git-when-merged.

\(fn COMMIT BRANCH &optional ARGS FILES)" t nil)

(autoload 'magit-log-move-to-parent "magit-log" "\
Move to the Nth parent of the current commit.

\(fn &optional N)" t nil)
 (autoload 'magit-shortlog "magit-log" nil t)

(autoload 'magit-shortlog-since "magit-log" "\
Show a history summary for commits since REV.

\(fn REV ARGS)" t nil)

(autoload 'magit-shortlog-range "magit-log" "\
Show a history summary for commit or range REV-OR-RANGE.

\(fn REV-OR-RANGE ARGS)" t nil)

(autoload 'magit-cherry "magit-log" "\
Show commits in a branch that are not merged in the upstream branch.

\(fn HEAD UPSTREAM)" t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "magit-log" '("magit-")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "magit-margin" '("magit-")))


 (autoload 'magit-merge "magit" nil t)

(autoload 'magit-merge-plain "magit-merge" "\
Merge commit REV into the current branch; using default message.

Unless there are conflicts or a prefix argument is used create a
merge commit using a generic commit message and without letting
the user inspect the result.  With a prefix argument pretend the
merge failed to give the user the opportunity to inspect the
merge.

\(git merge --no-edit|--no-commit [ARGS] REV)

\(fn REV &optional ARGS NOCOMMIT)" t nil)

(autoload 'magit-merge-editmsg "magit-merge" "\
Merge commit REV into the current branch; and edit message.
Perform the merge and prepare a commit message but let the user
edit it.

\(git merge --edit --no-ff [ARGS] REV)

\(fn REV &optional ARGS)" t nil)

(autoload 'magit-merge-nocommit "magit-merge" "\
Merge commit REV into the current branch; pretending it failed.
Pretend the merge failed to give the user the opportunity to
inspect the merge and change the commit message.

\(git merge --no-commit --no-ff [ARGS] REV)

\(fn REV &optional ARGS)" t nil)

(autoload 'magit-merge-into "magit-merge" "\
Merge the current branch into BRANCH and remove the former.

Before merging, force push the source branch to its push-remote,
provided the respective remote branch already exists, ensuring
that the respective pull-request (if any) won't get stuck on some
obsolete version of the commits that are being merged.  Finally
if `forge-branch-pullreq' was used to create the merged branch,
branch, then also remove the respective remote branch.

\(fn BRANCH &optional ARGS)" t nil)

(autoload 'magit-merge-absorb "magit-merge" "\
Merge BRANCH into the current branch and remove the former.

Before merging, force push the source branch to its push-remote,
provided the respective remote branch already exists, ensuring
that the respective pull-request (if any) won't get stuck on some
obsolete version of the commits that are being merged.  Finally
if `forge-branch-pullreq' was used to create the merged branch,
then also remove the respective remote branch.

\(fn BRANCH &optional ARGS)" t nil)

(autoload 'magit-merge-squash "magit-merge" "\
Squash commit REV into the current branch; don't create a commit.

\(git merge --squash REV)

\(fn REV)" t nil)

(autoload 'magit-merge-preview "magit-merge" "\
Preview result of merging REV into the current branch.

\(fn REV)" t nil)

(autoload 'magit-merge-abort "magit-merge" "\
Abort the current merge operation.

\(git merge --abort)" t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "magit-merge" '("magit-")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "magit-mode" '("disable-magit-save-buffers" "magit-")))


 (autoload 'magit-notes "magit" nil t)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "magit-notes" '("magit-notes-")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "magit-obsolete" '("magit--magit-popup-warning")))


 (autoload 'magit-patch "magit-patch" nil t)
 (autoload 'magit-patch-create "magit-patch" nil t)
 (autoload 'magit-patch-apply "magit-patch" nil t)

(autoload 'magit-patch-save "magit-patch" "\
Write current diff into patch FILE.

What arguments are used to create the patch depends on the value
of `magit-patch-save-arguments' and whether a prefix argument is
used.

If the value is the symbol `buffer', then use the same arguments
as the buffer.  With a prefix argument use no arguments.

If the value is a list beginning with the symbol `exclude', then
use the same arguments as the buffer except for those matched by
entries in the cdr of the list.  The comparison is done using
`string-prefix-p'.  With a prefix argument use the same arguments
as the buffer.

If the value is a list of strings (including the empty list),
then use those arguments.  With a prefix argument use the same
arguments as the buffer.

Of course the arguments that are required to actually show the
same differences as those shown in the buffer are always used.

\(fn FILE &optional ARG)" t nil)

(autoload 'magit-request-pull "magit-patch" "\
Request upstream to pull from your public repository.

URL is the url of your publicly accessible repository.
START is a commit that already is in the upstream repository.
END is the last commit, usually a branch name, which upstream
is asked to pull.  START has to be reachable from that commit.

\(fn URL START END)" t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "magit-patch" '("magit-")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "magit-process" '("magit-" "tramp-sh-handle-")))


 (autoload 'magit-pull "magit-pull" nil t)
 (autoload 'magit-pull-from-pushremote "magit-pull" nil t)
 (autoload 'magit-pull-from-upstream "magit-pull" nil t)

(autoload 'magit-pull-branch "magit-pull" "\
Pull from a branch read in the minibuffer.

\(fn SOURCE ARGS)" t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "magit-pull" '("magit-pull-")))


 (autoload 'magit-push "magit-push" nil t)
 (autoload 'magit-push-current-to-pushremote "magit-push" nil t)
 (autoload 'magit-push-current-to-upstream "magit-push" nil t)

(autoload 'magit-push-current "magit-push" "\
Push the current branch to a branch read in the minibuffer.

\(fn TARGET ARGS)" t nil)

(autoload 'magit-push-other "magit-push" "\
Push an arbitrary branch or commit somewhere.
Both the source and the target are read in the minibuffer.

\(fn SOURCE TARGET ARGS)" t nil)

(autoload 'magit-push-refspecs "magit-push" "\
Push one or multiple REFSPECS to a REMOTE.
Both the REMOTE and the REFSPECS are read in the minibuffer.  To
use multiple REFSPECS, separate them with commas.  Completion is
only available for the part before the colon, or when no colon
is used.

\(fn REMOTE REFSPECS ARGS)" t nil)

(autoload 'magit-push-matching "magit-push" "\
Push all matching branches to another repository.
If multiple remotes exist, then read one from the user.
If just one exists, use that without requiring confirmation.

\(fn REMOTE &optional ARGS)" t nil)

(autoload 'magit-push-tags "magit-push" "\
Push all tags to another repository.
If only one remote exists, then push to that.  Otherwise prompt
for a remote, offering the remote configured for the current
branch as default.

\(fn REMOTE &optional ARGS)" t nil)

(autoload 'magit-push-tag "magit-push" "\
Push a tag to another repository.

\(fn TAG REMOTE &optional ARGS)" t nil)

(autoload 'magit-push-notes-ref "magit-push" "\
Push a notes ref to another repository.

\(fn REF REMOTE &optional ARGS)" t nil)
 (autoload 'magit-push-implicitly "magit-push" nil t)

(autoload 'magit-push-to-remote "magit-push" "\
Push to REMOTE without using an explicit refspec.
The REMOTE is read in the minibuffer.

This command simply runs \"git push -v [ARGS] REMOTE\".  ARGS
are the arguments specified in the popup buffer.  No refspec
arguments are used.  Instead the behavior depends on at least
these Git variables: `push.default', `remote.pushDefault',
`branch.<branch>.pushRemote', `branch.<branch>.remote',
`branch.<branch>.merge', and `remote.<remote>.push'.

\(fn REMOTE ARGS)" t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "magit-push" '("magit-")))



(autoload 'magit-reflog-current "magit-reflog" "\
Display the reflog of the current branch.
If `HEAD' is detached, then show the reflog for that instead." t nil)

(autoload 'magit-reflog-other "magit-reflog" "\
Display the reflog of a branch or another ref.

\(fn REF)" t nil)

(autoload 'magit-reflog-head "magit-reflog" "\
Display the `HEAD' reflog." t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "magit-reflog" '("magit-reflog-")))


 (autoload 'magit-show-refs "magit-refs" nil t)

(autoload 'magit-show-refs-head "magit-refs" "\
List and compare references in a dedicated buffer.
Compared with `HEAD'.

\(fn &optional ARGS)" t nil)

(autoload 'magit-show-refs-current "magit-refs" "\
List and compare references in a dedicated buffer.
Compare with the current branch or `HEAD' if it is detached.

\(fn &optional ARGS)" t nil)

(autoload 'magit-show-refs-other "magit-refs" "\
List and compare references in a dedicated buffer.
Compared with a branch read from the user.

\(fn &optional REF ARGS)" t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "magit-refs" '("magit-")))


 (autoload 'magit-remote "magit-remote" nil t)

(autoload 'magit-remote-add "magit-remote" "\
Add a remote named REMOTE and fetch it.

\(fn REMOTE URL &optional ARGS)" t nil)

(autoload 'magit-remote-rename "magit-remote" "\
Rename the remote named OLD to NEW.

\(fn OLD NEW)" t nil)

(autoload 'magit-remote-remove "magit-remote" "\
Delete the remote named REMOTE.

\(fn REMOTE)" t nil)

(autoload 'magit-remote-prune "magit-remote" "\
Remove stale remote-tracking branches for REMOTE.

\(fn REMOTE)" t nil)

(autoload 'magit-remote-prune-refspecs "magit-remote" "\
Remove stale refspecs for REMOTE.

A refspec is stale if there no longer exists at least one branch
on the remote that would be fetched due to that refspec.  A stale
refspec is problematic because its existence causes Git to refuse
to fetch according to the remaining non-stale refspecs.

If only stale refspecs remain, then offer to either delete the
remote or to replace the stale refspecs with the default refspec.

Also remove the remote-tracking branches that were created due to
the now stale refspecs.  Other stale branches are not removed.

\(fn REMOTE)" t nil)

(autoload 'magit-remote-set-head "magit-remote" "\
Set the local representation of REMOTE's default branch.
Query REMOTE and set the symbolic-ref refs/remotes/<remote>/HEAD
accordingly.  With a prefix argument query for the branch to be
used, which allows you to select an incorrect value if you fancy
doing that.

\(fn REMOTE &optional BRANCH)" t nil)

(autoload 'magit-remote-unset-head "magit-remote" "\
Unset the local representation of REMOTE's default branch.
Delete the symbolic-ref \"refs/remotes/<remote>/HEAD\".

\(fn REMOTE)" t nil)

(autoload 'magit-remote-unshallow "magit-remote" "\
Convert a shallow remote into a full one.
If only a single refspec is set and it does not contain a
wildcard, then also offer to replace it with the standard
refspec.

\(fn REMOTE)" t nil)
 (autoload 'magit-remote-configure "magit-remote" nil t)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "magit-remote" '("magit-")))



(autoload 'magit-list-repositories "magit-repos" "\
Display a list of repositories.

Use the options `magit-repository-directories' to control which
repositories are displayed." t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "magit-repos" '("magit-")))


 (autoload 'magit-reset "magit" nil t)

(autoload 'magit-reset-mixed "magit-reset" "\
Reset the `HEAD' and index to COMMIT, but not the working tree.

\(git reset --mixed COMMIT)

\(fn COMMIT)" t nil)

(autoload 'magit-reset-soft "magit-reset" "\
Reset the `HEAD' to COMMIT, but not the index and working tree.

\(git reset --soft REVISION)

\(fn COMMIT)" t nil)

(autoload 'magit-reset-hard "magit-reset" "\
Reset the `HEAD', index, and working tree to COMMIT.

\(git reset --hard REVISION)

\(fn COMMIT)" t nil)

(autoload 'magit-reset-keep "magit-reset" "\
Reset the `HEAD' and index to COMMIT, while keeping uncommitted changes.

\(git reset --keep REVISION)

\(fn COMMIT)" t nil)

(autoload 'magit-reset-index "magit-reset" "\
Reset the index to COMMIT.
Keep the `HEAD' and working tree as-is, so if COMMIT refers to the
head this effectively unstages all changes.

\(git reset COMMIT .)

\(fn COMMIT)" t nil)

(autoload 'magit-reset-worktree "magit-reset" "\
Reset the worktree to COMMIT.
Keep the `HEAD' and index as-is.

\(fn COMMIT)" t nil)

(autoload 'magit-reset-quickly "magit-reset" "\
Reset the `HEAD' and index to COMMIT, and possibly the working tree.
With a prefix argument reset the working tree otherwise don't.

\(git reset --mixed|--hard COMMIT)

\(fn COMMIT &optional HARD)" t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "magit-reset" '("magit-reset-")))



(autoload 'magit-sequencer-continue "magit-sequence" "\
Resume the current cherry-pick or revert sequence." t nil)

(autoload 'magit-sequencer-skip "magit-sequence" "\
Skip the stopped at commit during a cherry-pick or revert sequence." t nil)

(autoload 'magit-sequencer-abort "magit-sequence" "\
Abort the current cherry-pick or revert sequence.
This discards all changes made since the sequence started." t nil)
 (autoload 'magit-cherry-pick "magit-sequence" nil t)

(autoload 'magit-cherry-copy "magit-sequence" "\
Copy COMMITS from another branch onto the current branch.
Prompt for a commit, defaulting to the commit at point.  If
the region selects multiple commits, then pick all of them,
without prompting.

\(fn COMMITS &optional ARGS)" t nil)

(autoload 'magit-cherry-apply "magit-sequence" "\
Apply the changes in COMMITS but do not commit them.
Prompt for a commit, defaulting to the commit at point.  If
the region selects multiple commits, then apply all of them,
without prompting.

\(fn COMMITS &optional ARGS)" t nil)

(autoload 'magit-cherry-harvest "magit-sequence" "\
Move COMMITS from another BRANCH onto the current branch.
Remove the COMMITS from BRANCH and stay on the current branch.
If a conflict occurs, then you have to fix that and finish the
process manually.

\(fn COMMITS BRANCH &optional ARGS)" t nil)

(autoload 'magit-cherry-donate "magit-sequence" "\
Move COMMITS from the current branch onto another existing BRANCH.
Remove COMMITS from the current branch and stay on that branch.
If a conflict occurs, then you have to fix that and finish the
process manually.

\(fn COMMITS BRANCH &optional ARGS)" t nil)

(autoload 'magit-cherry-spinout "magit-sequence" "\
Move COMMITS from the current branch onto a new BRANCH.
Remove COMMITS from the current branch and stay on that branch.
If a conflict occurs, then you have to fix that and finish the
process manually.

\(fn COMMITS BRANCH START-POINT &optional ARGS)" t nil)

(autoload 'magit-cherry-spinoff "magit-sequence" "\
Move COMMITS from the current branch onto a new BRANCH.
Remove COMMITS from the current branch and checkout BRANCH.
If a conflict occurs, then you have to fix that and finish
the process manually.

\(fn COMMITS BRANCH START-POINT &optional ARGS)" t nil)
 (autoload 'magit-revert "magit-sequence" nil t)

(autoload 'magit-revert-and-commit "magit-sequence" "\
Revert COMMIT by creating a new commit.
Prompt for a commit, defaulting to the commit at point.  If
the region selects multiple commits, then revert all of them,
without prompting.

\(fn COMMIT &optional ARGS)" t nil)

(autoload 'magit-revert-no-commit "magit-sequence" "\
Revert COMMIT by applying it in reverse to the worktree.
Prompt for a commit, defaulting to the commit at point.  If
the region selects multiple commits, then revert all of them,
without prompting.

\(fn COMMIT &optional ARGS)" t nil)
 (autoload 'magit-am "magit-sequence" nil t)

(autoload 'magit-am-apply-patches "magit-sequence" "\
Apply the patches FILES.

\(fn &optional FILES ARGS)" t nil)

(autoload 'magit-am-apply-maildir "magit-sequence" "\
Apply the patches from MAILDIR.

\(fn &optional MAILDIR ARGS)" t nil)

(autoload 'magit-am-continue "magit-sequence" "\
Resume the current patch applying sequence." t nil)

(autoload 'magit-am-skip "magit-sequence" "\
Skip the stopped at patch during a patch applying sequence." t nil)

(autoload 'magit-am-abort "magit-sequence" "\
Abort the current patch applying sequence.
This discards all changes made since the sequence started." t nil)
 (autoload 'magit-rebase "magit-sequence" nil t)
 (autoload 'magit-rebase-onto-pushremote "magit-sequence" nil t)
 (autoload 'magit-rebase-onto-upstream "magit-sequence" nil t)

(autoload 'magit-rebase-branch "magit-sequence" "\
Rebase the current branch onto a branch read in the minibuffer.
All commits that are reachable from `HEAD' but not from the
selected branch TARGET are being rebased.

\(fn TARGET ARGS)" t nil)

(autoload 'magit-rebase-subset "magit-sequence" "\
Rebase a subset of the current branch's history onto a new base.
Rebase commits from START to `HEAD' onto NEWBASE.
START has to be selected from a list of recent commits.

\(fn NEWBASE START ARGS)" t nil)

(autoload 'magit-rebase-interactive "magit-sequence" "\
Start an interactive rebase sequence.

\(fn COMMIT ARGS)" t nil)

(autoload 'magit-rebase-autosquash "magit-sequence" "\
Combine squash and fixup commits with their intended targets.

\(fn ARGS)" t nil)

(autoload 'magit-rebase-edit-commit "magit-sequence" "\
Edit a single older commit using rebase.

\(fn COMMIT ARGS)" t nil)

(autoload 'magit-rebase-reword-commit "magit-sequence" "\
Reword a single older commit using rebase.

\(fn COMMIT ARGS)" t nil)

(autoload 'magit-rebase-remove-commit "magit-sequence" "\
Remove a single older commit using rebase.

\(fn COMMIT ARGS)" t nil)

(autoload 'magit-rebase-continue "magit-sequence" "\
Restart the current rebasing operation.
In some cases this pops up a commit message buffer for you do
edit.  With a prefix argument the old message is reused as-is.

\(fn &optional NOEDIT)" t nil)

(autoload 'magit-rebase-skip "magit-sequence" "\
Skip the current commit and restart the current rebase operation." t nil)

(autoload 'magit-rebase-edit "magit-sequence" "\
Edit the todo list of the current rebase operation." t nil)

(autoload 'magit-rebase-abort "magit-sequence" "\
Abort the current rebase operation, restoring the original branch." t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "magit-sequence" '("magit-")))


 (autoload 'magit-stash "magit-stash" nil t)

(autoload 'magit-stash-both "magit-stash" "\
Create a stash of the index and working tree.
Untracked files are included according to infix arguments.
One prefix argument is equivalent to `--include-untracked'
while two prefix arguments are equivalent to `--all'.

\(fn MESSAGE &optional INCLUDE-UNTRACKED)" t nil)

(autoload 'magit-stash-index "magit-stash" "\
Create a stash of the index only.
Unstaged and untracked changes are not stashed.  The stashed
changes are applied in reverse to both the index and the
worktree.  This command can fail when the worktree is not clean.
Applying the resulting stash has the inverse effect.

\(fn MESSAGE)" t nil)

(autoload 'magit-stash-worktree "magit-stash" "\
Create a stash of unstaged changes in the working tree.
Untracked files are included according to infix arguments.
One prefix argument is equivalent to `--include-untracked'
while two prefix arguments are equivalent to `--all'.

\(fn MESSAGE &optional INCLUDE-UNTRACKED)" t nil)

(autoload 'magit-stash-keep-index "magit-stash" "\
Create a stash of the index and working tree, keeping index intact.
Untracked files are included according to infix arguments.
One prefix argument is equivalent to `--include-untracked'
while two prefix arguments are equivalent to `--all'.

\(fn MESSAGE &optional INCLUDE-UNTRACKED)" t nil)

(autoload 'magit-snapshot-both "magit-stash" "\
Create a snapshot of the index and working tree.
Untracked files are included according to infix arguments.
One prefix argument is equivalent to `--include-untracked'
while two prefix arguments are equivalent to `--all'.

\(fn &optional INCLUDE-UNTRACKED)" t nil)

(autoload 'magit-snapshot-index "magit-stash" "\
Create a snapshot of the index only.
Unstaged and untracked changes are not stashed." t nil)

(autoload 'magit-snapshot-worktree "magit-stash" "\
Create a snapshot of unstaged changes in the working tree.
Untracked files are included according to infix arguments.
One prefix argument is equivalent to `--include-untracked'
while two prefix arguments are equivalent to `--all'.

\(fn &optional INCLUDE-UNTRACKED)" t nil)

(autoload 'magit-stash-apply "magit-stash" "\
Apply a stash to the working tree.
Try to preserve the stash index.  If that fails because there
are staged changes, apply without preserving the stash index.

\(fn STASH)" t nil)

(autoload 'magit-stash-pop "magit-stash" "\
Apply a stash to the working tree and remove it from stash list.
Try to preserve the stash index.  If that fails because there
are staged changes, apply without preserving the stash index
and forgo removing the stash.

\(fn STASH)" t nil)

(autoload 'magit-stash-drop "magit-stash" "\
Remove a stash from the stash list.
When the region is active offer to drop all contained stashes.

\(fn STASH)" t nil)

(autoload 'magit-stash-clear "magit-stash" "\
Remove all stashes saved in REF's reflog by deleting REF.

\(fn REF)" t nil)

(autoload 'magit-stash-branch "magit-stash" "\
Create and checkout a new BRANCH from STASH.

\(fn STASH BRANCH)" t nil)

(autoload 'magit-stash-branch-here "magit-stash" "\
Create and checkout a new BRANCH and apply STASH.
The branch is created using `magit-branch-and-checkout', using the
current branch or `HEAD' as the start-point.

\(fn STASH BRANCH)" t nil)

(autoload 'magit-stash-format-patch "magit-stash" "\
Create a patch from STASH

\(fn STASH)" t nil)

(autoload 'magit-stash-list "magit-stash" "\
List all stashes in a buffer." t nil)

(autoload 'magit-stash-show "magit-stash" "\
Show all diffs of a stash in a buffer.

\(fn STASH &optional ARGS FILES)" t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "magit-stash" '("magit-")))



(autoload 'magit-init "magit-status" "\
Initialize a Git repository, then show its status.

If the directory is below an existing repository, then the user
has to confirm that a new one should be created inside.  If the
directory is the root of the existing repository, then the user
has to confirm that it should be reinitialized.

Non-interactively DIRECTORY is (re-)initialized unconditionally.

\(fn DIRECTORY)" t nil)

(autoload 'magit-status "magit-status" "\
Show the status of the current Git repository in a buffer.

If the current directory isn't located within a Git repository,
then prompt for an existing repository or an arbitrary directory,
depending on option `magit-repository-directories', and show the
status of the selected repository instead.

* If that option specifies any existing repositories, then offer
  those for completion and show the status buffer for the
  selected one.

* Otherwise read an arbitrary directory using regular file-name
  completion.  If the selected directory is the top-level of an
  existing working tree, then show the status buffer for that.

* Otherwise offer to initialize the selected directory as a new
  repository.  After creating the repository show its status
  buffer.

These fallback behaviors can also be forced using one or more
prefix arguments:

* With two prefix arguments (or more precisely a numeric prefix
  value of 16 or greater) read an arbitrary directory and act on
  it as described above.  The same could be accomplished using
  the command `magit-init'.

* With a single prefix argument read an existing repository, or
  if none can be found based on `magit-repository-directories',
  then fall back to the same behavior as with two prefix
  arguments.

\(fn &optional DIRECTORY CACHE)" t nil)

(defalias 'magit 'magit-status "\
An alias for `magit-status' for better discoverability.

Instead of invoking this alias for `magit-status' using
\"M-x magit RET\", you should bind a key to `magit-status'
and read the info node `(magit)Getting Started', which
also contains other useful hints.")

(autoload 'magit-status-here "magit-status" "\
Like `magit-status' but with non-nil `magit-status-goto-file-position'." t nil)

(autoload 'magit-status-setup-buffer "magit-status" "\


\(fn &optional DIRECTORY)" nil nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "magit-status" '("magit-")))


 (autoload 'magit-submodule "magit-submodule" nil t)
 (autoload 'magit-submodule-add "magit-submodule" nil t)

(autoload 'magit-submodule-read-name-for-path "magit-submodule" "\


\(fn PATH &optional PREFER-SHORT)" nil nil)
 (autoload 'magit-submodule-register "magit-submodule" nil t)
 (autoload 'magit-submodule-populate "magit-submodule" nil t)
 (autoload 'magit-submodule-update "magit-submodule" nil t)
 (autoload 'magit-submodule-synchronize "magit-submodule" nil t)
 (autoload 'magit-submodule-unpopulate "magit-submodule" nil t)

(autoload 'magit-submodule-remove "magit-submodule" "\
Unregister MODULES and remove their working directories.

For safety reasons, do not remove the gitdirs and if a module has
uncommitted changes, then do not remove it at all.  If a module's
gitdir is located inside the working directory, then move it into
the gitdir of the superproject first.

With the \"--force\" argument offer to remove dirty working
directories and with a prefix argument offer to delete gitdirs.
Both actions are very dangerous and have to be confirmed.  There
are additional safety precautions in place, so you might be able
to recover from making a mistake here, but don't count on it.

\(fn MODULES ARGS TRASH-GITDIRS)" t nil)

(autoload 'magit-insert-modules "magit-submodule" "\
Insert submodule sections.
Hook `magit-module-sections-hook' controls which module sections
are inserted, and option `magit-module-sections-nested' controls
whether they are wrapped in an additional section." nil nil)

(autoload 'magit-insert-modules-overview "magit-submodule" "\
Insert sections for all modules.
For each section insert the path and the output of `git describe --tags',
or, failing that, the abbreviated HEAD commit hash." nil nil)

(autoload 'magit-insert-modules-unpulled-from-upstream "magit-submodule" "\
Insert sections for modules that haven't been pulled from the upstream.
These sections can be expanded to show the respective commits." nil nil)

(autoload 'magit-insert-modules-unpulled-from-pushremote "magit-submodule" "\
Insert sections for modules that haven't been pulled from the push-remote.
These sections can be expanded to show the respective commits." nil nil)

(autoload 'magit-insert-modules-unpushed-to-upstream "magit-submodule" "\
Insert sections for modules that haven't been pushed to the upstream.
These sections can be expanded to show the respective commits." nil nil)

(autoload 'magit-insert-modules-unpushed-to-pushremote "magit-submodule" "\
Insert sections for modules that haven't been pushed to the push-remote.
These sections can be expanded to show the respective commits." nil nil)

(autoload 'magit-list-submodules "magit-submodule" "\
Display a list of the current repository's submodules." t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "magit-submodule" '("magit-")))


 (autoload 'magit-subtree "magit-subtree" nil t)
 (autoload 'magit-subtree-import "magit-subtree" nil t)
 (autoload 'magit-subtree-export "magit-subtree" nil t)

(autoload 'magit-subtree-add "magit-subtree" "\
Add REF from REPOSITORY as a new subtree at PREFIX.

\(fn PREFIX REPOSITORY REF ARGS)" t nil)

(autoload 'magit-subtree-add-commit "magit-subtree" "\
Add COMMIT as a new subtree at PREFIX.

\(fn PREFIX COMMIT ARGS)" t nil)

(autoload 'magit-subtree-merge "magit-subtree" "\
Merge COMMIT into the PREFIX subtree.

\(fn PREFIX COMMIT ARGS)" t nil)

(autoload 'magit-subtree-pull "magit-subtree" "\
Pull REF from REPOSITORY into the PREFIX subtree.

\(fn PREFIX REPOSITORY REF ARGS)" t nil)

(autoload 'magit-subtree-push "magit-subtree" "\
Extract the history of the subtree PREFIX and push it to REF on REPOSITORY.

\(fn PREFIX REPOSITORY REF ARGS)" t nil)

(autoload 'magit-subtree-split "magit-subtree" "\
Extract the history of the subtree PREFIX.

\(fn PREFIX COMMIT ARGS)" t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "magit-subtree" '("magit-")))


 (autoload 'magit-tag "magit" nil t)

(autoload 'magit-tag-create "magit-tag" "\
Create a new tag with the given NAME at REV.
With a prefix argument annotate the tag.

\(git tag [--annotate] NAME REV)

\(fn NAME REV &optional ARGS)" t nil)

(autoload 'magit-tag-delete "magit-tag" "\
Delete one or more tags.
If the region marks multiple tags (and nothing else), then offer
to delete those, otherwise prompt for a single tag to be deleted,
defaulting to the tag at point.

\(git tag -d TAGS)

\(fn TAGS)" t nil)

(autoload 'magit-tag-prune "magit-tag" "\
Offer to delete tags missing locally from REMOTE, and vice versa.

\(fn TAGS REMOTE-TAGS REMOTE)" t nil)

(autoload 'magit-tag-release "magit-tag" "\
Create a release tag.

Assume that release tags match `magit-release-tag-regexp'.

First prompt for the name of the new tag using the highest
existing tag as initial input and leaving it to the user to
increment the desired part of the version string.

If `--annotate' is enabled, then prompt for the message of the
new tag.  Base the proposed tag message on the message of the
highest tag, provided that that contains the corresponding
version string and substituting the new version string for that.
Otherwise propose something like \"Foo-Bar 1.2.3\", given, for
example, a TAG \"v1.2.3\" and a repository located at something
like \"/path/to/foo-bar\".

\(fn TAG MSG &optional ARGS)" t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "magit-tag" '("magit-")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "magit-transient" '("magit-")))



(autoload 'magit-emacs-Q-command "magit-utils" "\
Show a shell command that runs an uncustomized Emacs with only Magit loaded.
See info node `(magit)Debugging Tools' for more information." t nil)

(autoload 'Info-follow-nearest-node--magit-gitman "magit-utils" "\


\(fn FN &optional FORK)" nil nil)

(advice-add 'Info-follow-nearest-node :around 'Info-follow-nearest-node--magit-gitman)

(autoload 'org-man-export--magit-gitman "magit-utils" "\


\(fn FN LINK DESCRIPTION FORMAT)" nil nil)

(advice-add 'org-man-export :around 'org-man-export--magit-gitman)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "magit-utils" '("magit-")))



(defvar magit-wip-mode nil "\
Non-nil if Magit-Wip mode is enabled.
See the `magit-wip-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `magit-wip-mode'.")

(custom-autoload 'magit-wip-mode "magit-wip" nil)

(autoload 'magit-wip-mode "magit-wip" "\
Save uncommitted changes to work-in-progress refs.

If called interactively, enable Magit-Wip mode if ARG is
positive, and disable it if ARG is zero or negative.  If called
from Lisp, also enable the mode if ARG is omitted or nil, and
toggle it if ARG is `toggle'; disable the mode otherwise.

Whenever appropriate (i.e. when dataloss would be a possibility
otherwise) this mode causes uncommitted changes to be committed
to dedicated work-in-progress refs.

For historic reasons this mode is implemented on top of four
other `magit-wip-*' modes, which can also be used individually,
if you want finer control over when the wip refs are updated;
but that is discouraged.

\(fn &optional ARG)" t nil)

(put 'magit-wip-after-save-mode 'globalized-minor-mode t)

(defvar magit-wip-after-save-mode nil "\
Non-nil if Magit-Wip-After-Save mode is enabled.
See the `magit-wip-after-save-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `magit-wip-after-save-mode'.")

(custom-autoload 'magit-wip-after-save-mode "magit-wip" nil)

(autoload 'magit-wip-after-save-mode "magit-wip" "\
Toggle Magit-Wip-After-Save-Local mode in all buffers.
With prefix ARG, enable Magit-Wip-After-Save mode if ARG is positive;
otherwise, disable it.  If called from Lisp, enable the mode if
ARG is omitted or nil.

Magit-Wip-After-Save-Local mode is enabled in all buffers where
`magit-wip-after-save-local-mode-turn-on' would do it.
See `magit-wip-after-save-local-mode' for more information on Magit-Wip-After-Save-Local mode.

\(fn &optional ARG)" t nil)

(defvar magit-wip-after-apply-mode nil "\
Non-nil if Magit-Wip-After-Apply mode is enabled.
See the `magit-wip-after-apply-mode' command
for a description of this minor mode.")

(custom-autoload 'magit-wip-after-apply-mode "magit-wip" nil)

(autoload 'magit-wip-after-apply-mode "magit-wip" "\
Commit to work-in-progress refs.

If called interactively, enable Magit-Wip-After-Apply mode if ARG
is positive, and disable it if ARG is zero or negative.  If
called from Lisp, also enable the mode if ARG is omitted or nil,
and toggle it if ARG is `toggle'; disable the mode otherwise.

After applying a change using any \"apply variant\"
command (apply, stage, unstage, discard, and reverse) commit the
affected files to the current wip refs.  For each branch there
may be two wip refs; one contains snapshots of the files as found
in the worktree and the other contains snapshots of the entries
in the index.

\(fn &optional ARG)" t nil)

(defvar magit-wip-before-change-mode nil "\
Non-nil if Magit-Wip-Before-Change mode is enabled.
See the `magit-wip-before-change-mode' command
for a description of this minor mode.")

(custom-autoload 'magit-wip-before-change-mode "magit-wip" nil)

(autoload 'magit-wip-before-change-mode "magit-wip" "\
Commit to work-in-progress refs before certain destructive changes.

If called interactively, enable Magit-Wip-Before-Change mode if
ARG is positive, and disable it if ARG is zero or negative.  If
called from Lisp, also enable the mode if ARG is omitted or nil,
and toggle it if ARG is `toggle'; disable the mode otherwise.

Before invoking a revert command or an \"apply variant\"
command (apply, stage, unstage, discard, and reverse) commit the
affected tracked files to the current wip refs.  For each branch
there may be two wip refs; one contains snapshots of the files
as found in the worktree and the other contains snapshots of the
entries in the index.

Only changes to files which could potentially be affected by the
command which is about to be called are committed.

\(fn &optional ARG)" t nil)

(autoload 'magit-wip-commit-initial-backup "magit-wip" "\
Before saving, commit current file to a worktree wip ref.

The user has to add this function to `before-save-hook'.

Commit the current state of the visited file before saving the
current buffer to that file.  This backs up the same version of
the file as `backup-buffer' would, but stores the backup in the
worktree wip ref, which is also used by the various Magit Wip
modes, instead of in a backup file as `backup-buffer' would.

This function ignores the variables that affect `backup-buffer'
and can be used along-side that function, which is recommended
because this function only backs up files that are tracked in
a Git repository." nil nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "magit-wip" '("magit-")))


 (autoload 'magit-worktree "magit-worktree" nil t)

(autoload 'magit-worktree-checkout "magit-worktree" "\
Checkout BRANCH in a new worktree at PATH.

\(fn PATH BRANCH)" t nil)

(autoload 'magit-worktree-branch "magit-worktree" "\
Create a new BRANCH and check it out in a new worktree at PATH.

\(fn PATH BRANCH START-POINT &optional FORCE)" t nil)

(autoload 'magit-worktree-move "magit-worktree" "\
Move WORKTREE to PATH.

\(fn WORKTREE PATH)" t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "magit-worktree" '("magit-")))




)
(let ((load-true-file-name "/home/cam/.emacs.d/elpa/madhat2r-theme-20170203.30/madhat2r-theme-autoloads.el")(load-file-name "/home/cam/.emacs.d/elpa/madhat2r-theme-20170203.30/madhat2r-theme-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/home/cam/.emacs.d/elpa/madhat2r-theme-20170203.30/madhat2r-theme-autoloads.el") (car load-path))))



(when load-file-name (add-to-list 'custom-theme-load-path (file-name-as-directory (file-name-directory load-file-name))))

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "madhat2r-theme" '("madhat2r")))




)
(let ((load-true-file-name "/home/cam/.emacs.d/elpa/lush-theme-20180816.2200/lush-theme-autoloads.el")(load-file-name "/home/cam/.emacs.d/elpa/lush-theme-20180816.2200/lush-theme-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/home/cam/.emacs.d/elpa/lush-theme-20180816.2200/lush-theme-autoloads.el") (car load-path))))



(when load-file-name (add-to-list 'custom-theme-load-path (file-name-as-directory (file-name-directory load-file-name))))

(autoload 'lush-theme "lush-theme" "\
Load lush-theme." t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "lush-theme" '("lush")))




)
(let ((load-true-file-name "/home/cam/.emacs.d/elpa/lua-mode-20231023.947/lua-mode-autoloads.el")(load-file-name "/home/cam/.emacs.d/elpa/lua-mode-20231023.947/lua-mode-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/home/cam/.emacs.d/elpa/lua-mode-20231023.947/lua-mode-autoloads.el") (car load-path))))



(autoload 'lua-mode "lua-mode" "\
Major mode for editing Lua code.

\(fn)" t nil)

(add-to-list 'auto-mode-alist '("\\.lua\\'" . lua-mode))

(add-to-list 'interpreter-mode-alist '("lua" . lua-mode))

(defalias 'run-lua #'lua-start-process)

(autoload 'lua-start-process "lua-mode" "\
Start a Lua process named NAME, running PROGRAM.
PROGRAM defaults to NAME, which defaults to `lua-default-application'.
When called interactively, switch to the process buffer.

\(fn &optional NAME PROGRAM STARTFILE &rest SWITCHES)" t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "lua-mode" '("lua-")))




)
(let ((load-true-file-name "/home/cam/.emacs.d/elpa/lsp-mode-8.0.0/lsp-mode-autoloads.el")(load-file-name "/home/cam/.emacs.d/elpa/lsp-mode-8.0.0/lsp-mode-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/home/cam/.emacs.d/elpa/lsp-mode-8.0.0/lsp-mode-autoloads.el") (car load-path))))



(register-definition-prefixes "lsp-actionscript" '("lsp-actionscript-"))



(register-definition-prefixes "lsp-ada" '("lsp-ada-"))



(register-definition-prefixes "lsp-angular" '("lsp-client"))



(register-definition-prefixes "lsp-bash" '("lsp-bash-"))



(register-definition-prefixes "lsp-beancount" '("lsp-beancount-"))



(autoload 'lsp-cpp-flycheck-clang-tidy-error-explainer "lsp-clangd" "\
Explain a clang-tidy ERROR by scraping documentation from llvm.org.

\(fn ERROR)" nil nil)

(register-definition-prefixes "lsp-clangd" '("lsp-c"))



(register-definition-prefixes "lsp-clojure" '("lsp-clojure-"))



(define-obsolete-variable-alias 'lsp-prefer-capf 'lsp-completion-provider "lsp-mode 7.0.1")

(define-obsolete-variable-alias 'lsp-enable-completion-at-point 'lsp-completion-enable "lsp-mode 7.0.1")

(autoload 'lsp-completion-at-point "lsp-completion" "\
Get lsp completions." nil nil)

(autoload 'lsp-completion--enable "lsp-completion" "\
Enable LSP completion support." nil nil)

(autoload 'lsp-completion-mode "lsp-completion" "\
Toggle LSP completion support.

This is a minor mode.  If called interactively, toggle the
`Lsp-Completion mode' mode.  If the prefix argument is positive,
enable the mode, and if it is zero or negative, disable the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable
the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `lsp-completion-mode'.

The mode's hook is called both when the mode is enabled and when
it is disabled.

\(fn &optional ARG)" t nil)

(add-hook 'lsp-configure-hook (lambda nil (when (and lsp-auto-configure lsp-completion-enable) (lsp-completion--enable))))

(register-definition-prefixes "lsp-completion" '("lsp-"))



(register-definition-prefixes "lsp-crystal" '("lsp-clients-crystal-executable"))



(register-definition-prefixes "lsp-csharp" '("lsp-csharp-"))



(register-definition-prefixes "lsp-css" '("lsp-css-"))



(define-obsolete-variable-alias 'lsp-diagnostic-package 'lsp-diagnostics-provider "lsp-mode 7.0.1")

(define-obsolete-variable-alias 'lsp-flycheck-default-level 'lsp-diagnostics-flycheck-default-level "lsp-mode 7.0.1")

(autoload 'lsp-diagnostics-lsp-checker-if-needed "lsp-diagnostics" nil nil nil)

(autoload 'lsp-diagnostics--enable "lsp-diagnostics" "\
Enable LSP checker support." nil nil)

(autoload 'lsp-diagnostics-mode "lsp-diagnostics" "\
Toggle LSP diagnostics integration.

This is a minor mode.  If called interactively, toggle the
`Lsp-Diagnostics mode' mode.  If the prefix argument is positive,
enable the mode, and if it is zero or negative, disable the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable
the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `lsp-diagnostics-mode'.

The mode's hook is called both when the mode is enabled and when
it is disabled.

\(fn &optional ARG)" t nil)

(add-hook 'lsp-configure-hook (lambda nil (when lsp-auto-configure (lsp-diagnostics--enable))))

(register-definition-prefixes "lsp-diagnostics" '("lsp-diagnostics-"))



(defvar lsp-dired-mode nil "\
Non-nil if Lsp-Dired mode is enabled.
See the `lsp-dired-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `lsp-dired-mode'.")

(custom-autoload 'lsp-dired-mode "lsp-dired" nil)

(autoload 'lsp-dired-mode "lsp-dired" "\
Display `lsp-mode' icons for each file in a dired buffer.

This is a minor mode.  If called interactively, toggle the
`Lsp-Dired mode' mode.  If the prefix argument is positive,
enable the mode, and if it is zero or negative, disable the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable
the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `(default-value \\='lsp-dired-mode)'.

The mode's hook is called both when the mode is enabled and when
it is disabled.

\(fn &optional ARG)" t nil)

(register-definition-prefixes "lsp-dired" '("lsp-dired-"))



(register-definition-prefixes "lsp-dockerfile" '("lsp-dockerfile-language-server-command"))



(register-definition-prefixes "lsp-elixir" '("lsp-elixir-"))



(register-definition-prefixes "lsp-elm" '("lsp-"))



(register-definition-prefixes "lsp-erlang" '("lsp-erlang-server-"))



(register-definition-prefixes "lsp-eslint" '("lsp-"))



(register-definition-prefixes "lsp-fortran" '("lsp-clients-"))



(autoload 'lsp-fsharp--workspace-load "lsp-fsharp" "\
Load all of the provided PROJECTS.

\(fn PROJECTS)" nil nil)

(register-definition-prefixes "lsp-fsharp" '("lsp-fsharp-"))



(register-definition-prefixes "lsp-gdscript" '("lsp-gdscript-"))



(register-definition-prefixes "lsp-go" '("lsp-go-"))



(register-definition-prefixes "lsp-groovy" '("lsp-groovy-"))



(register-definition-prefixes "lsp-hack" '("lsp-clients-hack-command"))



(register-definition-prefixes "lsp-haxe" '("lsp-"))



(autoload 'lsp-headerline-breadcrumb-mode "lsp-headerline" "\
Toggle breadcrumb on headerline.

This is a minor mode.  If called interactively, toggle the
`Lsp-Headerline-Breadcrumb mode' mode.  If the prefix argument is
positive, enable the mode, and if it is zero or negative, disable
the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable
the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `lsp-headerline-breadcrumb-mode'.

The mode's hook is called both when the mode is enabled and when
it is disabled.

\(fn &optional ARG)" t nil)

(autoload 'lsp-breadcrumb-go-to-symbol "lsp-headerline" "\
Go to the symbol on breadcrumb at SYMBOL-POSITION.

\(fn SYMBOL-POSITION)" t nil)

(autoload 'lsp-breadcrumb-narrow-to-symbol "lsp-headerline" "\
Narrow to the symbol range on breadcrumb at SYMBOL-POSITION.

\(fn SYMBOL-POSITION)" t nil)

(register-definition-prefixes "lsp-headerline" '("lsp-headerline-"))



(register-definition-prefixes "lsp-html" '("lsp-html-"))



(register-definition-prefixes "lsp-icons" '("lsp-"))



(autoload 'lsp-ido-workspace-symbol "lsp-ido" "\
`ido' for lsp workspace/symbol.
When called with prefix ARG the default selection will be symbol at point.

\(fn ARG)" t nil)

(register-definition-prefixes "lsp-ido" '("lsp-ido-"))



(autoload 'lsp-iedit-highlights "lsp-iedit" "\
Start an `iedit' operation on the documentHighlights at point.
This can be used as a primitive `lsp-rename' replacement if the
language server doesn't support renaming.

See also `lsp-enable-symbol-highlighting'." t nil)

(autoload 'lsp-evil-multiedit-highlights "lsp-iedit" "\
Start an `evil-multiedit' operation on the documentHighlights at point.
This can be used as a primitive `lsp-rename' replacement if the
language server doesn't support renaming.

See also `lsp-enable-symbol-highlighting'." t nil)

(register-definition-prefixes "lsp-iedit" '("lsp-iedit--on-ranges"))



(register-definition-prefixes "lsp-javascript" '("lsp-"))



(register-definition-prefixes "lsp-json" '("lsp-"))



(register-definition-prefixes "lsp-kotlin" '("lsp-"))



(autoload 'lsp-lens--enable "lsp-lens" "\
Enable lens mode." nil nil)

(autoload 'lsp-lens-show "lsp-lens" "\
Display lenses in the buffer." t nil)

(autoload 'lsp-lens-hide "lsp-lens" "\
Delete all lenses." t nil)

(autoload 'lsp-lens-mode "lsp-lens" "\
Toggle code-lens overlays.

This is a minor mode.  If called interactively, toggle the
`Lsp-Lens mode' mode.  If the prefix argument is positive, enable
the mode, and if it is zero or negative, disable the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable
the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `lsp-lens-mode'.

The mode's hook is called both when the mode is enabled and when
it is disabled.

\(fn &optional ARG)" t nil)

(autoload 'lsp-avy-lens "lsp-lens" "\
Click lsp lens using `avy' package." t nil)

(register-definition-prefixes "lsp-lens" '("lsp-"))



(register-definition-prefixes "lsp-lua" '("lsp-"))



(register-definition-prefixes "lsp-markdown" '("lsp-markdown-"))


(put 'lsp-enable-file-watchers 'safe-local-variable #'booleanp)
(put 'lsp-file-watch-threshold 'safe-local-variable (lambda (i) (or (numberp i) (not i))))

(autoload 'lsp-load-vscode-workspace "lsp-mode" "\
Load vscode workspace from FILE

\(fn FILE)" t nil)

(autoload 'lsp-save-vscode-workspace "lsp-mode" "\
Save vscode workspace to FILE

\(fn FILE)" t nil)

(autoload 'lsp-install-server "lsp-mode" "\
Interactively install server.
When prefix UPDATE? is t force installation even if the server is present.

\(fn UPDATE\\=\\? &optional SERVER-ID)" t nil)

(autoload 'lsp-ensure-server "lsp-mode" "\
Ensure server SERVER-ID

\(fn SERVER-ID)" nil nil)

(autoload 'lsp "lsp-mode" "\
Entry point for the server startup.
When ARG is t the lsp mode will start new language server even if
there is language server which can handle current language. When
ARG is nil current file will be opened in multi folder language
server if there is such. When `lsp' is called with prefix
argument ask the user to select which language server to start.

\(fn &optional ARG)" t nil)

(autoload 'lsp-deferred "lsp-mode" "\
Entry point that defers server startup until buffer is visible.
`lsp-deferred' will wait until the buffer is visible before invoking `lsp'.
This avoids overloading the server with many files when starting Emacs." nil nil)

(register-definition-prefixes "lsp-mode" '("lsp-" "make-lsp-client" "when-lsp-workspace" "with-lsp-workspace"))



(define-obsolete-variable-alias 'lsp-diagnostics-modeline-scope 'lsp-modeline-diagnostics-scope "lsp-mode 7.0.1")

(autoload 'lsp-modeline-code-actions-mode "lsp-modeline" "\
Toggle code actions on modeline.

This is a minor mode.  If called interactively, toggle the
`Lsp-Modeline-Code-Actions mode' mode.  If the prefix argument is
positive, enable the mode, and if it is zero or negative, disable
the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable
the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `lsp-modeline-code-actions-mode'.

The mode's hook is called both when the mode is enabled and when
it is disabled.

\(fn &optional ARG)" t nil)

(define-obsolete-function-alias 'lsp-diagnostics-modeline-mode 'lsp-modeline-diagnostics-mode "lsp-mode 7.0.1")

(autoload 'lsp-modeline-diagnostics-mode "lsp-modeline" "\
Toggle diagnostics modeline.

This is a minor mode.  If called interactively, toggle the
`Lsp-Modeline-Diagnostics mode' mode.  If the prefix argument is
positive, enable the mode, and if it is zero or negative, disable
the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable
the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `lsp-modeline-diagnostics-mode'.

The mode's hook is called both when the mode is enabled and when
it is disabled.

\(fn &optional ARG)" t nil)

(autoload 'lsp-modeline-workspace-status-mode "lsp-modeline" "\
Toggle workspace status on modeline.

This is a minor mode.  If called interactively, toggle the
`Lsp-Modeline-Workspace-Status mode' mode.  If the prefix
argument is positive, enable the mode, and if it is zero or
negative, disable the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable
the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `lsp-modeline-workspace-status-mode'.

The mode's hook is called both when the mode is enabled and when
it is disabled.

\(fn &optional ARG)" t nil)

(register-definition-prefixes "lsp-modeline" '("lsp-"))



(register-definition-prefixes "lsp-nix" '("lsp-nix-server-path"))



(register-definition-prefixes "lsp-ocaml" '("lsp-ocaml-l"))



(register-definition-prefixes "lsp-perl" '("lsp-perl-"))



(register-definition-prefixes "lsp-php" '("lsp-"))



(register-definition-prefixes "lsp-prolog" '("lsp-prolog-server-command"))



(register-definition-prefixes "lsp-protocol" '("dash-expand:&RangeToPoint" "lsp"))



(register-definition-prefixes "lsp-purescript" '("lsp-purescript-"))



(register-definition-prefixes "lsp-pwsh" '("lsp-pwsh-"))



(register-definition-prefixes "lsp-pyls" '("lsp-"))



(register-definition-prefixes "lsp-pylsp" '("lsp-"))



(register-definition-prefixes "lsp-r" '("lsp-clients-r-server-command"))



(register-definition-prefixes "lsp-racket" '("lsp-racket-lang"))



(register-definition-prefixes "lsp-rf" '("expand-start-command" "lsp-rf-language-server-" "parse-rf-language-server-"))



(register-definition-prefixes "lsp-rust" '("lsp-"))



(autoload 'lsp--semantic-tokens-initialize-buffer "lsp-semantic-tokens" "\
Initialize the buffer for semantic tokens.
IS-RANGE-PROVIDER is non-nil when server supports range requests." nil nil)

(autoload 'lsp--semantic-tokens-initialize-workspace "lsp-semantic-tokens" "\
Initialize semantic tokens for WORKSPACE.

\(fn WORKSPACE)" nil nil)

(autoload 'lsp-semantic-tokens--warn-about-deprecated-setting "lsp-semantic-tokens" "\
Warn about deprecated semantic highlighting variable." nil nil)

(autoload 'lsp-semantic-tokens--enable "lsp-semantic-tokens" "\
Enable semantic tokens mode." nil nil)

(autoload 'lsp-semantic-tokens-mode "lsp-semantic-tokens" "\
Toggle semantic-tokens support.

This is a minor mode.  If called interactively, toggle the
`Lsp-Semantic-Tokens mode' mode.  If the prefix argument is
positive, enable the mode, and if it is zero or negative, disable
the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable
the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `lsp-semantic-tokens-mode'.

The mode's hook is called both when the mode is enabled and when
it is disabled.

\(fn &optional ARG)" t nil)

(register-definition-prefixes "lsp-semantic-tokens" '("lsp-"))



(register-definition-prefixes "lsp-solargraph" '("lsp-solargraph-"))



(register-definition-prefixes "lsp-sorbet" '("lsp-sorbet-"))



(register-definition-prefixes "lsp-sqls" '("lsp-sql"))



(register-definition-prefixes "lsp-steep" '("lsp-steep-"))



(register-definition-prefixes "lsp-svelte" '("lsp-svelte-plugin-"))



(register-definition-prefixes "lsp-terraform" '("lsp-terraform-"))



(register-definition-prefixes "lsp-tex" '("lsp-"))



(register-definition-prefixes "lsp-v" '("lsp-v-vls-executable"))



(register-definition-prefixes "lsp-vala" '("lsp-clients-vala-ls-executable"))



(register-definition-prefixes "lsp-verilog" '("lsp-clients-"))



(register-definition-prefixes "lsp-vetur" '("lsp-"))



(register-definition-prefixes "lsp-vhdl" '("ghdl-ls-bin-name" "hdl-checker-bin-name" "lsp-vhdl-" "vhdl-"))



(register-definition-prefixes "lsp-vimscript" '("lsp-clients-vim-"))



(register-definition-prefixes "lsp-xml" '("lsp-xml-"))



(register-definition-prefixes "lsp-yaml" '("lsp-yaml-"))



(register-definition-prefixes "lsp-zig" '("lsp-zig-zls-executable"))




)
(let ((load-true-file-name "/home/cam/.emacs.d/elpa/lsp-ui-8.0.1/lsp-ui-autoloads.el")(load-file-name "/home/cam/.emacs.d/elpa/lsp-ui-8.0.1/lsp-ui-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/home/cam/.emacs.d/elpa/lsp-ui-8.0.1/lsp-ui-autoloads.el") (car load-path))))



(autoload 'lsp-ui-mode "lsp-ui" "\
Toggle language server UI mode on or off.
‘lsp-ui-mode’ is a minor mode that contains a series of useful UI
integrations for ‘lsp-mode’.  With a prefix argument ARG, enable
language server UI mode if ARG is positive, and disable it
otherwise.  If called from Lisp, enable the mode if ARG is
omitted or nil, and toggle it if ARG is ‘toggle’.

\(fn &optional ARG)" t nil)

(register-definition-prefixes "lsp-ui" '("lsp-ui-"))



(register-definition-prefixes "lsp-ui-doc" '("lsp-ui-doc-"))



(register-definition-prefixes "lsp-ui-flycheck" '("lsp-ui-flycheck-"))



(register-definition-prefixes "lsp-ui-imenu" '("lsp-ui-imenu" "overlay-priority"))



(register-definition-prefixes "lsp-ui-peek" '("lsp-"))



(register-definition-prefixes "lsp-ui-sideline" '("lsp-ui-sideline"))



(register-definition-prefixes "lsp-ui-util" '("lsp-ui-util-"))




)
(let ((load-true-file-name "/home/cam/.emacs.d/elpa/lsp-treemacs-0.4/lsp-treemacs-autoloads.el")(load-file-name "/home/cam/.emacs.d/elpa/lsp-treemacs-0.4/lsp-treemacs-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/home/cam/.emacs.d/elpa/lsp-treemacs-0.4/lsp-treemacs-autoloads.el") (car load-path))))



(autoload 'lsp-treemacs-symbols "lsp-treemacs" "\
Show symbols view." t nil)

(autoload 'lsp-treemacs-java-deps-list "lsp-treemacs" "\
Display java dependencies." t nil)

(autoload 'lsp-treemacs-java-deps-follow "lsp-treemacs" nil t nil)

(defvar lsp-treemacs-sync-mode nil "\
Non-nil if Lsp-Treemacs-Sync mode is enabled.
See the `lsp-treemacs-sync-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `lsp-treemacs-sync-mode'.")

(custom-autoload 'lsp-treemacs-sync-mode "lsp-treemacs" nil)

(autoload 'lsp-treemacs-sync-mode "lsp-treemacs" "\
Global minor mode for synchronizing lsp-mode workspace folders and treemacs projects.

This is a minor mode.  If called interactively, toggle the
`Lsp-Treemacs-Sync mode' mode.  If the prefix argument is
positive, enable the mode, and if it is zero or negative, disable
the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable
the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `(default-value \\='lsp-treemacs-sync-mode)'.

The mode's hook is called both when the mode is enabled and when
it is disabled.

\(fn &optional ARG)" t nil)

(autoload 'lsp-treemacs-references "lsp-treemacs" "\
Show the references for the symbol at point.
With a prefix argument, select the new window and expand the tree of references automatically.

\(fn ARG)" t nil)

(autoload 'lsp-treemacs-implementations "lsp-treemacs" "\
Show the implementations for the symbol at point.
With a prefix argument, select the new window expand the tree of implementations automatically.

\(fn ARG)" t nil)

(autoload 'lsp-treemacs-call-hierarchy "lsp-treemacs" "\
Show the incoming call hierarchy for the symbol at point.
With a prefix argument, show the outgoing call hierarchy.

\(fn OUTGOING)" t nil)

(autoload 'lsp-treemacs-type-hierarchy "lsp-treemacs" "\
Show the type hierarchy for the symbol at point.
With prefix 0 show sub-types.
With prefix 1 show super-types.
With prefix 2 show both.

\(fn DIRECTION)" t nil)

(autoload 'lsp-treemacs-errors-list "lsp-treemacs" nil t nil)

(register-definition-prefixes "lsp-treemacs" '("lsp-tree"))



(register-definition-prefixes "lsp-treemacs-themes" '("lsp-treemacs-theme"))




)
(let ((load-true-file-name "/home/cam/.emacs.d/elpa/light-soap-theme-20150607.1445/light-soap-theme-autoloads.el")(load-file-name "/home/cam/.emacs.d/elpa/light-soap-theme-20150607.1445/light-soap-theme-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/home/cam/.emacs.d/elpa/light-soap-theme-20150607.1445/light-soap-theme-autoloads.el") (car load-path))))



(when load-file-name (add-to-list 'custom-theme-load-path (file-name-as-directory (file-name-directory load-file-name))))




)
(let ((load-true-file-name "/home/cam/.emacs.d/elpa/leuven-theme-20231108.1108/leuven-theme-autoloads.el")(load-file-name "/home/cam/.emacs.d/elpa/leuven-theme-20231108.1108/leuven-theme-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/home/cam/.emacs.d/elpa/leuven-theme-20231108.1108/leuven-theme-autoloads.el") (car load-path))))



(autoload 'leuven-dark-scale-font "leuven-dark-theme" "\
Function for splicing optional font heights into face descriptions.
CONTROL can be a number, nil, or t.  When t, use DEFAULT-HEIGHT.

\(fn CONTROL DEFAULT-HEIGHT)" nil nil)

(when (and (boundp 'custom-theme-load-path) load-file-name) (add-to-list 'custom-theme-load-path (file-name-as-directory (file-name-directory load-file-name))))

(register-definition-prefixes "leuven-dark-theme" '("leuven-dark"))



(autoload 'leuven-scale-font "leuven-theme" "\
Function for splicing optional font heights into face descriptions.
CONTROL can be a number, nil, or t.  When t, use DEFAULT-HEIGHT.

\(fn CONTROL DEFAULT-HEIGHT)" nil nil)

(when (and (boundp 'custom-theme-load-path) load-file-name) (add-to-list 'custom-theme-load-path (file-name-as-directory (file-name-directory load-file-name))))

(register-definition-prefixes "leuven-theme" '("leuven"))




)
(let ((load-true-file-name "/home/cam/.emacs.d/elpa/legalese-20200119.2248/legalese-autoloads.el")(load-file-name "/home/cam/.emacs.d/elpa/legalese-20200119.2248/legalese-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/home/cam/.emacs.d/elpa/legalese-20200119.2248/legalese-autoloads.el") (car load-path))))



(autoload 'legalese "legalese" "\
Add standard legalese prelude to the current buffer.

With prefix-argument ASK, ask for a license to use.

\(fn ASK)" t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "legalese" '("legalese-")))




)
(let ((load-true-file-name "/home/cam/.emacs.d/elpa/keyfreq-20231107.106/keyfreq-autoloads.el")(load-file-name "/home/cam/.emacs.d/elpa/keyfreq-20231107.106/keyfreq-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/home/cam/.emacs.d/elpa/keyfreq-20231107.106/keyfreq-autoloads.el") (car load-path))))



(defvar keyfreq-mode nil "\
Non-nil if Keyfreq mode is enabled.
See the `keyfreq-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `keyfreq-mode'.")

(custom-autoload 'keyfreq-mode "keyfreq" nil)

(autoload 'keyfreq-mode "keyfreq" "\
Keyfreq mode records number of times each command was
called making it possible to access usage statistics through
various keyfreq-* functions.

If called interactively, enable Keyfreq mode if ARG is positive,
and disable it if ARG is zero or negative.  If called from Lisp,
also enable the mode if ARG is omitted or nil, and toggle it if
ARG is `toggle'; disable the mode otherwise.

\(fn &optional ARG)" t nil)

(defvar keyfreq-autosave-mode nil "\
Non-nil if Keyfreq-Autosave mode is enabled.
See the `keyfreq-autosave-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `keyfreq-autosave-mode'.")

(custom-autoload 'keyfreq-autosave-mode "keyfreq" nil)

(autoload 'keyfreq-autosave-mode "keyfreq" "\
Keyfreq Autosave mode automatically saves
`keyfreq-table' every `keyfreq-autosave-timeout' seconds
and when emacs is killed.

If called interactively, enable Keyfreq-Autosave mode if ARG is
positive, and disable it if ARG is zero or negative.  If called
from Lisp, also enable the mode if ARG is omitted or nil, and
toggle it if ARG is `toggle'; disable the mode otherwise.

\(fn &optional ARG)" t nil)

(autoload 'keyfreq-save-now "keyfreq" "\
Save keyfreq data now." t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "keyfreq" '("keyfreq-")))




)
(let ((load-true-file-name "/home/cam/.emacs.d/elpa/kaolin-themes-20231004.243/kaolin-themes-autoloads.el")(load-file-name "/home/cam/.emacs.d/elpa/kaolin-themes-20231004.243/kaolin-themes-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/home/cam/.emacs.d/elpa/kaolin-themes-20231004.243/kaolin-themes-autoloads.el") (car load-path))))



(register-definition-prefixes "kaolin-aurora-theme" '("aurora"))



(register-definition-prefixes "kaolin-blossom-theme" '("blossom" "kaolin-blossom-bg"))



(register-definition-prefixes "kaolin-breeze-theme" '("breeze"))



(register-definition-prefixes "kaolin-bubblegum-theme" '("bubblegum"))



(register-definition-prefixes "kaolin-dark-theme" '("dark"))



(register-definition-prefixes "kaolin-eclipse-theme" '("eclipse" "kaolin-eclipse-alt-bg"))



(register-definition-prefixes "kaolin-galaxy-theme" '("galaxy" "kaolin-galaxy-alt-bg"))



(register-definition-prefixes "kaolin-light-theme" '("kaolin-light-alt-bg" "light"))



(register-definition-prefixes "kaolin-mono-dark-theme" '("mono-dark"))



(register-definition-prefixes "kaolin-mono-light-theme" '("kaolin-mono-light-alt-bg" "mono-light"))



(register-definition-prefixes "kaolin-ocean-theme" '("kaolin-ocean-alt-bg" "ocean"))



(register-definition-prefixes "kaolin-shiva-theme" '("kaolin-shiva-" "shiva"))



(register-definition-prefixes "kaolin-temple-theme" '("temple"))



(autoload 'kaolin-treemacs-theme "kaolin-themes" "\
Enable kaolin-themes treemacs theme with all-the-icons package." nil nil)

(when (and (boundp 'custom-theme-load-path) load-file-name) (let* ((base (file-name-directory load-file-name)) (dir (expand-file-name "themes/" base))) (add-to-list 'custom-theme-load-path (or (and (file-directory-p dir) dir) base))))

(register-definition-prefixes "kaolin-themes" '("define-kaolin-theme" "kaolin-theme"))



(register-definition-prefixes "kaolin-themes-lib" '("kaolin-"))



(register-definition-prefixes "kaolin-themes-treemacs" '("kaolin-t"))



(register-definition-prefixes "kaolin-valley-dark-theme" '("kaolin-valley-dark-alt-" "valley-dark"))



(register-definition-prefixes "kaolin-valley-light-theme" '("kaolin-valley-light-alt-bg" "valley-light"))




)
(let ((load-true-file-name "/home/cam/.emacs.d/elpa/findr-20130127.2032/findr-autoloads.el")(load-file-name "/home/cam/.emacs.d/elpa/findr-20130127.2032/findr-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/home/cam/.emacs.d/elpa/findr-20130127.2032/findr-autoloads.el") (car load-path))))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "findr" '("findr")))




)
(let ((load-true-file-name "/home/cam/.emacs.d/elpa/inflections-20210110.2237/inflections-autoloads.el")(load-file-name "/home/cam/.emacs.d/elpa/inflections-20210110.2237/inflections-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/home/cam/.emacs.d/elpa/inflections-20210110.2237/inflections-autoloads.el") (car load-path))))



(autoload 'inflection-singularize-string "inflections" "\
Return the singularized version of STR.

\(fn STR)" nil nil)

(define-obsolete-function-alias 'singularize-string 'inflection-singularize-string "2.6")

(autoload 'inflection-pluralize-string "inflections" "\
Return the pluralized version of STR.

\(fn STR)" nil nil)

(define-obsolete-function-alias 'pluralize-string 'inflection-pluralize-string "2.6")

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "inflections" '("define-inflectors" "inflection-")))




)
(let ((load-true-file-name "/home/cam/.emacs.d/elpa/jump-2.6/jump-autoloads.el")(load-file-name "/home/cam/.emacs.d/elpa/jump-2.6/jump-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/home/cam/.emacs.d/elpa/jump-2.6/jump-autoloads.el") (car load-path))))



(autoload 'defjump "jump" "\
Define NAME as a function with behavior determined by SPECS.
SPECS should be a list of cons cells of the form

   (jump-from-spec . jump-to-spec)

NAME will then try subsequent jump-from-specs until one succeeds,
at which point any resulting match information, along with the
related jump-to-spec will be used to jump to the intended buffer.
See `jump-to' and `jump-from' for information on spec
construction.

ROOT should specify the root of the project in which all jumps
take place, it can be either a string directory path, or a
function returning

Optional argument DOC specifies the documentation of the
resulting function.

Optional argument MAKE can be used to specify that missing files
should be created.  If MAKE is a function then it will be called
with the file path as it's only argument.  After possibly calling
MAKE `find-file' will be used to open the path.

Optional argument METHOD-COMMAND overrides the function used to
find the current method which defaults to `which-function'.

\(fn NAME SPECS ROOT &optional DOC MAKE METHOD-COMMAND)" nil t)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "jump" '("jump-")))




)
(let ((load-true-file-name "/home/cam/.emacs.d/elpa/js-doc-20160715.434/js-doc-autoloads.el")(load-file-name "/home/cam/.emacs.d/elpa/js-doc-20160715.434/js-doc-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/home/cam/.emacs.d/elpa/js-doc-20160715.434/js-doc-autoloads.el") (car load-path))))



(autoload 'js-doc-insert-file-doc "js-doc" "\
Insert specified-style comment top of the file" t nil)

(autoload 'js-doc-insert-function-doc "js-doc" "\
Insert JsDoc style comment of the function
The comment style can be custimized via `customize-group js-doc'" t nil)

(autoload 'js-doc-insert-function-doc-snippet "js-doc" "\
Insert JsDoc style comment of the function with yasnippet." t nil)

(autoload 'js-doc-insert-tag "js-doc" "\
Insert a JsDoc tag interactively." t nil)

(autoload 'js-doc-describe-tag "js-doc" "\
Describe the JsDoc tag" t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "js-doc" '("js-doc-")))




)
(let ((load-true-file-name "/home/cam/.emacs.d/elpa/jbeans-theme-20200924.1946/jbeans-theme-autoloads.el")(load-file-name "/home/cam/.emacs.d/elpa/jbeans-theme-20200924.1946/jbeans-theme-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/home/cam/.emacs.d/elpa/jbeans-theme-20200924.1946/jbeans-theme-autoloads.el") (car load-path))))



(when load-file-name (add-to-list 'custom-theme-load-path (file-name-as-directory (file-name-directory load-file-name))))

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "jbeans-theme" '("jbeans")))




)
(let ((load-true-file-name "/home/cam/.emacs.d/elpa/jazz-theme-20230814.1916/jazz-theme-autoloads.el")(load-file-name "/home/cam/.emacs.d/elpa/jazz-theme-20230814.1916/jazz-theme-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/home/cam/.emacs.d/elpa/jazz-theme-20230814.1916/jazz-theme-autoloads.el") (car load-path))))



(when load-file-name (add-to-list 'custom-theme-load-path (file-name-as-directory (file-name-directory load-file-name))))

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "jazz-theme" '("jazz")))




)
(let ((load-true-file-name "/home/cam/.emacs.d/elpa/jade-mode-1.0.1/jade-mode-autoloads.el")(load-file-name "/home/cam/.emacs.d/elpa/jade-mode-1.0.1/jade-mode-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/home/cam/.emacs.d/elpa/jade-mode-1.0.1/jade-mode-autoloads.el") (car load-path))))



(autoload 'jade-mode "jade-mode" "\
Major mode for editing jade node.js templates

\(fn)" t nil)

(add-to-list 'auto-mode-alist '("\\.jade\\'" . jade-mode))

(add-to-list 'auto-mode-alist '("\\.pug\\'" . jade-mode))

(register-definition-prefixes "jade-mode" '("jade-"))



(autoload 'sws-mode "sws-mode" "\
Major mode for editing significant whitespace files

\(fn)" t nil)

(register-definition-prefixes "sws-mode" '("sws-"))




)
(let ((load-true-file-name "/home/cam/.emacs.d/elpa/ivy-posframe-0.6.3/ivy-posframe-autoloads.el")(load-file-name "/home/cam/.emacs.d/elpa/ivy-posframe-0.6.3/ivy-posframe-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/home/cam/.emacs.d/elpa/ivy-posframe-0.6.3/ivy-posframe-autoloads.el") (car load-path))))



(defvar ivy-posframe-mode nil "\
Non-nil if Ivy-Posframe mode is enabled.
See the `ivy-posframe-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `ivy-posframe-mode'.")

(custom-autoload 'ivy-posframe-mode "ivy-posframe" nil)

(autoload 'ivy-posframe-mode "ivy-posframe" "\
Display ivy via posframe.

If called interactively, enable Ivy-Posframe mode if ARG is
positive, and disable it if ARG is zero or negative.  If called
from Lisp, also enable the mode if ARG is omitted or nil, and
toggle it if ARG is `toggle'; disable the mode otherwise.

\(fn &optional ARG)" t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "ivy-posframe" '("ivy-posframe-")))




)
(let ((load-true-file-name "/home/cam/.emacs.d/elpa/ivy-hydra-0.14.2/ivy-hydra-autoloads.el")(load-file-name "/home/cam/.emacs.d/elpa/ivy-hydra-0.14.2/ivy-hydra-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/home/cam/.emacs.d/elpa/ivy-hydra-0.14.2/ivy-hydra-autoloads.el") (car load-path))))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "ivy-hydra" '("hydra-ivy" "ivy-")))




)
(let ((load-true-file-name "/home/cam/.emacs.d/elpa/ir-black-theme-20130303.755/ir-black-theme-autoloads.el")(load-file-name "/home/cam/.emacs.d/elpa/ir-black-theme-20130303.755/ir-black-theme-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/home/cam/.emacs.d/elpa/ir-black-theme-20130303.755/ir-black-theme-autoloads.el") (car load-path))))



(when (and (boundp 'custom-theme-load-path) load-file-name) (add-to-list 'custom-theme-load-path (file-name-as-directory (file-name-directory load-file-name))))

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "ir-black-theme" '("ir-black")))




)
(let ((load-true-file-name "/home/cam/.emacs.d/elpa/inkpot-theme-20230618.715/inkpot-theme-autoloads.el")(load-file-name "/home/cam/.emacs.d/elpa/inkpot-theme-20230618.715/inkpot-theme-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/home/cam/.emacs.d/elpa/inkpot-theme-20230618.715/inkpot-theme-autoloads.el") (car load-path))))



(when load-file-name (add-to-list 'custom-theme-load-path (file-name-as-directory (file-name-directory load-file-name))))

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "inkpot-theme" '("inkpot")))




)
(let ((load-true-file-name "/home/cam/.emacs.d/elpa/iedit-20220216.717/iedit-autoloads.el")(load-file-name "/home/cam/.emacs.d/elpa/iedit-20220216.717/iedit-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/home/cam/.emacs.d/elpa/iedit-20220216.717/iedit-autoloads.el") (car load-path))))



(autoload 'iedit-mode "iedit" "\
Toggle Iedit mode.
This command behaves differently, depending on the mark, point,
prefix argument and variable `iedit-transient-mark-sensitive'.

If Iedit mode is off, turn Iedit mode on.

When Iedit mode is turned on, all the occurrences of the current
region in the buffer (possibly narrowed) or a region are
highlighted.  If one occurrence is modified, the change are
propagated to all other occurrences simultaneously.

If region is not active, `iedit-default-occurrence' is called to
get an occurrence candidate, according to the thing at point.  It
might be url, email address, markup tag or current symbol(or
word).

In the above two situations, with digit prefix argument 0, only
occurrences in current function are matched.  This is good for
renaming refactoring in programming.

You can also switch to Iedit mode from isearch mode directly. The
current search string is used as occurrence.  All occurrences of
the current search string are highlighted.

With an universal prefix argument, the occurrence when Iedit mode
is turned off last time in current buffer is used as occurrence.
This is intended to recover last Iedit mode which is turned off.
If region active, Iedit mode is limited within the current
region.

With repeated universal prefix argument, the occurrence when
Iedit mode is turned off last time (might be in other buffer) is
used as occurrence.  If region active, Iedit mode is limited
within the current region.

With digital prefix argument 1, Iedit mode is limited on the
current symbol or the active region, which means just one
instance is highlighted.  This behavior serves as a start point
of incremental selection work flow.

If Iedit mode is on and region is active, Iedit mode is
restricted in the region, e.g. the occurrences outside of the
region is excluded.

If Iedit mode is on and region is active, with an universal
prefix argument, Iedit mode is restricted outside of the region,
e.g. the occurrences in the region is excluded.

Turn off Iedit mode in other situations.

Commands:
\\{iedit-mode-keymap}
Keymap used within overlays:
\\{iedit-mode-occurrence-keymap}

\(fn &optional ARG)" t nil)

(autoload 'iedit-mode-from-isearch "iedit" "\
Start Iedit mode using last search string as the regexp.

\(fn &optional ARG)" t nil)

(autoload 'iedit-mode-toggle-on-function "iedit" "\
Toggle Iedit mode on current function." t nil)

(autoload 'iedit-execute-last-modification "iedit" "\
Apply last modification in Iedit mode to the current buffer or an active region.

\(fn &optional ARG)" t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "iedit" '("iedit-")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "iedit-lib" '("iedit-")))



(autoload 'iedit-rectangle-mode "iedit-rect" "\
Toggle Iedit-rect mode.

When Iedit-rect mode is on, a rectangle is started with visible
rectangle highlighting.  Rectangle editing support is based on
Iedit mechanism.

Commands:
\\{iedit-rect-keymap}

\(fn &optional BEG END)" t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "iedit-rect" '("iedit-rect")))




)
(let ((load-true-file-name "/home/cam/.emacs.d/elpa/highlight-symbol-20160102.2009/highlight-symbol-autoloads.el")(load-file-name "/home/cam/.emacs.d/elpa/highlight-symbol-20160102.2009/highlight-symbol-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/home/cam/.emacs.d/elpa/highlight-symbol-20160102.2009/highlight-symbol-autoloads.el") (car load-path))))



(autoload 'highlight-symbol-mode "highlight-symbol" "\
Minor mode that highlights the symbol under point throughout the buffer.
Highlighting takes place after `highlight-symbol-idle-delay'.

If called interactively, enable Highlight-Symbol mode if ARG is
positive, and disable it if ARG is zero or negative.  If called
from Lisp, also enable the mode if ARG is omitted or nil, and
toggle it if ARG is `toggle'; disable the mode otherwise.

\(fn &optional ARG)" t nil)

(defalias 'highlight-symbol-at-point 'highlight-symbol)

(autoload 'highlight-symbol "highlight-symbol" "\
Toggle highlighting of the symbol at point.
This highlights or unhighlights the symbol at point using the first
element in of `highlight-symbol-faces'.

\(fn &optional SYMBOL)" t nil)

(autoload 'highlight-symbol-remove-all "highlight-symbol" "\
Remove symbol highlighting in buffer." t nil)

(autoload 'highlight-symbol-list-all "highlight-symbol" "\
List all symbols highlighted in the buffer." t nil)

(autoload 'highlight-symbol-count "highlight-symbol" "\
Print the number of occurrences of symbol at point.

\(fn &optional SYMBOL MESSAGE-P)" t nil)

(autoload 'highlight-symbol-next "highlight-symbol" "\
Jump to the next location of the symbol at point within the buffer." t nil)

(autoload 'highlight-symbol-prev "highlight-symbol" "\
Jump to the previous location of the symbol at point within the buffer." t nil)

(autoload 'highlight-symbol-next-in-defun "highlight-symbol" "\
Jump to the next location of the symbol at point within the defun." t nil)

(autoload 'highlight-symbol-prev-in-defun "highlight-symbol" "\
Jump to the previous location of the symbol at point within the defun." t nil)

(autoload 'highlight-symbol-nav-mode "highlight-symbol" "\
Navigate occurrences of the symbol at point.

When called interactively, toggle `highlight-symbol-nav-mode'.
With prefix ARG, enable `highlight-symbol-nav-mode' if ARG is
positive, otherwise disable it.

When called from Lisp, enable `highlight-symbol-nav-mode' if ARG
is omitted, nil or positive.  If ARG is `toggle', toggle
`highlight-symbol-nav-mode'.  Otherwise behave as if called
interactively.

In `highlight-symbol-nav-mode' provide the following key bindings
to navigate between occurrences of the symbol at point in the
current buffer.

\\{highlight-symbol-nav-mode-map}

\(fn &optional ARG)" t nil)

(autoload 'highlight-symbol-query-replace "highlight-symbol" "\
Replace the symbol at point with REPLACEMENT.

\(fn REPLACEMENT)" t nil)

(autoload 'highlight-symbol-occur "highlight-symbol" "\
Call `occur' with the symbol at point.
Each line is displayed with NLINES lines before and after, or -NLINES
before if NLINES is negative.

\(fn &optional NLINES)" t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "highlight-symbol" '("highlight-symbol")))




)
(let ((load-true-file-name "/home/cam/.emacs.d/elpa/highlight-indentation-0.7.0/highlight-indentation-autoloads.el")(load-file-name "/home/cam/.emacs.d/elpa/highlight-indentation-0.7.0/highlight-indentation-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/home/cam/.emacs.d/elpa/highlight-indentation-0.7.0/highlight-indentation-autoloads.el") (car load-path))))



(autoload 'highlight-indentation-mode "highlight-indentation" "\
Highlight indentation minor mode highlights indentation based on spaces

If called interactively, enable Highlight-Indentation mode if ARG
is positive, and disable it if ARG is zero or negative.  If
called from Lisp, also enable the mode if ARG is omitted or nil,
and toggle it if ARG is `toggle'; disable the mode otherwise.

\(fn &optional ARG)" t nil)

(autoload 'highlight-indentation-set-offset "highlight-indentation" "\
Set indentation offset localy in buffer, will prevent
highlight-indentation from trying to guess indentation offset
from major mode

\(fn OFFSET)" t nil)

(autoload 'highlight-indentation-current-column-mode "highlight-indentation" "\
Hilight Indentation minor mode displays a vertical bar
corresponding to the indentation of the current line

If called interactively, enable
Highlight-Indentation-Current-Column mode if ARG is positive, and
disable it if ARG is zero or negative.  If called from Lisp, also
enable the mode if ARG is omitted or nil, and toggle it if ARG is
`toggle'; disable the mode otherwise.

\(fn &optional ARG)" t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "highlight-indentation" '("highlight-indentation-")))




)
(let ((load-true-file-name "/home/cam/.emacs.d/elpa/heroku-theme-20150523.219/heroku-theme-autoloads.el")(load-file-name "/home/cam/.emacs.d/elpa/heroku-theme-20150523.219/heroku-theme-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/home/cam/.emacs.d/elpa/heroku-theme-20150523.219/heroku-theme-autoloads.el") (car load-path))))



(and load-file-name (boundp 'custom-theme-load-path) (add-to-list 'custom-theme-load-path (file-name-as-directory (file-name-directory load-file-name))))

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "heroku-theme" '("heroku")))




)
(let ((load-true-file-name "/home/cam/.emacs.d/elpa/hemisu-theme-20130508.1844/hemisu-theme-autoloads.el")(load-file-name "/home/cam/.emacs.d/elpa/hemisu-theme-20130508.1844/hemisu-theme-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/home/cam/.emacs.d/elpa/hemisu-theme-20130508.1844/hemisu-theme-autoloads.el") (car load-path))))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "hemisu-dark-theme" '("hemisu-dark")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "hemisu-light-theme" '("hemisu-light")))



(when (and (boundp 'custom-theme-load-path) load-file-name) (add-to-list 'custom-theme-load-path (file-name-as-directory (file-name-directory load-file-name))))

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "hemisu-theme" '("create-hemisu-theme")))




)
(let ((load-true-file-name "/home/cam/.emacs.d/elpa/elisp-refs-1.5/elisp-refs-autoloads.el")(load-file-name "/home/cam/.emacs.d/elpa/elisp-refs-1.5/elisp-refs-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/home/cam/.emacs.d/elpa/elisp-refs-1.5/elisp-refs-autoloads.el") (car load-path))))



(autoload 'elisp-refs-function "elisp-refs" "\
Display all the references to function SYMBOL, in all loaded
elisp files.

If called with a prefix, prompt for a directory to limit the search.

This searches for functions, not macros. For that, see
`elisp-refs-macro'.

\(fn SYMBOL &optional PATH-PREFIX)" t nil)

(autoload 'elisp-refs-macro "elisp-refs" "\
Display all the references to macro SYMBOL, in all loaded
elisp files.

If called with a prefix, prompt for a directory to limit the search.

This searches for macros, not functions. For that, see
`elisp-refs-function'.

\(fn SYMBOL &optional PATH-PREFIX)" t nil)

(autoload 'elisp-refs-special "elisp-refs" "\
Display all the references to special form SYMBOL, in all loaded
elisp files.

If called with a prefix, prompt for a directory to limit the search.

\(fn SYMBOL &optional PATH-PREFIX)" t nil)

(autoload 'elisp-refs-variable "elisp-refs" "\
Display all the references to variable SYMBOL, in all loaded
elisp files.

If called with a prefix, prompt for a directory to limit the search.

\(fn SYMBOL &optional PATH-PREFIX)" t nil)

(autoload 'elisp-refs-symbol "elisp-refs" "\
Display all the references to SYMBOL in all loaded elisp files.

If called with a prefix, prompt for a directory to limit the
search.

\(fn SYMBOL &optional PATH-PREFIX)" t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "elisp-refs" '("elisp-")))




)
(let ((load-true-file-name "/home/cam/.emacs.d/elpa/helpful-20231028.516/helpful-autoloads.el")(load-file-name "/home/cam/.emacs.d/elpa/helpful-20231028.516/helpful-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/home/cam/.emacs.d/elpa/helpful-20231028.516/helpful-autoloads.el") (car load-path))))



(autoload 'helpful-function "helpful" "\
Show help for function named SYMBOL.

See also `helpful-macro', `helpful-command' and `helpful-callable'.

\(fn SYMBOL)" t nil)

(autoload 'helpful-command "helpful" "\
Show help for interactive function named SYMBOL.

See also `helpful-function'.

\(fn SYMBOL)" t nil)

(autoload 'helpful-key "helpful" "\
Show help for interactive command bound to KEY-SEQUENCE.

\(fn KEY-SEQUENCE)" t nil)

(autoload 'helpful-macro "helpful" "\
Show help for macro named SYMBOL.

\(fn SYMBOL)" t nil)

(autoload 'helpful-callable "helpful" "\
Show help for function, macro or special form named SYMBOL.

See also `helpful-macro', `helpful-function' and `helpful-command'.

\(fn SYMBOL)" t nil)

(autoload 'helpful-symbol "helpful" "\
Show help for SYMBOL, a variable, function, macro, or face.

See also `helpful-callable' and `helpful-variable'.

\(fn SYMBOL)" t nil)

(autoload 'helpful-variable "helpful" "\
Show help for variable named SYMBOL.

\(fn SYMBOL)" t nil)

(autoload 'helpful-at-point "helpful" "\
Show help for the symbol at point." t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "helpful" '("helpful-")))




)
(let ((load-true-file-name "/home/cam/.emacs.d/elpa/hc-zenburn-theme-20150928.1633/hc-zenburn-theme-autoloads.el")(load-file-name "/home/cam/.emacs.d/elpa/hc-zenburn-theme-20150928.1633/hc-zenburn-theme-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/home/cam/.emacs.d/elpa/hc-zenburn-theme-20150928.1633/hc-zenburn-theme-autoloads.el") (car load-path))))



(and load-file-name (boundp 'custom-theme-load-path) (add-to-list 'custom-theme-load-path (file-name-as-directory (file-name-directory load-file-name))))

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "hc-zenburn-theme" '("hc-zenburn")))




)
(let ((load-true-file-name "/home/cam/.emacs.d/elpa/haml-mode-3.2.1/haml-mode-autoloads.el")(load-file-name "/home/cam/.emacs.d/elpa/haml-mode-3.2.1/haml-mode-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/home/cam/.emacs.d/elpa/haml-mode-3.2.1/haml-mode-autoloads.el") (car load-path))))



(autoload 'haml-mode "haml-mode" "\
Major mode for editing Haml files.

\\{haml-mode-map}

\(fn)" t nil)

(add-to-list 'auto-mode-alist '("\\.haml\\'" . haml-mode))

(register-definition-prefixes "haml-mode" '("haml-"))




)
(let ((load-true-file-name "/home/cam/.emacs.d/elpa/gruvbox-theme-20230921.120/gruvbox-theme-autoloads.el")(load-file-name "/home/cam/.emacs.d/elpa/gruvbox-theme-20230921.120/gruvbox-theme-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/home/cam/.emacs.d/elpa/gruvbox-theme-20230921.120/gruvbox-theme-autoloads.el") (car load-path))))



(and load-file-name (boundp 'custom-theme-load-path) (add-to-list 'custom-theme-load-path (file-name-as-directory (file-name-directory load-file-name))))

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "gruvbox" '("gruvbox-")))



(and load-file-name (boundp 'custom-theme-load-path) (add-to-list 'custom-theme-load-path (file-name-as-directory (file-name-directory load-file-name))))



(and load-file-name (boundp 'custom-theme-load-path) (add-to-list 'custom-theme-load-path (file-name-as-directory (file-name-directory load-file-name))))



(and load-file-name (boundp 'custom-theme-load-path) (add-to-list 'custom-theme-load-path (file-name-as-directory (file-name-directory load-file-name))))



(and load-file-name (boundp 'custom-theme-load-path) (add-to-list 'custom-theme-load-path (file-name-as-directory (file-name-directory load-file-name))))



(and load-file-name (boundp 'custom-theme-load-path) (add-to-list 'custom-theme-load-path (file-name-as-directory (file-name-directory load-file-name))))



(and load-file-name (boundp 'custom-theme-load-path) (add-to-list 'custom-theme-load-path (file-name-as-directory (file-name-directory load-file-name))))



(and load-file-name (boundp 'custom-theme-load-path) (add-to-list 'custom-theme-load-path (file-name-as-directory (file-name-directory load-file-name))))




)
(let ((load-true-file-name "/home/cam/.emacs.d/elpa/gruber-darker-theme-20231026.2031/gruber-darker-theme-autoloads.el")(load-file-name "/home/cam/.emacs.d/elpa/gruber-darker-theme-20231026.2031/gruber-darker-theme-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/home/cam/.emacs.d/elpa/gruber-darker-theme-20231026.2031/gruber-darker-theme-autoloads.el") (car load-path))))



(when load-file-name (add-to-list 'custom-theme-load-path (file-name-as-directory (file-name-directory load-file-name))))

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "gruber-darker-theme" '("gruber-darker")))




)
(let ((load-true-file-name "/home/cam/.emacs.d/elpa/groovy-mode-20230318.533/groovy-mode-autoloads.el")(load-file-name "/home/cam/.emacs.d/elpa/groovy-mode-20230318.533/groovy-mode-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/home/cam/.emacs.d/elpa/groovy-mode-20230318.533/groovy-mode-autoloads.el") (car load-path))))



(autoload 'groovy-electric-mode "groovy-electric" "\
Toggle Groovy Electric minor mode.
With no argument, this command toggles the mode.  Non-null prefix
argument turns on the mode.  Null prefix argument turns off the
mode.

If called interactively, enable Groovy-Electric mode if ARG is
positive, and disable it if ARG is zero or negative.  If called
from Lisp, also enable the mode if ARG is omitted or nil, and
toggle it if ARG is `toggle'; disable the mode otherwise.

When Groovy Electric mode is enabled, simple, double and back
quotes as well as braces are paired auto-magically. Expansion
does not occur inside comments and strings. Note that you must
have Font Lock enabled. ${ } is expanded when in a GString

\(fn &optional ARG)" t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "groovy-electric" '("groovy-electric-")))



(add-to-list 'auto-mode-alist '("\\.g\\(?:ant\\|roovy\\|radle\\)\\'" . groovy-mode))

(add-to-list 'auto-mode-alist '("/Jenkinsfile\\'" . groovy-mode))

(add-to-list 'interpreter-mode-alist '("groovy" . groovy-mode))

(autoload 'groovy-mode "groovy-mode" "\
Major mode for editing Groovy code.

The hook `groovy-mode-hook' is run with no args at mode
initialization.

Key bindings:
\\{groovy-mode-map}

\(fn)" t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "groovy-mode" '("groovy-")))



(autoload 'inf-groovy-keys "inf-groovy" "\
Set local key defs for inf-groovy in `groovy-mode'." nil nil)

(autoload 'inferior-groovy-mode "inf-groovy" "\
Major mode for interacting with an inferior groovy (groovysh) process.

The following commands are available:
\\{inferior-groovy-mode-map}

A groovy process can be fired up with \\[run-groovy].

Customisation: Entry to this mode runs the hooks on
`comint-mode-hook' and `inferior-groovy-mode-hook' (in that order).

You can send text to the inferior groovy process from other buffers containing
Groovy source.
    `switch-to-groovy' switches the current buffer to the groovy process buffer.
    `groovy-send-definition' sends the current definition to the groovy process.
    `groovy-send-region' sends the current region to the groovy process.

    `groovy-send-definition-and-go', `groovy-send-region-and-go',
        switch to the groovy process buffer after sending their text.
For information on running multiple processes in multiple buffers, see
documentation for variable `groovy-buffer'.

Commands:
Return after the end of the process' output sends the text from the
    end of process to point.
Return before the end of the process' output copies the sexp ending at point
    to the end of the process' output, and sends it.
Delete converts tabs to spaces as it moves back.
Tab indents for groovy; with argument, shifts rest
    of expression rigidly with the current line.
\\<groovy-mode-map>
\\[prog-indent-sexp] does Tab on each line starting within following expression.
Paragraphs are separated only by blank lines.  # start comments.
If you accidentally suspend your process, use \\[comint-continue-subjob]
to continue it." t nil)

(autoload 'run-groovy "inf-groovy" "\
Run an inferior Groovy process, input and output via buffer *groovy*.
If there is a process already running in *groovy*, switch to that buffer.
With a prefix argument, prompt for the groovysh path and arguments
\(see variables `groovysh' and `groovysh-args' for the defaults).

Runs the hook `inferior-groovy-mode-hook' (after the
`comint-mode-hook' is run).  Type \\[describe-mode] in the
process buffer for a list of commands.

\(fn CMD)" t nil)

(eval-after-load 'groovy-mode (lambda nil (add-hook 'groovy-mode-hook 'inf-groovy-keys)))

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "inf-groovy" '("groovy" "inf" "remove-in-string" "switch-to-groovy")))




)
(let ((load-true-file-name "/home/cam/.emacs.d/elpa/graphql-mode-20230923.1315/graphql-mode-autoloads.el")(load-file-name "/home/cam/.emacs.d/elpa/graphql-mode-20230923.1315/graphql-mode-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/home/cam/.emacs.d/elpa/graphql-mode-20230923.1315/graphql-mode-autoloads.el") (car load-path))))



(autoload 'graphql-mode "graphql-mode" "\
A major mode to edit GraphQL schemas.

\(fn)" t nil)

(add-to-list 'auto-mode-alist '("\\.graphql\\'" . graphql-mode))

(add-to-list 'auto-mode-alist '("\\.gql\\'" . graphql-mode))

(register-definition-prefixes "graphql-mode" '("graphql-"))




)
(let ((load-true-file-name "/home/cam/.emacs.d/elpa/grandshell-theme-20180606.517/grandshell-theme-autoloads.el")(load-file-name "/home/cam/.emacs.d/elpa/grandshell-theme-20180606.517/grandshell-theme-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/home/cam/.emacs.d/elpa/grandshell-theme-20180606.517/grandshell-theme-autoloads.el") (car load-path))))



(when (and (boundp 'custom-theme-load-path) load-file-name) (add-to-list 'custom-theme-load-path (file-name-as-directory (file-name-directory load-file-name))))

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "grandshell-theme" '("grandshell")))




)
(let ((load-true-file-name "/home/cam/.emacs.d/elpa/goto-chg-1.7.5/goto-chg-autoloads.el")(load-file-name "/home/cam/.emacs.d/elpa/goto-chg-1.7.5/goto-chg-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/home/cam/.emacs.d/elpa/goto-chg-1.7.5/goto-chg-autoloads.el") (car load-path))))



(autoload 'goto-last-change "goto-chg" "\
Go to the point where the last edit was made in the current buffer.
Repeat the command to go to the second last edit, etc.

To go back to more recent edit, the reverse of this command, use \\[goto-last-change-reverse]
or precede this command with \\[universal-argument] - (minus).

It does not go to the same point twice even if there has been many edits
there. I call the minimal distance between distinguishable edits \"span\".
Set variable `glc-default-span' to control how close is \"the same point\".
Default span is 8.
The span can be changed temporarily with \\[universal-argument] right before \\[goto-last-change]:
\\[universal-argument] <NUMBER> set current span to that number,
\\[universal-argument] (no number) multiplies span by 4, starting with default.
The so set span remains until it is changed again with \\[universal-argument], or the consecutive
repetition of this command is ended by any other command.

When span is zero (i.e. \\[universal-argument] 0) subsequent \\[goto-last-change] visits each and
every point of edit and a message shows what change was made there.
In this case it may go to the same point twice.

This command uses undo information. If undo is disabled, so is this command.
At times, when undo information becomes too large, the oldest information is
discarded. See variable `undo-limit'.

\(fn ARG)" t nil)

(autoload 'goto-last-change-reverse "goto-chg" "\
Go back to more recent changes after \\[goto-last-change] have been used.
See `goto-last-change' for use of prefix argument.

\(fn ARG)" t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "goto-chg" '("glc-")))




)
(let ((load-true-file-name "/home/cam/.emacs.d/elpa/gotham-theme-20220107.1730/gotham-theme-autoloads.el")(load-file-name "/home/cam/.emacs.d/elpa/gotham-theme-20220107.1730/gotham-theme-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/home/cam/.emacs.d/elpa/gotham-theme-20220107.1730/gotham-theme-autoloads.el") (car load-path))))



(and load-file-name (boundp 'custom-theme-load-path) (add-to-list 'custom-theme-load-path (file-name-as-directory (file-name-directory load-file-name))))

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "gotham-theme" '("gotham")))




)
(let ((load-true-file-name "/home/cam/.emacs.d/elpa/gnu-elpa-keyring-update-2022.12/gnu-elpa-keyring-update-autoloads.el")(load-file-name "/home/cam/.emacs.d/elpa/gnu-elpa-keyring-update-2022.12/gnu-elpa-keyring-update-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/home/cam/.emacs.d/elpa/gnu-elpa-keyring-update-2022.12/gnu-elpa-keyring-update-autoloads.el") (car load-path))))



(defvar gnu-elpa-keyring-update--keyring (expand-file-name "etc/gnu-elpa.gpg-keyring" (file-name-directory (or (if (fboundp 'macroexp-file-name) (macroexp-file-name) load-file-name) ""))))

(autoload 'gnu-elpa-keyring-update "gnu-elpa-keyring-update" "\
Import new GNU ELPA keys (if any) into package.el's keyring." nil nil)
 (eval-after-load 'package
  `(and (bound-and-true-p package-user-dir)
        (file-directory-p package-user-dir)
        (let ((ts (expand-file-name
                   "gnu-elpa.timestamp"
                   (or (bound-and-true-p package-gnupghome-dir)
                       (expand-file-name "gnupg"
                                         package-user-dir))))
              (kr gnu-elpa-keyring-update--keyring))
          (and (file-writable-p ts)
               (file-readable-p kr)
               (file-newer-than-file-p kr ts)
               (gnu-elpa-keyring-update)))))

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "gnu-elpa-keyring-update" '("gnu-elpa-keyring-update--keyring")))




)
(let ((load-true-file-name "/home/cam/.emacs.d/elpa/git-timemachine-20230630.1214/git-timemachine-autoloads.el")(load-file-name "/home/cam/.emacs.d/elpa/git-timemachine-20230630.1214/git-timemachine-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/home/cam/.emacs.d/elpa/git-timemachine-20230630.1214/git-timemachine-autoloads.el") (car load-path))))



(autoload 'git-timemachine-toggle "git-timemachine" "\
Toggle git timemachine mode." t nil)

(autoload 'git-timemachine "git-timemachine" "\
Enable git timemachine for file of current buffer." t nil)

(autoload 'git-timemachine-switch-branch "git-timemachine" "\
Enable git timemachine for current buffer, switching to GIT-BRANCH.

\(fn GIT-BRANCH)" t nil)

(register-definition-prefixes "git-timemachine" '("git-timemachine-"))




)
(let ((load-true-file-name "/home/cam/.emacs.d/elpa/git-modes-1.4.2/git-modes-autoloads.el")(load-file-name "/home/cam/.emacs.d/elpa/git-modes-1.4.2/git-modes-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/home/cam/.emacs.d/elpa/git-modes-1.4.2/git-modes-autoloads.el") (car load-path))))



(autoload 'gitattributes-mode "gitattributes-mode" "\
A major mode for editing .gitattributes files.
\\{gitattributes-mode-map}

\(fn)" t nil)

(dolist (pattern '("/\\.gitattributes\\'" "/info/attributes\\'" "/git/attributes\\'")) (add-to-list 'auto-mode-alist (cons pattern #'gitattributes-mode)))

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "gitattributes-mode" '("gitattributes-mode-")))



(autoload 'gitconfig-mode "gitconfig-mode" "\
A major mode for editing .gitconfig files.

\(fn)" t nil)

(dolist (pattern '("/\\.gitconfig\\'" "/\\.git/config\\'" "/modules/.*/config\\'" "/git/config\\'" "/\\.gitmodules\\'" "/etc/gitconfig\\'")) (add-to-list 'auto-mode-alist (cons pattern 'gitconfig-mode)))

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "gitconfig-mode" '("gitconfig-")))



(autoload 'gitignore-mode "gitignore-mode" "\
A major mode for editing .gitignore files.

\(fn)" t nil)

(dolist (pattern (list "/\\.gitignore\\'" "/info/exclude\\'" "/git/ignore\\'")) (add-to-list 'auto-mode-alist (cons pattern 'gitignore-mode)))

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "gitignore-mode" '("gitignore-mode-font-lock-keywords")))




)
(let ((load-true-file-name "/home/cam/.emacs.d/elpa/git-link-0.8.6/git-link-autoloads.el")(load-file-name "/home/cam/.emacs.d/elpa/git-link-0.8.6/git-link-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/home/cam/.emacs.d/elpa/git-link-0.8.6/git-link-autoloads.el") (car load-path))))



(autoload 'git-link "git-link" "\
Create a URL representing the current buffer's location in its
GitHub/Bitbucket/GitLab/... repository at the current line number
or active region. The URL will be added to the kill ring.  If
`git-link-open-in-browser' is non-nil also call `browse-url'.

With a prefix argument of - generate a link without line number(s).
Also see `git-link-use-single-line-number'.

With any other prefix argument prompt for the remote's name.
Defaults to \"origin\".

\(fn REMOTE START END)" t nil)

(autoload 'git-link-commit "git-link" "\
Create a URL representing the commit for the hash under point
in the current buffer's GitHub/Bitbucket/GitLab/...
repository. The URL will be added to the kill ring.

With a prefix argument prompt for the remote's name.
Defaults to \"origin\".

\(fn REMOTE)" t nil)

(autoload 'git-link-homepage "git-link" "\
Create a URL representing the homepage of the current
buffer's GitHub/Bitbucket/GitLab/... repository. The
URL will be added to the kill ring.

With a prefix argument prompt for the remote's name.
Defaults to \"origin\".

\(fn REMOTE)" t nil)

(register-definition-prefixes "git-link" '("git-link-"))




)
(let ((load-true-file-name "/home/cam/.emacs.d/elpa/ggtags-20230602.133/ggtags-autoloads.el")(load-file-name "/home/cam/.emacs.d/elpa/ggtags-20230602.133/ggtags-autoloads.el"))



(add-to-list 'load-path (or (and load-file-name (directory-file-name (file-name-directory load-file-name))) (car load-path)))




(autoload 'ggtags-find-project "ggtags")
(autoload 'ggtags-find-tag-dwim "ggtags" "\
Find NAME by context.
If point is at a definition tag, find references, and vice versa.
If point is at a line that matches `ggtags-include-pattern', find
the include file instead.

When called interactively with a prefix arg, always find
definition tags.

(fn NAME &optional WHAT)" t)
(autoload 'ggtags-mode "ggtags" "\
Toggle Ggtags mode on or off.

This is a minor mode.  If called interactively, toggle the
`Ggtags mode' mode.  If the prefix argument is positive, enable
the mode, and if it is zero or negative, disable the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable
the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `ggtags-mode'.

The mode's hook is called both when the mode is enabled and when
it is disabled.

(fn &optional ARG)" t)
(autoload 'ggtags-build-imenu-index "ggtags" "\
A function suitable for `imenu-create-index-function'.")
(autoload 'ggtags-try-complete-tag "ggtags" "\
A function suitable for `hippie-expand-try-functions-list'.

(fn OLD)")
(register-definition-prefixes "ggtags" '("ggtags-"))


(provide 'ggtags-autoloads)


)
(let ((load-true-file-name "/home/cam/.emacs.d/elpa/gandalf-theme-20130809.947/gandalf-theme-autoloads.el")(load-file-name "/home/cam/.emacs.d/elpa/gandalf-theme-20130809.947/gandalf-theme-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/home/cam/.emacs.d/elpa/gandalf-theme-20130809.947/gandalf-theme-autoloads.el") (car load-path))))



(and load-file-name (boundp 'custom-theme-load-path) (add-to-list 'custom-theme-load-path (file-name-as-directory (file-name-directory load-file-name))))

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "gandalf-theme" '("gandalf")))




)
(let ((load-true-file-name "/home/cam/.emacs.d/elpa/fringe-helper-1.0.1/fringe-helper-autoloads.el")(load-file-name "/home/cam/.emacs.d/elpa/fringe-helper-1.0.1/fringe-helper-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/home/cam/.emacs.d/elpa/fringe-helper-1.0.1/fringe-helper-autoloads.el") (car load-path))))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "fringe-helper" '("fringe-")))




)
(let ((load-true-file-name "/home/cam/.emacs.d/elpa/flycheck-32/flycheck-autoloads.el")(load-file-name "/home/cam/.emacs.d/elpa/flycheck-32/flycheck-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/home/cam/.emacs.d/elpa/flycheck-32/flycheck-autoloads.el") (car load-path))))



(autoload 'flycheck-manual "flycheck" "\
Open the Flycheck manual." t nil)

(autoload 'flycheck-mode "flycheck" "\
Flycheck is a minor mode for on-the-fly syntax checking.

In `flycheck-mode' the buffer is automatically syntax-checked
using the first suitable syntax checker from `flycheck-checkers'.
Use `flycheck-select-checker' to select a checker for the current
buffer manually.

If you run into issues, use `\\[flycheck-verify-setup]' to get help.

Flycheck supports many languages out of the box, and many
additional ones are available on MELPA.  Adding new ones is very
easy.  Complete documentation is available online at URL
`https://www.flycheck.org/en/latest/'.  Please report issues and
request features at URL `https://github.com/flycheck/flycheck'.

Flycheck displays its status in the mode line.  In the default
configuration, it looks like this:

`FlyC'     This buffer has not been checked yet.
`FlyC-'    Flycheck doesn't have a checker for this buffer.
`FlyC*'    Flycheck is running.  Expect results soon!
`FlyC:3|2' This buffer contains three warnings and two errors.
           Use `\\[flycheck-list-errors]' to see the list.

You may also see the following icons:
`FlyC!'    The checker crashed.
`FlyC.'    The last syntax check was manually interrupted.
`FlyC?'    The checker did something unexpected, like exiting with 1
           but returning no errors.

The following keybindings are available in `flycheck-mode':

\\{flycheck-mode-map}
\(you can change the prefix by customizing
`flycheck-keymap-prefix')

If called interactively, enable Flycheck mode if ARG is positive,
and disable it if ARG is zero or negative.  If called from Lisp,
also enable the mode if ARG is omitted or nil, and toggle it if
ARG is ‘toggle’; disable the mode otherwise.

\(fn &optional ARG)" t nil)

(put 'global-flycheck-mode 'globalized-minor-mode t)

(defvar global-flycheck-mode nil "\
Non-nil if Global Flycheck mode is enabled.
See the `global-flycheck-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `global-flycheck-mode'.")

(custom-autoload 'global-flycheck-mode "flycheck" nil)

(autoload 'global-flycheck-mode "flycheck" "\
Toggle Flycheck mode in all buffers.
With prefix ARG, enable Global Flycheck mode if ARG is positive;
otherwise, disable it.

If called from Lisp, toggle the mode if ARG is `toggle'.
Enable the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

Flycheck mode is enabled in all buffers where `flycheck-mode-on-safe'
would do it.

See `flycheck-mode' for more information on Flycheck mode.

\(fn &optional ARG)" t nil)

(autoload 'flycheck-define-error-level "flycheck" "\
Define a new error LEVEL with PROPERTIES.

The following PROPERTIES constitute an error level:

`:severity SEVERITY'
     A number denoting the severity of this level.  The higher
     the number, the more severe is this level compared to other
     levels.  Defaults to 0.

     The severity is used by `flycheck-error-level-<' to
     determine the ordering of errors according to their levels.

`:compilation-level LEVEL'

     A number indicating the broad class of messages that errors
     at this level belong to: one of 0 (info), 1 (warning), or
     2 or nil (error).  Defaults to nil.

     This is used by `flycheck-checker-pattern-to-error-regexp'
     to map error levels into `compilation-mode''s hierarchy and
     to get proper highlighting of errors in `compilation-mode'.

`:overlay-category CATEGORY'
     A symbol denoting the overlay category to use for error
     highlight overlays for this level.  See Info
     node `(elisp)Overlay Properties' for more information about
     overlay categories.

     A category for an error level overlay should at least define
     the `face' property, for error highlighting.  Another useful
     property for error level categories is `priority', to
     influence the stacking of multiple error level overlays.

`:fringe-bitmap BITMAPS'
     A fringe bitmap symbol denoting the bitmap to use for fringe
     indicators for this level, or a cons of two bitmaps (one for
     narrow fringes and one for wide fringes).  See Info node
     `(elisp)Fringe Bitmaps' for more information about fringe
     bitmaps, including a list of built-in fringe bitmaps.

`:fringe-face FACE'
     A face symbol denoting the face to use for fringe indicators
     for this level.

`:margin-spec SPEC'
     A display specification indicating what to display in the
     margin when `flycheck-indication-mode' is `left-margin' or
     `right-margin'.  See Info node `(elisp)Displaying in the
     Margins'.  If omitted, Flycheck generates an image spec from
     the fringe bitmap.

`:error-list-face FACE'
     A face symbol denoting the face to use for messages of this
     level in the error list.  See `flycheck-list-errors'.

\(fn LEVEL &rest PROPERTIES)" nil nil)

(function-put 'flycheck-define-error-level 'lisp-indent-function '1)

(autoload 'flycheck-define-command-checker "flycheck" "\
Define SYMBOL as syntax checker to run a command.

Define SYMBOL as generic syntax checker via
`flycheck-define-generic-checker', which uses an external command
to check the buffer.  SYMBOL and DOCSTRING are the same as for
`flycheck-define-generic-checker'.

In addition to the properties understood by
`flycheck-define-generic-checker', the following PROPERTIES
constitute a command syntax checker.  Unless otherwise noted, all
properties are mandatory.  Note that the default `:error-filter'
of command checkers is `flycheck-sanitize-errors'.

`:command COMMAND'
     The command to run for syntax checking.

     COMMAND is a list of the form `(EXECUTABLE [ARG ...])'.

     EXECUTABLE is a string with the executable of this syntax
     checker.  It can be overridden with the variable
     `flycheck-SYMBOL-executable'.  Note that this variable is
     NOT implicitly defined by this function.  Use
     `flycheck-def-executable-var' to define this variable.

     Each ARG is an argument to the executable, either as string,
     or as special symbol or form for
     `flycheck-substitute-argument', which see.

`:error-patterns PATTERNS'
     A list of patterns to parse the output of the `:command'.

     Each ITEM in PATTERNS is a list `(LEVEL SEXP ...)', where
     LEVEL is a Flycheck error level (see
     `flycheck-define-error-level'), followed by one or more RX
     `SEXP's which parse an error of that level and extract line,
     column, file name and the message.

     See `rx' for general information about RX, and
     `flycheck-rx-to-string' for some special RX forms provided
     by Flycheck.

     All patterns are applied in the order of declaration to the
     whole output of the syntax checker.  Output already matched
     by a pattern will not be matched by subsequent patterns.  In
     other words, the first pattern wins.

     This property is optional.  If omitted, however, an
     `:error-parser' is mandatory.

`:error-parser FUNCTION'
     A function to parse errors with.

     The function shall accept three arguments OUTPUT CHECKER
     BUFFER.  OUTPUT is the syntax checker output as string,
     CHECKER the syntax checker that was used, and BUFFER a
     buffer object representing the checked buffer.  The function
     must return a list of `flycheck-error' objects parsed from
     OUTPUT.

     This property is optional.  If omitted, it defaults to
     `flycheck-parse-with-patterns'.  In this case,
     `:error-patterns' is mandatory.

`:standard-input t'
     Whether to send the buffer contents on standard input.

     If this property is given and has a non-nil value, send the
     contents of the buffer on standard input.

     Defaults to nil.

Note that you may not give `:start', `:interrupt', and
`:print-doc' for a command checker.  You can give a custom
`:verify' function, though, whose results will be appended to the
default `:verify' function of command checkers.

\(fn SYMBOL DOCSTRING &rest PROPERTIES)" nil nil)

(function-put 'flycheck-define-command-checker 'lisp-indent-function '1)

(function-put 'flycheck-define-command-checker 'doc-string-elt '2)

(autoload 'flycheck-def-config-file-var "flycheck" "\
Define SYMBOL as config file variable for CHECKER, with default FILE-NAME.

SYMBOL is declared as customizable variable using `defcustom', to
provide configuration files for the given syntax CHECKER.
CUSTOM-ARGS are forwarded to `defcustom'.

FILE-NAME is the initial value of the new variable.  If omitted,
the default value is nil.  It can be either a string or a list of
strings.

Use this together with the `config-file' form in the `:command'
argument to `flycheck-define-checker'.

\(fn SYMBOL CHECKER &optional FILE-NAME &rest CUSTOM-ARGS)" nil t)

(function-put 'flycheck-def-config-file-var 'lisp-indent-function '3)

(autoload 'flycheck-def-option-var "flycheck" "\
Define SYMBOL as option variable with INIT-VALUE for CHECKER.

SYMBOL is declared as customizable variable using `defcustom', to
provide an option for the given syntax CHECKERS (a checker or a
list of checkers).  INIT-VALUE is the initial value of the
variable, and DOCSTRING is its docstring.  CUSTOM-ARGS are
forwarded to `defcustom'.

Use this together with the `option', `option-list' and
`option-flag' forms in the `:command' argument to
`flycheck-define-checker'.

\(fn SYMBOL INIT-VALUE CHECKERS DOCSTRING &rest CUSTOM-ARGS)" nil t)

(function-put 'flycheck-def-option-var 'lisp-indent-function '3)

(function-put 'flycheck-def-option-var 'doc-string-elt '4)

(autoload 'flycheck-define-checker "flycheck" "\
Define SYMBOL as command syntax checker with DOCSTRING and PROPERTIES.

Like `flycheck-define-command-checker', but PROPERTIES must not
be quoted.  Also, implicitly define the executable variable for
SYMBOL with `flycheck-def-executable-var'.

\(fn SYMBOL DOCSTRING &rest PROPERTIES)" nil t)

(function-put 'flycheck-define-checker 'lisp-indent-function '1)

(function-put 'flycheck-define-checker 'doc-string-elt '2)

(register-definition-prefixes "flycheck" '("flycheck-" "help-flycheck-checker-d" "list-flycheck-errors"))



(register-definition-prefixes "flycheck-buttercup" '("flycheck-buttercup-format-error-list"))



(register-definition-prefixes "flycheck-ert" '("flycheck-er"))




)
(let ((load-true-file-name "/home/cam/.emacs.d/elpa/flatui-theme-20160619.127/flatui-theme-autoloads.el")(load-file-name "/home/cam/.emacs.d/elpa/flatui-theme-20160619.127/flatui-theme-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/home/cam/.emacs.d/elpa/flatui-theme-20160619.127/flatui-theme-autoloads.el") (car load-path))))



(and load-file-name (boundp 'custom-theme-load-path) (add-to-list 'custom-theme-load-path (file-name-as-directory (file-name-directory load-file-name))))

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "flatui-theme" '("flatui")))




)
(let ((load-true-file-name "/home/cam/.emacs.d/elpa/flatland-theme-20171113.1521/flatland-theme-autoloads.el")(load-file-name "/home/cam/.emacs.d/elpa/flatland-theme-20171113.1521/flatland-theme-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/home/cam/.emacs.d/elpa/flatland-theme-20171113.1521/flatland-theme-autoloads.el") (car load-path))))



(and load-file-name (boundp 'custom-theme-load-path) (add-to-list 'custom-theme-load-path (file-name-as-directory (file-name-directory load-file-name))))

(add-to-list 'safe-local-eval-forms '(when (require 'rainbow-mode nil t) (rainbow-mode 1)))

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "flatland-theme" '("flatland")))




)
(let ((load-true-file-name "/home/cam/.emacs.d/elpa/find-file-in-project-6.2.1/find-file-in-project-autoloads.el")(load-file-name "/home/cam/.emacs.d/elpa/find-file-in-project-6.2.1/find-file-in-project-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/home/cam/.emacs.d/elpa/find-file-in-project-6.2.1/find-file-in-project-autoloads.el") (car load-path))))



(autoload 'ffip-git-diff-current-file "find-file-in-project" "\
Compare another version of current file." nil nil)

(autoload 'ffip-copy-without-change "find-file-in-project" "\
Copy P without change.

\(fn P)" nil nil)

(autoload 'ffip-copy-reactjs-import "find-file-in-project" "\
Create ReactJS link from P and copy the result.

\(fn P)" nil nil)

(autoload 'ffip-copy-org-file-link "find-file-in-project" "\
Create org link from P and copy the result.

\(fn P)" nil nil)

(defvar ffip-find-relative-path-callback 'ffip-copy-without-change "\
The callback after calling `find-relative-path'.")

(custom-autoload 'ffip-find-relative-path-callback "find-file-in-project" t)

(autoload 'ffip-project-root "find-file-in-project" "\
Return project root or `default-directory'." nil nil)

(autoload 'ffip-get-project-root-directory "find-file-in-project" "\
Get the full path of project root directory." nil nil)

(autoload 'ffip-filename-identity "find-file-in-project" "\
Return identical KEYWORD.

\(fn KEYWORD)" nil nil)

(autoload 'ffip-filename-camelcase-to-dashes "find-file-in-project" "\
Convert KEYWORD from camel cased to dash separated.
If CHECK-ONLY is true, only do the check.

\(fn KEYWORD &optional CHECK-ONLY)" nil nil)

(autoload 'ffip-filename-dashes-to-camelcase "find-file-in-project" "\
Convert KEYWORD from dash separated to camel cased.
If CHECK-ONLY is true, only do the check.

\(fn KEYWORD &optional CHECK-ONLY)" nil nil)

(autoload 'ffip-completing-read "find-file-in-project" "\
Read a string in minibuffer, with completion.

PROMPT is a string with same format parameters in `completing-read'.
COLLECTION is a list of strings.

ACTION is a lambda function to call after selecting a result.

This function returns the selected candidate or nil.

\(fn PROMPT COLLECTION &optional ACTION)" nil nil)

(autoload 'ffip-project-search "find-file-in-project" "\
Return an alist of all filenames in the project and their path.

Files with duplicate filenames are suffixed with the name of the
directory they are found in so that they are unique.

If KEYWORD is string, it's the file name or file path to find file.
If KEYWORD is list, it's the list of file names.
IF FIND-DIRECTORY-P is t, we are searching directories, else files.

\(fn KEYWORD &optional FIND-DIRECTORY-P)" nil nil)

(autoload 'ffip-find-files "find-file-in-project" "\
Use KEYWORD to find files.
If OPEN-ANOTHER-WINDOW is t, the results are displayed in a new window.
If FIND-DIRECTORY-P is t, only search directories.  FN is callback.
This function is the API to find files.

\(fn KEYWORD OPEN-ANOTHER-WINDOW &optional FIND-DIRECTORY-P FN)" nil nil)

(autoload 'ffip-find-files-resume "find-file-in-project" "\
Resume the last Nth `ffip-find-file' operation.
Please note N is zero originated.

\(fn &optional N)" t nil)

(autoload 'ffip-create-project-file "find-file-in-project" "\
Create or Append .dir-locals.el to set up per directory.
You can move .dir-locals.el to root directory.
See (info \"(Emacs) Directory Variables\") for details." t nil)

(autoload 'ffip-current-full-filename-match-pattern-p "find-file-in-project" "\
Is current full file name (including directory) match the REGEX?

\(fn REGEX)" nil nil)

(autoload 'find-file-in-project "find-file-in-project" "\
More powerful and efficient `find-file-in-project-by-selected' is recommended.

Prompt with a completing list of all files in the project to find one.
If OPEN-ANOTHER-WINDOW is not nil, the file will be opened in new window.
The project's scope is defined as the first directory containing
a `ffip-project-file' whose value is \".git\" by default.
You can override this by setting the variable `ffip-project-root'.

\(fn &optional OPEN-ANOTHER-WINDOW)" t nil)

(autoload 'find-file-in-project-at-point "find-file-in-project" "\
Find file at point.  File path could contain environment variables.
If OPEN-ANOTHER-WINDOW is not nil, the file will be opened in new window.

\(fn &optional OPEN-ANOTHER-WINDOW)" t nil)

(autoload 'find-file-in-current-directory "find-file-in-project" "\
Search file in current directory or LEVEL up parent directory.

\(fn &optional LEVEL)" t nil)

(autoload 'find-file-in-project-by-selected "find-file-in-project" "\
Same as `find-file-in-project' but more powerful and faster.
It use string from selected region to search files in the project.
If no region is selected, you could provide a keyword.

Keyword could be ANY part of the file's full path and support wildcard.
For example, to find /home/john/proj1/test.js, below keywords are valid:
- test.js
- roj1/tes
- john*test

If keyword contains line number like \"hello.txt:32\" or \"hello.txt:32:\",
we will move to that line in opened file.

If keyword is empty, it behaves same as `find-file-in-project'.

If OPEN-ANOTHER-WINDOW is not nil, the file will be opened in new window.

\(fn &optional OPEN-ANOTHER-WINDOW)" t nil)

(autoload 'ffip-insert-file "find-file-in-project" "\
Insert contents of file in current buffer.
The file name is selected interactively from candidates in project." t nil)

(autoload 'find-file-with-similar-name "find-file-in-project" "\
Use base name of current file as keyword which could be further stripped.
by `ffip-strip-file-name-regex'.
If OPEN-ANOTHER-WINDOW is not nil, the file will be opened in new window.

\(fn &optional OPEN-ANOTHER-WINDOW)" t nil)

(autoload 'find-file-in-current-directory-by-selected "find-file-in-project" "\
Like `find-file-in-project-by-selected' but search current directory.
If OPEN-ANOTHER-WINDOW is not nil, the file will be opened in new window.

\(fn &optional OPEN-ANOTHER-WINDOW)" t nil)

(autoload 'ffip-find-relative-path "find-file-in-project" "\
Find file/directory and copy its relative path into `kill-ring'.
If FIND-DIRECTORY-P is t, copy the directory path.
Set `ffip-find-relative-path-callback' to format the result.

\(fn &optional FIND-DIRECTORY-P)" t nil)

(autoload 'find-directory-in-project-by-selected "find-file-in-project" "\
Similar to `find-file-in-project-by-selected'.
Use string from selected region to find directory in the project.
If no region is selected, you need provide keyword.

Keyword could be directory's base-name only or parent-directory+base-name
For example, to find /home/john/proj1/test, below keywords are valid:
- test
- roj1/test
- john*test

If OPEN-ANOTHER-WINDOW is not nil, the file will be opened in new window.

\(fn &optional OPEN-ANOTHER-WINDOW)" t nil)

(autoload 'ffip-lisp-find-file-in-project "find-file-in-project" "\
If DIRECTORY-P is nil, find file in project, or else find directory.
This command works in any environment (Windows, etc) out of box.

\(fn &optional DIRECTORY-P)" t nil)

(defalias 'ffip 'find-file-in-project)

(defalias 'find-relative-path 'ffip-find-relative-path)

(autoload 'ffip-diff-quit "find-file-in-project" "\
Quit." t nil)

(autoload 'ffip-diff-find-file "find-file-in-project" "\
File file(s) in current hunk.
If OPEN-ANOTHER-WINDOW is not nil, the file will be opened in new window.

\(fn &optional OPEN-ANOTHER-WINDOW)" t nil)

(autoload 'ffip-diff-mode "find-file-in-project" "\
Show diff/patch.

\(fn)" t nil)

(autoload 'ffip-show-diff-internal "find-file-in-project" "\
Show the diff output by executing selected `ffip-diff-backends'.
NUM is the index selected backend from `ffip-diff-backends'.
NUM is zero based whose default value is zero.

\(fn &optional NUM)" t nil)

(autoload 'ffip-show-diff-by-description "find-file-in-project" "\
Show the diff output by executing selected `ffip-diff-backends'.
NUM is the backend index of `ffip-diff-backends'.
If NUM is not nil, the corresponding backend is executed directly.

\(fn &optional NUM)" t nil)

(defalias 'ffip-show-diff 'ffip-show-diff-by-description)

(autoload 'ffip-diff-apply-hunk "find-file-in-project" "\
Apply current hunk in `diff-mode'.  Try to locate the file to patch.
Similar to `diff-apply-hunk' but smarter.
Please read documentation of `diff-apply-hunk' to get more details.
If REVERSE is t, applied patch is reverted.

\(fn &optional REVERSE)" t nil)

(autoload 'ffip-diff-filter-hunks-by-file-name "find-file-in-project" "\
Filter hunks by file names which are generated from user input patterns.
E.g., \"regex !exclude1 exclude1\" means the hunk's file name should
match \"regex\", but should not match \"exclude1\" or \"exclude2\".
Please note in \"regex\", space represents any string." t nil)

(autoload 'ffip-fix-file-path-at-point "find-file-in-project" "\
Fix file path at point.  File path could contain environment variables.
If ABSOLUTE-PATH-P is t, old path is replaced by correct absolute path.
Or else it's replaced by relative path.

\(fn &optional ABSOLUTE-PATH-P)" t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "find-file-in-project" '("ffip-")))




)
(let ((load-true-file-name "/home/cam/.emacs.d/elpa/find-by-pinyin-dired-0.0.3/find-by-pinyin-dired-autoloads.el")(load-file-name "/home/cam/.emacs.d/elpa/find-by-pinyin-dired-0.0.3/find-by-pinyin-dired-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/home/cam/.emacs.d/elpa/find-by-pinyin-dired-0.0.3/find-by-pinyin-dired-autoloads.el") (car load-path))))



(autoload 'find-by-pinyin-dired "find-by-pinyin-dired" "\
Search DIR recursively for files/directories matching the PATTERN.
Then run Dired on those files.
PATTERN is sequence of first character of PinYin of each Chinese character.
Space in PATTERN match a number of any Chinese characters.
For example, pattern 'hh tt' find file '好好学习天天向上.txt'.

\(fn DIR PATTERN)" t nil)

(autoload 'find-by-pinyin-in-project-dired "find-by-pinyin-dired" "\
Simlar to `find-by-pinyin-dired' while search directory automatically detected.
The directory is detected by `ffip-project-root' if you installed `find-file-in-project'.

\(fn PATTERN)" t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "find-by-pinyin-dired" '("find-by-pinyin-")))




)
(let ((load-true-file-name "/home/cam/.emacs.d/elpa/farmhouse-themes-20221025.2054/farmhouse-themes-autoloads.el")(load-file-name "/home/cam/.emacs.d/elpa/farmhouse-themes-20221025.2054/farmhouse-themes-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/home/cam/.emacs.d/elpa/farmhouse-themes-20221025.2054/farmhouse-themes-autoloads.el") (car load-path))))



(when (and (boundp 'custom-theme-load-path) load-file-name) (add-to-list 'custom-theme-load-path (file-name-as-directory (file-name-directory load-file-name))))

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "farmhouse-dark-theme" '("farmhouse-dark")))



(when (and (boundp 'custom-theme-load-path) load-file-name) (add-to-list 'custom-theme-load-path (file-name-as-directory (file-name-directory load-file-name))))

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "farmhouse-light-theme" '("farmhouse-light")))



(when load-file-name (add-to-list 'custom-theme-load-path (file-name-as-directory (file-name-directory load-file-name))))

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "farmhouse-themes" '("farmhouse-")))




)
(let ((load-true-file-name "/home/cam/.emacs.d/elpa/fantom-theme-20200328.604/fantom-theme-autoloads.el")(load-file-name "/home/cam/.emacs.d/elpa/fantom-theme-20200328.604/fantom-theme-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/home/cam/.emacs.d/elpa/fantom-theme-20200328.604/fantom-theme-autoloads.el") (car load-path))))



(when load-file-name (add-to-list 'custom-theme-load-path (file-name-as-directory (file-name-directory load-file-name))))




)
(let ((load-true-file-name "/home/cam/.emacs.d/elpa/eziam-themes-20230820.917/eziam-themes-autoloads.el")(load-file-name "/home/cam/.emacs.d/elpa/eziam-themes-20230820.917/eziam-themes-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/home/cam/.emacs.d/elpa/eziam-themes-20230820.917/eziam-themes-autoloads.el") (car load-path))))



(and load-file-name (boundp 'custom-theme-load-path) (add-to-list 'custom-theme-load-path (file-name-as-directory (file-name-directory load-file-name))))

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "eziam-dark-theme" '("eziam-dark")))



(and load-file-name (boundp 'custom-theme-load-path) (add-to-list 'custom-theme-load-path (file-name-as-directory (file-name-directory load-file-name))))

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "eziam-dusk-theme" '("eziam-dusk")))



(and load-file-name (boundp 'custom-theme-load-path) (add-to-list 'custom-theme-load-path (file-name-as-directory (file-name-directory load-file-name))))

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "eziam-light-theme" '("eziam-light")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "eziam-themes" '("eziam-")))




)
(let ((load-true-file-name "/home/cam/.emacs.d/elpa/expand-region-1.0.0/expand-region-autoloads.el")(load-file-name "/home/cam/.emacs.d/elpa/expand-region-1.0.0/expand-region-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/home/cam/.emacs.d/elpa/expand-region-1.0.0/expand-region-autoloads.el") (car load-path))))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "cc-mode-expansions" '("er/")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "clojure-mode-expansions" '("er/")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "cperl-mode-expansions" '("er/")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "css-mode-expansions" '("er/")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "enh-ruby-mode-expansions" '("er/add-enh-ruby-mode-expansions")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "er-basic-expansions" '("er--" "er/mark-")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "erlang-mode-expansions" '("er/add-erlang-mode-expansions")))



(autoload 'er/expand-region "expand-region" "\
Increase selected region by semantic units.

With prefix argument expands the region that many times.
If prefix argument is negative calls `er/contract-region'.
If prefix argument is 0 it resets point and mark to their state
before calling `er/expand-region' for the first time.

\(fn ARG)" t nil)



(autoload 'er/contract-region "expand-region-core" "\
Contract the selected region to its previous size.
With prefix argument contracts that many times.
If prefix argument is negative calls `er/expand-region'.
If prefix argument is 0 it resets point and mark to their state
before calling `er/expand-region' for the first time.

\(fn ARG)" t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "expand-region-core" '("er--" "er/")))



(let ((loads (get 'expand-region 'custom-loads))) (if (member '"expand-region-custom" loads) nil (put 'expand-region 'custom-loads (cons '"expand-region-custom" loads))))

(defvar expand-region-preferred-python-mode 'python "\
The name of your preferred python mode")

(custom-autoload 'expand-region-preferred-python-mode "expand-region-custom" t)

(defvar expand-region-guess-python-mode t "\
If expand-region should attempt to guess your preferred python mode")

(custom-autoload 'expand-region-guess-python-mode "expand-region-custom" t)

(defvar expand-region-autocopy-register "" "\
If set to a string of a single character (try \"e\"), then the
contents of the most recent expand or contract command will
always be copied to the register named after that character.")

(custom-autoload 'expand-region-autocopy-register "expand-region-custom" t)

(defvar expand-region-skip-whitespace t "\
If expand-region should skip past whitespace on initial expansion")

(custom-autoload 'expand-region-skip-whitespace "expand-region-custom" t)

(defvar expand-region-fast-keys-enabled t "\
If expand-region should bind fast keys after initial expand/contract")

(custom-autoload 'expand-region-fast-keys-enabled "expand-region-custom" t)

(defvar expand-region-contract-fast-key "-" "\
Key to use after an initial expand/contract to contract once more.")

(custom-autoload 'expand-region-contract-fast-key "expand-region-custom" t)

(defvar expand-region-reset-fast-key "0" "\
Key to use after an initial expand/contract to undo.")

(custom-autoload 'expand-region-reset-fast-key "expand-region-custom" t)

(defvar expand-region-exclude-text-mode-expansions '(html-mode nxml-mode) "\
List of modes which derive from `text-mode' for which text mode expansions are not appropriate.")

(custom-autoload 'expand-region-exclude-text-mode-expansions "expand-region-custom" t)

(defvar expand-region-smart-cursor nil "\
Defines whether the cursor should be placed intelligently after expansion.

If set to t, and the cursor is already at the beginning of the new region,
keep it there; otherwise, put it at the end of the region.

If set to nil, always place the cursor at the beginning of the region.")

(custom-autoload 'expand-region-smart-cursor "expand-region-custom" t)

(define-obsolete-variable-alias 'er/enable-subword-mode\? 'expand-region-subword-enabled "2019-03-23")

(defvar expand-region-subword-enabled nil "\
Whether expand-region should use subword expansions.")

(custom-autoload 'expand-region-subword-enabled "expand-region-custom" t)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "expand-region-custom" '("expand-region-")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "feature-mode-expansions" '("er--block-between-keywords" "er/")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "html-mode-expansions" '("er--" "er/")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "js-mode-expansions" '("er/")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "js2-mode-expansions" '("er/add-js2-mode-expansions" "js2-mark-parent-statement")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "jsp-expansions" '("er/")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "latex-mode-expansions" '("er/")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "nxml-mode-expansions" '("er/")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "octave-expansions" '("er/")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "python-el-expansions" '("er--python-string-delimiter" "er/")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "python-el-fgallina-expansions" '("er--python-" "er/")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "python-mode-expansions" '("er--" "er/" "py-goto-beyond-clause")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "ruby-mode-expansions" '("er/")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "sml-mode-expansions" '("er/")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "subword-mode-expansions" '("er/")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "text-mode-expansions" '("er/")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "the-org-mode-expansions" '("er/")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "web-mode-expansions" '("er/add-web-mode-expansions")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "yaml-mode-expansions" '("er--" "er/" "yaml-indent")))




)
(let ((load-true-file-name "/home/cam/.emacs.d/elpa/exotica-theme-20180212.2329/exotica-theme-autoloads.el")(load-file-name "/home/cam/.emacs.d/elpa/exotica-theme-20180212.2329/exotica-theme-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/home/cam/.emacs.d/elpa/exotica-theme-20180212.2329/exotica-theme-autoloads.el") (car load-path))))



(when load-file-name (add-to-list 'custom-theme-load-path (file-name-as-directory (file-name-directory load-file-name))))

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "exotica-theme" '("exotica")))




)
(let ((load-true-file-name "/home/cam/.emacs.d/elpa/exec-path-from-shell-2.1/exec-path-from-shell-autoloads.el")(load-file-name "/home/cam/.emacs.d/elpa/exec-path-from-shell-2.1/exec-path-from-shell-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/home/cam/.emacs.d/elpa/exec-path-from-shell-2.1/exec-path-from-shell-autoloads.el") (car load-path))))



(autoload 'exec-path-from-shell-copy-envs "exec-path-from-shell" "\
Set the environment variables with NAMES from the user's shell.

As a special case, if the variable is $PATH, then the variables
`exec-path' and `eshell-path-env' are also set appropriately.
The result is an alist, as described by
`exec-path-from-shell-getenvs'.

\(fn NAMES)" nil nil)

(autoload 'exec-path-from-shell-copy-env "exec-path-from-shell" "\
Set the environment variable $NAME from the user's shell.

As a special case, if the variable is $PATH, then the variables
`exec-path' and `eshell-path-env' are also set appropriately.
Return the value of the environment variable.

\(fn NAME)" t nil)

(autoload 'exec-path-from-shell-initialize "exec-path-from-shell" "\
Initialize environment from the user's shell.

The values of all the environment variables named in
`exec-path-from-shell-variables' are set from the corresponding
values used in the user's shell." t nil)

(register-definition-prefixes "exec-path-from-shell" '("exec-path-from-shell-"))




)
(let ((load-true-file-name "/home/cam/.emacs.d/elpa/eww-lnum-1.1/eww-lnum-autoloads.el")(load-file-name "/home/cam/.emacs.d/elpa/eww-lnum-1.1/eww-lnum-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/home/cam/.emacs.d/elpa/eww-lnum-1.1/eww-lnum-autoloads.el") (car load-path))))



(autoload 'eww-lnum-follow "eww-lnum" "\
Turn on link numbers, ask for one and execute appropriate action on it.
If link - visit it; button - press; input - move to it.
With prefix ARG visit link in new session.
With `-' prefix ARG, visit in background.
With double prefix ARG, prompt for url to visit.
With triple prefix ARG, prompt for url and visit in new session.

\(fn ARG)" t nil)

(autoload 'eww-lnum-universal "eww-lnum" "\
Turn on link numbers, ask for one and offer actions over it depending on selection.
Actions may be selected either by hitting corresponding key,
pressing <return> over the action line or left clicking." t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "eww-lnum" '("eww-")))




)
(let ((load-true-file-name "/home/cam/.emacs.d/elpa/evil-20240102.1659/evil-autoloads.el")(load-file-name "/home/cam/.emacs.d/elpa/evil-20240102.1659/evil-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/home/cam/.emacs.d/elpa/evil-20240102.1659/evil-autoloads.el") (car load-path))))



(register-definition-prefixes "evil-command-window" '("evil-"))



(register-definition-prefixes "evil-commands" '("evil-"))



(register-definition-prefixes "evil-common" '("bounds-of-evil-" "evil-" "forward-evil-"))


 (autoload 'evil-mode "evil" nil t)

(register-definition-prefixes "evil-core" '("evil-" "turn-o"))



(autoload 'evil-digraph "evil-digraphs" "\
Convert DIGRAPH to character or list representation.
If DIGRAPH is a list (CHAR1 CHAR2), return the corresponding character;
if DIGRAPH is a character, return the corresponding list.
Searches in `evil-digraphs-table-user' and `evil-digraphs-table'.

\(fn DIGRAPH)" nil nil)

(register-definition-prefixes "evil-digraphs" '("evil-digraphs-table"))



(register-definition-prefixes "evil-ex" '("evil-"))



(register-definition-prefixes "evil-integration" '("evil-"))



(register-definition-prefixes "evil-jumps" '("evil-"))



(register-definition-prefixes "evil-macros" '("evil-"))



(register-definition-prefixes "evil-maps" '("evil-"))



(register-definition-prefixes "evil-repeat" '("evil-"))



(register-definition-prefixes "evil-search" '("evil-"))



(register-definition-prefixes "evil-states" '("evil-"))



(register-definition-prefixes "evil-types" '("evil-ex-get-optional-register-and-count"))



(register-definition-prefixes "evil-vars" '("evil-"))




)
(let ((load-true-file-name "/home/cam/.emacs.d/elpa/evil-visualstar-0.2.0/evil-visualstar-autoloads.el")(load-file-name "/home/cam/.emacs.d/elpa/evil-visualstar-0.2.0/evil-visualstar-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/home/cam/.emacs.d/elpa/evil-visualstar-0.2.0/evil-visualstar-autoloads.el") (car load-path))))



(autoload 'evil-visualstar-mode "evil-visualstar" "\
Minor mode for visual star selection.

If called interactively, enable Evil-Visualstar mode if ARG is
positive, and disable it if ARG is zero or negative.  If called
from Lisp, also enable the mode if ARG is omitted or nil, and
toggle it if ARG is `toggle'; disable the mode otherwise.

\(fn &optional ARG)" t nil)

(put 'global-evil-visualstar-mode 'globalized-minor-mode t)

(defvar global-evil-visualstar-mode nil "\
Non-nil if Global Evil-Visualstar mode is enabled.
See the `global-evil-visualstar-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `global-evil-visualstar-mode'.")

(custom-autoload 'global-evil-visualstar-mode "evil-visualstar" nil)

(autoload 'global-evil-visualstar-mode "evil-visualstar" "\
Toggle Evil-Visualstar mode in all buffers.
With prefix ARG, enable Global Evil-Visualstar mode if ARG is positive;
otherwise, disable it.  If called from Lisp, enable the mode if
ARG is omitted or nil.

Evil-Visualstar mode is enabled in all buffers where
`turn-on-evil-visualstar-mode' would do it.
See `evil-visualstar-mode' for more information on Evil-Visualstar mode.

\(fn &optional ARG)" t nil)

(autoload 'turn-on-evil-visualstar-mode "evil-visualstar" "\
Turns on visual star selection." t nil)

(autoload 'turn-off-evil-visualstar-mode "evil-visualstar" "\
Turns off visual star selection." t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "evil-visualstar" '("evil-visualstar/")))




)
(let ((load-true-file-name "/home/cam/.emacs.d/elpa/evil-surround-1.1.1/evil-surround-autoloads.el")(load-file-name "/home/cam/.emacs.d/elpa/evil-surround-1.1.1/evil-surround-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/home/cam/.emacs.d/elpa/evil-surround-1.1.1/evil-surround-autoloads.el") (car load-path))))



(autoload 'evil-surround-delete "evil-surround" "\
Delete the surrounding delimiters represented by CHAR.
Alternatively, the text to delete can be represented with
the overlays OUTER and INNER, where OUTER includes the delimiters
and INNER excludes them. The intersection (i.e., difference)
between these overlays is what is deleted.

\(fn CHAR &optional OUTER INNER)" t nil)

(autoload 'evil-surround-change "evil-surround" "\
Change the surrounding delimiters represented by CHAR.
Alternatively, the text to delete can be represented with the
overlays OUTER and INNER, which are passed to `evil-surround-delete'.

\(fn CHAR &optional OUTER INNER)" t nil)

(autoload 'evil-surround-mode "evil-surround" "\
Buffer-local minor mode to emulate surround.vim.

If called interactively, enable Evil-Surround mode if ARG is
positive, and disable it if ARG is zero or negative.  If called
from Lisp, also enable the mode if ARG is omitted or nil, and
toggle it if ARG is `toggle'; disable the mode otherwise.

\(fn &optional ARG)" t nil)

(autoload 'turn-on-evil-surround-mode "evil-surround" "\
Enable evil-surround-mode in the current buffer." nil nil)

(autoload 'turn-off-evil-surround-mode "evil-surround" "\
Disable evil-surround-mode in the current buffer." nil nil)

(put 'global-evil-surround-mode 'globalized-minor-mode t)

(defvar global-evil-surround-mode nil "\
Non-nil if Global Evil-Surround mode is enabled.
See the `global-evil-surround-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `global-evil-surround-mode'.")

(custom-autoload 'global-evil-surround-mode "evil-surround" nil)

(autoload 'global-evil-surround-mode "evil-surround" "\
Toggle Evil-Surround mode in all buffers.
With prefix ARG, enable Global Evil-Surround mode if ARG is positive;
otherwise, disable it.  If called from Lisp, enable the mode if
ARG is omitted or nil.

Evil-Surround mode is enabled in all buffers where
`turn-on-evil-surround-mode' would do it.
See `evil-surround-mode' for more information on Evil-Surround mode.

\(fn &optional ARG)" t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "evil-surround" '("evil-surround-")))




)
(let ((load-true-file-name "/home/cam/.emacs.d/elpa/evil-nerd-commenter-3.6.1/evil-nerd-commenter-autoloads.el")(load-file-name "/home/cam/.emacs.d/elpa/evil-nerd-commenter-3.6.1/evil-nerd-commenter-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/home/cam/.emacs.d/elpa/evil-nerd-commenter-3.6.1/evil-nerd-commenter-autoloads.el") (car load-path))))



(autoload 'evilnc-comment-or-uncomment-region-internal "evil-nerd-commenter" "\
Comment or uncomment region from START to END.

\(fn START END)" nil nil)

(autoload 'evilnc-comment-or-uncomment-region "evil-nerd-commenter" "\
Comment or uncomment region from START to END.

\(fn START END)" nil nil)

(autoload 'evilnc-comment-or-uncomment-paragraphs "evil-nerd-commenter" "\
Comment or uncomment NUM paragraph(s).
A paragraph is a continuation non-empty lines.
Paragraphs are separated by empty lines.

\(fn &optional NUM)" t nil)

(autoload 'evilnc-comment-or-uncomment-to-the-line "evil-nerd-commenter" "\
Comment or uncomment from current line to LINE-NUM line.

\(fn &optional LINE-NUM)" t nil)

(autoload 'evilnc-quick-comment-or-uncomment-to-the-line "evil-nerd-commenter" "\
Comment/uncomment to line number by LAST-DIGITS.
For example, you can use either \\<M-53>\\[evilnc-quick-comment-or-uncomment-to-the-line] or \\<M-3>\\[evilnc-quick-comment-or-uncomment-to-the-line] to comment to the line 6453

\(fn &optional LAST-DIGITS)" t nil)

(autoload 'evilnc-toggle-invert-comment-line-by-line "evil-nerd-commenter" "\
Please note this command may NOT work on complex evil text objects." t nil)

(autoload 'evilnc-toggle-comment-empty-lines "evil-nerd-commenter" "\
Toggle the flag which decide if empty line will be commented." t nil)

(autoload 'evilnc-comment-or-uncomment-lines "evil-nerd-commenter" "\
Comment or uncomment NUM lines.  NUM could be negative.

Case 1: If no region selected, comment/uncomment on current line.
If NUM>1, comment/uncomment extra N-1 lines from next line.

Case 2: Selected region is expanded to make it contain whole lines.
Then we comment/uncomment the expanded region.  NUM is ignored.

Case 3: If a region inside of ONE line is selected,
we comment/uncomment that region.
CORRECT comment syntax will be used for C++/Java/Javascript.

\(fn &optional NUM)" t nil)

(autoload 'evilnc-copy-and-comment-lines "evil-nerd-commenter" "\
Copy&paste NUM lines and comment out original lines.
NUM could be negative.

Case 1: If no region selected, operate on current line.
if NUM>1, comment/uncomment extra N-1 lines from next line

Case 2: Selected region is expanded to make it contain whole lines.
Then we operate the expanded region.  NUM is ignored.

\(fn &optional NUM)" t nil)

(autoload 'evilnc-comment-and-kill-ring-save "evil-nerd-commenter" "\
Comment lines save origin lines into `kill-ring'.
NUM could be negative.

Case 1: If no region selected, operate on current line.
;; if NUM>1, comment/uncomment extra N-1 lines from next line

Case 2: Selected region is expanded to make it contain whole lines.
Then we operate the expanded region.  NUM is ignored.

\(fn &optional NUM)" t nil)

(autoload 'evilnc-copy-to-line "evil-nerd-commenter" "\
Copy from current line to LINENUM line.  For non-evil user only.

\(fn &optional LINENUM)" t nil)

(autoload 'evilnc-kill-to-line "evil-nerd-commenter" "\
Kill from the current line to the LINENUM line.  For non-evil user only.

\(fn &optional LINENUM)" t nil)

(autoload 'evilnc-version "evil-nerd-commenter" "\
The version number." t nil)

(autoload 'evilnc-default-hotkeys "evil-nerd-commenter" "\
Setup the key bindings of evil-nerd-comment.
If NO-EVIL-KEYBINDINGS is t, we don't define keybindings in EVIL,
if NO-EMACS-KEYBINDINGS is t, we don't define keybindings in EMACS mode.

\(fn &optional NO-EVIL-KEYBINDINGS NO-EMACS-KEYBINDINGS)" t nil)

(autoload 'evilnc-imenu-create-index-function "evil-nerd-commenter" "\
Imenu function find comments." nil nil)

(autoload 'evilnc-comment-or-uncomment-html-tag "evil-nerd-commenter" "\
Comment or uncomment html tag(s).
If no region is selected, current tag under focus is automatically selected.
In this case, only one tag is selected.
If users manually select region, the region could cross multiple sibling tags
and automatically expands to include complete tags.
Users can press \"v\" key in evil mode to select multiple tags.
This command is not dependent on any 3rd party package." t nil)

(autoload 'evilnc-comment-or-uncomment-html-paragraphs "evil-nerd-commenter" "\
Comment or uncomment NUM paragraphs contain html tag.
A paragraph is a continuation non-empty lines.
Paragraphs are separated by empty lines.

\(fn &optional NUM)" t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "evil-nerd-commenter" '("evilnc-")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "evil-nerd-commenter-operator" '("evilnc-")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "evil-nerd-commenter-sdk" '("evilnc-")))




)
(let ((load-true-file-name "/home/cam/.emacs.d/elpa/evil-matchit-3.0.2/evil-matchit-autoloads.el")(load-file-name "/home/cam/.emacs.d/elpa/evil-matchit-3.0.2/evil-matchit-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/home/cam/.emacs.d/elpa/evil-matchit-3.0.2/evil-matchit-autoloads.el") (car load-path))))



(autoload 'evilmi-jump-items-internal "evil-matchit" "\
Jump between items NUM times and apply function FUNC.

\(fn NUM &optional FUNC)" nil nil)

(autoload 'evilmi-jump-items-native "evil-matchit" "\
Jump between items NUM times.

\(fn &optional NUM)" t nil)

(autoload 'evilmi-load-plugin-rules "evil-matchit" "\
Load MODES's plugin RULES.

\(fn MODES RULES)" nil nil)

(autoload 'evilmi-init-plugins "evil-matchit" "\
Load plugins." t nil)

(autoload 'evilmi-select-items "evil-matchit" "\
Select NUM items/tags and the region between them.

\(fn &optional NUM)" t nil)

(autoload 'evilmi-delete-items "evil-matchit" "\
Delete NUM items/tags and the region between them.

\(fn &optional NUM)" t nil)

(autoload 'evilmi-version "evil-matchit" "\
Print version." t nil)

(register-definition-prefixes "evil-matchit" '("evilmi-"))



(autoload 'evilmi-c-get-tag "evil-matchit-c" "\
Get tag at point." nil nil)

(autoload 'evilmi-c-jump "evil-matchit-c" "\
Use INFO to jump NUM times.

\(fn INFO NUM)" nil nil)

(register-definition-prefixes "evil-matchit-c" '("evilmi-c-"))



(autoload 'evilmi-cmake-get-tag "evil-matchit-cmake" nil nil nil)

(autoload 'evilmi-cmake-jump "evil-matchit-cmake" "\


\(fn INFO NUM)" nil nil)

(register-definition-prefixes "evil-matchit-cmake" '("evilmi-cmake-"))



(autoload 'evilmi-diff-get-tag "evil-matchit-diff" "\
Get tag at point." nil nil)

(autoload 'evilmi-diff-jump "evil-matchit-diff" "\
Jump to the matching tag using INFO and NUM.

\(fn INFO NUM)" nil nil)

(register-definition-prefixes "evil-matchit-diff" '("evilmi-diff-"))



(autoload 'evilmi-elixir-get-tag "evil-matchit-elixir" nil nil nil)

(autoload 'evilmi-elixir-jump "evil-matchit-elixir" "\


\(fn RLT NUM)" nil nil)

(register-definition-prefixes "evil-matchit-elixir" '("evilmi-elixir-"))



(autoload 'evilmi-jump-to-percentage "evil-matchit-evil-setup" "\
Like Vim %, NUM is the percentage of location.

\(fn NUM)" t nil)
 (autoload 'evilmi-jump-items "evil-matchit" nil t)

(autoload 'evil-matchit-mode "evil-matchit-evil-setup" "\
Buffer-local minor mode to emulate matchit.vim.

This is a minor mode.  If called interactively, toggle the
`Evil-Matchit mode' mode.  If the prefix argument is positive,
enable the mode, and if it is zero or negative, disable the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable
the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `evil-matchit-mode'.

The mode's hook is called both when the mode is enabled and when
it is disabled.

\(fn &optional ARG)" t nil)

(autoload 'turn-on-evil-matchit-mode "evil-matchit-evil-setup" "\
Enable the minor mode in the current buffer." nil nil)

(autoload 'turn-off-evil-matchit-mode "evil-matchit-evil-setup" "\
Disable the minor mode in the current buffer." nil nil)

(put 'global-evil-matchit-mode 'globalized-minor-mode t)

(defvar global-evil-matchit-mode nil "\
Non-nil if Global Evil-Matchit mode is enabled.
See the `global-evil-matchit-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `global-evil-matchit-mode'.")

(custom-autoload 'global-evil-matchit-mode "evil-matchit-evil-setup" nil)

(autoload 'global-evil-matchit-mode "evil-matchit-evil-setup" "\
Toggle Evil-Matchit mode in all buffers.
With prefix ARG, enable Global Evil-Matchit mode if ARG is positive;
otherwise, disable it.

If called from Lisp, toggle the mode if ARG is `toggle'.
Enable the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

Evil-Matchit mode is enabled in all buffers where
`turn-on-evil-matchit-mode' would do it.

See `evil-matchit-mode' for more information on Evil-Matchit mode.

\(fn &optional ARG)" t nil)

(register-definition-prefixes "evil-matchit-evil-setup" '("evil"))



(autoload 'evilmi-fortran-get-tag "evil-matchit-fortran" nil nil nil)

(autoload 'evilmi-fortran-jump "evil-matchit-fortran" "\


\(fn INFO NUM)" nil nil)

(register-definition-prefixes "evil-matchit-fortran" '("evilmi-fortran-"))



(autoload 'evilmi-html-get-tag "evil-matchit-html" "\
Get current tag." nil nil)

(autoload 'evilmi-html-jump "evil-matchit-html" "\
Use INFO from current tag to jump NUM times.

\(fn INFO NUM)" nil nil)

(register-definition-prefixes "evil-matchit-html" '("evilmi-html--"))



(autoload 'evilmi-indent-get-tag "evil-matchit-indent" "\
Return '(start-position tag-type keyword)." nil nil)

(autoload 'evilmi-indent-extract-keyword "evil-matchit-indent" "\
Extract keyword from LINE.

\(fn LINE)" nil nil)

(autoload 'evilmi-indent-jump "evil-matchit-indent" "\
Use INFO from `evilmi-indent-get-tag' to jump to matched tag.

\(fn INFO)" nil nil)

(register-definition-prefixes "evil-matchit-indent" '("evilmi-"))



(autoload 'evilmi-javascript-get-tag "evil-matchit-javascript" "\
Get tag at point." nil nil)

(autoload 'evilmi-javascript-jump "evil-matchit-javascript" "\
Jump to the matching tag using INFO and NUM.

\(fn INFO NUM)" nil nil)

(register-definition-prefixes "evil-matchit-javascript" '("evilmi-"))



(autoload 'evilmi-latex-get-tag "evil-matchit-latex" nil nil nil)

(autoload 'evilmi-latex-jump "evil-matchit-latex" "\


\(fn RLT NUM)" nil nil)

(register-definition-prefixes "evil-matchit-latex" '("evilmi-latex-"))



(autoload 'evilmi-markdown-get-tag "evil-matchit-markdown" "\
Get current tag.  Return (list start-position tag)." nil nil)

(autoload 'evilmi-markdown-jump "evil-matchit-markdown" "\
Jump to the next tag using INFO and NUM.

\(fn INFO NUM)" nil nil)



(autoload 'evilmi-ocaml-get-tag "evil-matchit-ocaml" "\
Return information of current tag: (list position-of-word word)." nil nil)

(autoload 'evilmi-ocaml-jump "evil-matchit-ocaml" "\


\(fn RLT NUM)" nil nil)

(register-definition-prefixes "evil-matchit-ocaml" '("evilmi-ocaml-"))



(autoload 'evilmi-octave-get-tag "evil-matchit-octave" "\
Get current tag info." nil nil)

(autoload 'evilmi-octave-jump "evil-matchit-octave" "\
Use INFO returned by `evilmi-octave-get-tag' and NUM to jump to matched tag.

\(fn INFO NUM)" nil nil)

(register-definition-prefixes "evil-matchit-octave" '("evilmi-octave-"))



(autoload 'evilmi-org-get-tag "evil-matchit-org" "\
Get current tag in org file." nil nil)

(autoload 'evilmi-org-jump "evil-matchit-org" "\
Jump to the matching tag using INFO and NUM.

\(fn INFO NUM)" nil nil)

(register-definition-prefixes "evil-matchit-org" '("evilmi-"))



(autoload 'evilmi-prog-get-tag "evil-matchit-prog" "\
Get tag at point." nil nil)

(autoload 'evilmi-prog-jump "evil-matchit-prog" "\
Use INFO to jump NUM times.

\(fn INFO NUM)" nil nil)

(register-definition-prefixes "evil-matchit-prog" '("evilmi-prog-"))



(autoload 'evilmi-python-get-tag "evil-matchit-python" "\
Return '(start-position tag-type keyword)." nil nil)

(autoload 'evilmi-python-jump "evil-matchit-python" "\
Use INFO from `evilmi-python-get-tag' to jump to matched tag.
NUM is ignored.

\(fn INFO NUM)" nil nil)

(register-definition-prefixes "evil-matchit-python" '("evilmi-python-"))



(autoload 'evilmi-ruby-get-tag "evil-matchit-ruby" "\
Get tag at point." nil nil)

(autoload 'evilmi-ruby-jump "evil-matchit-ruby" "\
Use INFO to jump NUM times.

\(fn INFO NUM)" nil nil)

(register-definition-prefixes "evil-matchit-ruby" '("evilmi-ruby-"))



(autoload 'evilmi-script-get-tag "evil-matchit-script" "\
Get tag at point." nil nil)

(autoload 'evilmi-script-jump "evil-matchit-script" "\
Use INFO returned by `evilmi-script-get-tag' and NUM to jump to matched tag.

\(fn INFO NUM)" nil nil)

(register-definition-prefixes "evil-matchit-script" '("evilmi-script-"))



(autoload 'evilmi-sdk-curline "evil-matchit-sdk" "\
Get current line text." nil nil)

(autoload 'evilmi-sdk-member "evil-matchit-sdk" "\
Check if KEYWORD exist in KEYWORD-LIST.

\(fn KEYWORD KEYWORD-LIST)" nil nil)

(autoload 'evilmi-sdk-get-tag-info "evil-matchit-sdk" "\
Return (row column is-function-exit-point keyword).
The row and column mark the position in `evilmi-mylang-match-tags'
is-function-exit-point could be unknown status

\(fn KEYWORD MATCH-TAGS)" nil nil)

(autoload 'evilmi-sdk-get-tag "evil-matchit-sdk" "\
Return '(start-point ((row column is-function-exit-point keyword)).

\(fn MATCH-TAGS HOWTOS)" nil nil)

(autoload 'evilmi-sdk-jump "evil-matchit-sdk" "\
Use RLT, NUM, MATCH-TAGS and HOWTOS to jump.
Return nil if no matching tag found.  Please note (point) is changed
after calling this function.

\(fn RLT NUM MATCH-TAGS HOWTOS)" nil nil)

(autoload 'evilmi-sdk-font-p "evil-matchit-sdk" "\
If current font at POS is among FONTS.

\(fn POS FONTS)" nil nil)

(autoload 'evilmi-sdk-semantic-flex "evil-matchit-sdk" "\
Using the syntax table, do something roughly equivalent to flex.
Semantically check between START and END.  Optional argument DEPTH
indicates at what level to scan over entire lists.
The return value is a token stream.  Each element is a list, such of
the form (symbol start-expression .  end-expression) where SYMBOL
denotes the token type.
END does not mark the end of the text scanned, only the end of the
beginning of text scanned.  Thus, if a string extends past END, the
end of the return token will be larger than END.  To truly restrict
scanning, use `narrow-to-region'.
The last argument, LENGTH specifies that only LENGTH tokens are returned.

\(fn START END &optional DEPTH LENGTH)" nil nil)

(autoload 'evilmi-sdk-tokens "evil-matchit-sdk" "\
Get semantic tokens of current N lines.

\(fn N)" nil nil)

(register-definition-prefixes "evil-matchit-sdk" '("evilmi-"))



(autoload 'evilmi-sh-get-tag "evil-matchit-sh" nil nil nil)

(autoload 'evilmi-sh-jump "evil-matchit-sh" "\


\(fn INFO NUM)" nil nil)

(register-definition-prefixes "evil-matchit-sh" '("evilmi-sh-"))



(autoload 'evilmi-simple-get-tag "evil-matchit-simple" "\
Get current tag in simple language." nil nil)

(autoload 'evilmi-simple-jump "evil-matchit-simple" "\
Use INFO of current tag to jump to matching tag.  NUM is ignored.

\(fn INFO NUM)" nil nil)

(register-definition-prefixes "evil-matchit-simple" '("evilmi-"))



(autoload 'evilmi-sql-get-tag "evil-matchit-sql" "\
Get tag at point." nil nil)

(autoload 'evilmi-sql-jump "evil-matchit-sql" "\
Use INFO returned by `evilmi-sql-get-tag' and NUM to jump to matched tag.

\(fn INFO NUM)" nil nil)

(register-definition-prefixes "evil-matchit-sql" '("evilmi-sql-"))



(autoload 'evilmi-template-get-tag "evil-matchit-template" "\
Get tag at point." nil nil)

(autoload 'evilmi-template-jump "evil-matchit-template" "\
Jump to the matching tag using INFO and NUM.

\(fn INFO NUM)" nil nil)

(register-definition-prefixes "evil-matchit-template" '("evilmi-template-"))



(autoload 'evilmi-prompt-line-p "evil-matchit-terminal" "\
If line at POSITION has prompt at the beginning.

\(fn &optional POSITION)" nil nil)

(autoload 'evilmi-terminal-get-tag "evil-matchit-terminal" "\
Get tag at point." nil nil)

(autoload 'evilmi-terminal-jump "evil-matchit-terminal" "\
Use INFO to jump NUM times.

\(fn INFO NUM)" nil nil)

(register-definition-prefixes "evil-matchit-terminal" '("evilmi-terminal-p"))



(autoload 'evilmi-verilog-get-tag "evil-matchit-verilog" "\
Get tag at point." nil nil)

(autoload 'evilmi-verilog-jump "evil-matchit-verilog" "\
Use INFO returned by `evilmi-verilog-get-tag' and NUM to jump to matched tag.

\(fn INFO NUM)" nil nil)

(register-definition-prefixes "evil-matchit-verilog" '("evilmi-verilog-"))



(autoload 'evilmi-yaml-get-tag "evil-matchit-yaml" "\
Return '(start-position tag-type keyword)." nil nil)

(autoload 'evilmi-yaml-jump "evil-matchit-yaml" "\
Use INFO returned by `evilmi-yaml-get-tag' and NUM to jump to matched tag.

\(fn INFO NUM)" nil nil)




)
(let ((load-true-file-name "/home/cam/.emacs.d/elpa/evil-mark-replace-0.0.5/evil-mark-replace-autoloads.el")(load-file-name "/home/cam/.emacs.d/elpa/evil-mark-replace-0.0.5/evil-mark-replace-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/home/cam/.emacs.d/elpa/evil-mark-replace-0.0.5/evil-mark-replace-autoloads.el") (car load-path))))



(autoload 'evilmr-replace "evil-mark-replace" "\
Mark region with MARK-FN and replace in marked area.

\(fn MARK-FN)" nil nil)

(autoload 'evilmr-show-tagged-region "evil-mark-replace" "\
Mark and show tagged region." t nil)

(autoload 'evilmr-tag-selected-region "evil-mark-replace" "\
Tag selected region." t nil)

(autoload 'evilmr-replace-in-buffer "evil-mark-replace" "\
Mark buffer and replace the thing." t nil)

(autoload 'evilmr-replace-in-defun "evil-mark-replace" "\
Mark defun and replace the thing." t nil)

(autoload 'evilmr-replace-in-tagged-region "evil-mark-replace" "\
Mark tagged region and replace the thing." t nil)

(autoload 'evilmr-version "evil-mark-replace" "\
Print current version." t nil)

(register-definition-prefixes "evil-mark-replace" '("evilmr-"))




)
(let ((load-true-file-name "/home/cam/.emacs.d/elpa/evil-find-char-pinyin-20160514.2041/evil-find-char-pinyin-autoloads.el")(load-file-name "/home/cam/.emacs.d/elpa/evil-find-char-pinyin-20160514.2041/evil-find-char-pinyin-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/home/cam/.emacs.d/elpa/evil-find-char-pinyin-20160514.2041/evil-find-char-pinyin-autoloads.el") (car load-path))))



(defvar evil-find-char-pinyin-mode nil "\
Non-nil if Evil-Find-Char-Pinyin mode is enabled.
See the `evil-find-char-pinyin-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `evil-find-char-pinyin-mode'.")

(custom-autoload 'evil-find-char-pinyin-mode "evil-find-char-pinyin" nil)

(autoload 'evil-find-char-pinyin-mode "evil-find-char-pinyin" "\
Minor mode to make Evil's f/F/t/T be able to find Chinese characters.

If called interactively, enable Evil-Find-Char-Pinyin mode if ARG
is positive, and disable it if ARG is zero or negative.  If
called from Lisp, also enable the mode if ARG is omitted or nil,
and toggle it if ARG is `toggle'; disable the mode otherwise.

\(fn &optional ARG)" t nil)

(autoload 'evil-find-char-pinyin-toggle-snipe-integration "evil-find-char-pinyin" "\


\(fn TOGGLE)" nil nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "evil-find-char-pinyin" '("evil-find-char-pinyin-")))




)
(let ((load-true-file-name "/home/cam/.emacs.d/elpa/evil-exchange-20200118.252/evil-exchange-autoloads.el")(load-file-name "/home/cam/.emacs.d/elpa/evil-exchange-20200118.252/evil-exchange-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/home/cam/.emacs.d/elpa/evil-exchange-20200118.252/evil-exchange-autoloads.el") (car load-path))))



(autoload 'evil-exchange "evil-exchange" "\
Exchange two regions with evil motion." t)

(autoload 'evil-exchange-cancel "evil-exchange" "\
Cancel current pending exchange." t nil)

(autoload 'evil-exchange-install "evil-exchange" "\
Setting evil-exchange key bindings." nil nil)

(autoload 'evil-exchange-cx-install "evil-exchange" "\
Setting evil-exchange key bindings in a vim-compatible way" t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "evil-exchange" '("evil-exchange")))




)
(let ((load-true-file-name "/home/cam/.emacs.d/elpa/evil-escape-3.16/evil-escape-autoloads.el")(load-file-name "/home/cam/.emacs.d/elpa/evil-escape-3.16/evil-escape-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/home/cam/.emacs.d/elpa/evil-escape-3.16/evil-escape-autoloads.el") (car load-path))))



(defvar evil-escape-mode nil "\
Non-nil if Evil-Escape mode is enabled.
See the `evil-escape-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `evil-escape-mode'.")

(custom-autoload 'evil-escape-mode "evil-escape" nil)

(autoload 'evil-escape-mode "evil-escape" "\
Buffer-local minor mode to escape insert state and everything else
with a key sequence.

If called interactively, enable Evil-Escape mode if ARG is
positive, and disable it if ARG is zero or negative.  If called
from Lisp, also enable the mode if ARG is omitted or nil, and
toggle it if ARG is `toggle'; disable the mode otherwise.

\(fn &optional ARG)" t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "evil-escape" '("evil-escape")))




)
(let ((load-true-file-name "/home/cam/.emacs.d/elpa/esup-20220202.2335/esup-autoloads.el")(load-file-name "/home/cam/.emacs.d/elpa/esup-20220202.2335/esup-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/home/cam/.emacs.d/elpa/esup-20220202.2335/esup-autoloads.el") (car load-path))))



(autoload 'esup "esup" "\
Profile the startup time of Emacs in the background.
If INIT-FILE is non-nil, profile that instead of USER-INIT-FILE.
ARGS is a list of extra command line arguments to pass to Emacs.

\(fn &optional INIT-FILE &rest ARGS)" t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "esup" '("esup-")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "esup-child" '("esup-" "with-esup-child-increasing-depth")))




)
(let ((load-true-file-name "/home/cam/.emacs.d/elpa/espresso-theme-20210505.1957/espresso-theme-autoloads.el")(load-file-name "/home/cam/.emacs.d/elpa/espresso-theme-20210505.1957/espresso-theme-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/home/cam/.emacs.d/elpa/espresso-theme-20210505.1957/espresso-theme-autoloads.el") (car load-path))))



(when load-file-name (add-to-list 'custom-theme-load-path (file-name-as-directory (file-name-directory load-file-name))))

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "espresso-theme" '("espresso")))




)
(let ((load-true-file-name "/home/cam/.emacs.d/elpa/emms-17/emms-autoloads.el")(load-file-name "/home/cam/.emacs.d/elpa/emms-17/emms-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/home/cam/.emacs.d/elpa/emms-17/emms-autoloads.el") (car load-path))))



(register-definition-prefixes "emms" '("define-emms-" "emms-" "with-current-emms-playlist"))



(register-definition-prefixes "emms-bookmarks" '("emms-bookmarks-"))



(autoload 'emms-browser "emms-browser" "\
Launch or switch to the EMMS Browser." t nil)

(autoload 'emms-smart-browse "emms-browser" "\
Display browser and playlist.
Toggle between selecting browser, playlist or hiding both. Tries
to behave sanely if the user has manually changed the window
configuration." t nil)

(register-definition-prefixes "emms-browser" '("case-fold-string" "emms-"))



(autoload 'emms-cache-enable "emms-cache" "\
Enable caching of Emms track data." t nil)

(autoload 'emms-cache-disable "emms-cache" "\
Disable caching of Emms track data." t nil)

(autoload 'emms-cache-toggle "emms-cache" "\
Toggle caching of Emms track data." t nil)

(register-definition-prefixes "emms-cache" '("emms-cache"))



(register-definition-prefixes "emms-compat" '("emms-"))



(register-definition-prefixes "emms-cue" '("emms-"))



(register-definition-prefixes "emms-history" '("emms-history-"))



(register-definition-prefixes "emms-i18n" '("emms-i18n-"))



(register-definition-prefixes "emms-info" '("emms-info-"))



(register-definition-prefixes "emms-info-exiftool" '("emms-info-exiftool"))



(register-definition-prefixes "emms-info-libtag" '("emms-info-libtag"))



(register-definition-prefixes "emms-info-metaflac" '("emms-info-metaflac"))



(register-definition-prefixes "emms-info-mp3info" '("emms-info-mp3"))



(register-definition-prefixes "emms-info-native" '("emms-info-native"))



(register-definition-prefixes "emms-info-native-flac" '("emms-info-native-flac-"))



(register-definition-prefixes "emms-info-native-mp3" '("emms-info-"))



(register-definition-prefixes "emms-info-native-ogg" '("emms-info-native-ogg-"))



(register-definition-prefixes "emms-info-native-opus" '("emms-info-native-opus--"))



(register-definition-prefixes "emms-info-native-spc" '("emms-info-native-spc-"))



(register-definition-prefixes "emms-info-native-vorbis" '("emms-info-native-vorbis-"))



(register-definition-prefixes "emms-info-ogginfo" '("emms-info-ogginfo"))



(register-definition-prefixes "emms-info-opusinfo" '("emms-info-opusinfo"))



(register-definition-prefixes "emms-info-tinytag" '("emms-info-tinytag"))



(register-definition-prefixes "emms-jack" '("emms-jack-"))



(register-definition-prefixes "emms-last-played" '("emms-last-played-"))



(register-definition-prefixes "emms-later-do" '("emms-later-do"))



(register-definition-prefixes "emms-librefm-scrobbler" '("emms-librefm-scrobbler-"))



(register-definition-prefixes "emms-librefm-stream" '("emms-librefm-stream"))



(autoload 'emms-lyrics-enable "emms-lyrics" "\
Enable displaying emms lyrics." t nil)

(autoload 'emms-lyrics-disable "emms-lyrics" "\
Disable displaying emms lyrics." t nil)

(autoload 'emms-lyrics-toggle "emms-lyrics" "\
Toggle displaying emms lyrics." t nil)

(register-definition-prefixes "emms-lyrics" '("emms-lyrics"))



(register-definition-prefixes "emms-mark" '("emms-mark-"))



(register-definition-prefixes "emms-metaplaylist-mode" '("emms-metaplaylist-mode"))



(defvar emms-mode-line-mode nil "\
Non-nil if Emms-Mode-Line mode is enabled.
See the `emms-mode-line-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `emms-mode-line-mode'.")

(custom-autoload 'emms-mode-line-mode "emms-mode-line" nil)

(autoload 'emms-mode-line-mode "emms-mode-line" "\
Turn on `emms-mode-line' if ARG is positive, off otherwise.

\(fn &optional ARG)" t nil)

(autoload 'emms-mode-line-enable "emms-mode-line" "\
Turn on `emms-mode-line'." t nil)

(make-obsolete 'emms-mode-line-enable 'emms-mode-line-mode '"Apr 2021")

(autoload 'emms-mode-line-disable "emms-mode-line" "\
Turn off `emms-mode-line'." t nil)

(autoload 'emms-mode-line-toggle "emms-mode-line" "\
Toggle `emms-mode-line'." t nil)

(make-obsolete 'emms-mode-line-toggle 'emms-mode-line-mode '"Apr 2021")

(register-definition-prefixes "emms-mode-line" '("emms-mode-line"))



(register-definition-prefixes "emms-mode-line-icon" '("emms-mode-line-icon-"))



(register-definition-prefixes "emms-mpris" '("emms-mpris-"))



(autoload 'emms-player-mpd-clear "emms-player-mpd" "\
Clear the MusicPD playlist." t nil)

(autoload 'emms-player-mpd-connect "emms-player-mpd" "\
Connect to MusicPD and retrieve its current playlist.

Afterward, the status of MusicPD will be tracked.

This also has the effect of changing the current EMMS playlist to
be the same as the current MusicPD playlist.  Thus, this
function is useful to call if the contents of the EMMS playlist
buffer get out-of-sync for some reason." t nil)

(autoload 'emms-player-mpd-show "emms-player-mpd" "\
Describe the current EMMS track in the minibuffer.

If INSERTP is non-nil, insert the description into the current
buffer instead.

If CALLBACK is a function, call it with the current buffer and
description as arguments instead of displaying the description or
inserting it.

This function uses `emms-show-format' to format the current track.
It differs from `emms-show' in that it asks MusicPD for the current track,
rather than EMMS.

\(fn &optional INSERTP CALLBACK)" t nil)

(register-definition-prefixes "emms-player-mpd" '("emms-"))



(register-definition-prefixes "emms-player-mpg321-remote" '("emms-player-mpg321-remote"))



(register-definition-prefixes "emms-player-mplayer" '("emms-player-mplayer-" "mplayer"))



(register-definition-prefixes "emms-player-mpv" '("emms-player-mpv"))



(register-definition-prefixes "emms-player-simple" '("alsaplayer" "define-emms-simple-player" "emms-player-" "fluidsynth" "mikmod" "mpg321" "ogg123" "playsound" "speexdec" "timidity"))



(register-definition-prefixes "emms-player-vlc" '("emms-" "vlc"))



(register-definition-prefixes "emms-player-xine" '("emms-" "xine"))



(defvar emms-playing-time-display-mode nil "\
Non-nil if Emms-Playing-Time-Display mode is enabled.
See the `emms-playing-time-display-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `emms-playing-time-display-mode'.")

(custom-autoload 'emms-playing-time-display-mode "emms-playing-time" nil)

(autoload 'emms-playing-time-display-mode "emms-playing-time" "\
Minor mode to display playing time on mode line.

This is a minor mode.  If called interactively, toggle the
`Emms-Playing-Time-Display mode' mode.  If the prefix argument is
positive, enable the mode, and if it is zero or negative, disable
the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable
the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `(default-value \\='emms-playing-time-display-mode)'.

The mode's hook is called both when the mode is enabled and when
it is disabled.

\(fn &optional ARG)" t nil)

(autoload 'emms-playing-time-enable-display "emms-playing-time" "\
Display playing time on mode line." t nil)

(make-obsolete 'emms-playing-time-enable-display 'emms-playing-time-display-mode '"Apr 2021")

(autoload 'emms-playing-time-disable-display "emms-playing-time" "\
Remove playing time from mode line." t nil)

(make-obsolete 'emms-playing-time-disable-display 'emms-playing-time-display-mode '"Apr 2021")

(register-definition-prefixes "emms-playing-time" '("emms-playing-time"))



(register-definition-prefixes "emms-playlist-limit" '("define-emms-playlist-limit" "emms-playlist-limit-"))



(autoload 'emms-playlist-mode "emms-playlist-mode" "\
A major mode for Emms playlists.
\\{emms-playlist-mode-map}" t nil)

(register-definition-prefixes "emms-playlist-mode" '("emms"))



(register-definition-prefixes "emms-playlist-sort" '("define-emms-playlist-sort" "emms-"))



(autoload 'emms-score-enable "emms-score" "\
Turn on emms-score." t nil)

(autoload 'emms-score-disable "emms-score" "\
Turn off emms-score." t nil)

(autoload 'emms-score-toggle "emms-score" "\
Toggle emms-score." t nil)

(register-definition-prefixes "emms-score" '("emms-score"))



(autoload 'emms-minimalistic "emms-setup" "\
An Emms setup script.
Invisible playlists and all the basics for playing media." nil nil)

(autoload 'emms-all "emms-setup" "\
An Emms setup script.
Everything included in the `emms-minimalistic' setup and adds all
the stable features which come with the Emms distribution." nil nil)

(autoload 'emms-default-players "emms-setup" "\
Set `emms-player-list' to `emms-setup-default-player-list'." nil nil)

(autoload 'emms-devel "emms-setup" nil nil nil)

(autoload 'emms-standard "emms-setup" nil nil nil)

(register-definition-prefixes "emms-setup" '("emms-setup-d"))



(register-definition-prefixes "emms-show-all" '("emms-show-all"))


 (autoload 'emms-play-file "emms-source-file" nil t)
 (autoload 'emms-add-file "emms-source-file" nil t)
 (autoload 'emms-play-directory "emms-source-file" nil t)
 (autoload 'emms-add-directory "emms-source-file" nil t)
 (autoload 'emms-play-directory-tree "emms-source-file" nil t)
 (autoload 'emms-add-directory-tree "emms-source-file" nil t)
 (autoload 'emms-play-find "emms-source-file" nil t)
 (autoload 'emms-add-find "emms-source-file" nil t)
 (autoload 'emms-play-dired "emms-source-file" nil t)
 (autoload 'emms-add-dired "emms-source-file" nil t)

(autoload 'emms-source-file-directory-tree "emms-source-file" "\
Return a list of all files under DIR that match REGEX.
This function uses `emms-source-file-directory-tree-function'.

\(fn DIR REGEX)" nil nil)

(autoload 'emms-source-file-regex "emms-source-file" "\
Return a regexp that matches everything any player (that supports
files) can play." nil nil)

(autoload 'emms-locate "emms-source-file" "\
Search for REGEXP and display the results in a locate buffer

\(fn REGEXP)" t nil)
 (autoload 'emms-play-url "emms-source-file" nil t)
 (autoload 'emms-add-url "emms-source-file" nil t)
 (autoload 'emms-play-streamlist "emms-source-file" nil t)
 (autoload 'emms-add-streamlist "emms-source-file" nil t)

(register-definition-prefixes "emms-source-file" '("dire" "emms-" "file" "find" "streamlist" "url"))


 (autoload 'emms-play-playlist "emms-source-playlist" nil t)
 (autoload 'emms-add-playlist "emms-source-playlist" nil t)
 (autoload 'emms-play-native-playlist "emms-source-playlist" nil t)
 (autoload 'emms-add-native-playlist "emms-source-playlist" nil t)
 (autoload 'emms-play-m3u-playlist "emms-source-playlist" nil t)
 (autoload 'emms-add-m3u-playlist "emms-source-playlist" nil t)
 (autoload 'emms-play-pls-playlist "emms-source-playlist" nil t)
 (autoload 'emms-add-pls-playlist "emms-source-playlist" nil t)
 (autoload 'emms-play-playlist-file "emms-source-playlist" nil t)
 (autoload 'emms-add-playlist-file "emms-source-playlist" nil t)
 (autoload 'emms-play-playlist-directory
          "emms-source-playlist" nil t)
 (autoload 'emms-add-playlist-directory
          "emms-source-playlist" nil t)
 (autoload 'emms-play-playlist-directory-tree
          "emms-source-playlist" nil t)
 (autoload 'emms-add-playlist-directory-tree
          "emms-source-file" nil t)

(register-definition-prefixes "emms-source-playlist" '("emms-" "m3u-playlist" "native-playlist" "playlist" "pls-playlist"))



(autoload 'emms-streams "emms-streams" "\
Create or switch to the built-in streaming audio playlist." t nil)

(register-definition-prefixes "emms-streams" '("emms-streams-"))



(register-definition-prefixes "emms-tag-editor" '("emms-tag-editor-"))



(register-definition-prefixes "emms-tag-tracktag" '("emms-tag-tracktag-"))



(register-definition-prefixes "emms-url" '("emms-"))



(autoload 'emms-volume-raise "emms-volume" "\
Raise the volume." t nil)

(autoload 'emms-volume-lower "emms-volume" "\
Lower the volume." t nil)

(autoload 'emms-volume-mode-plus "emms-volume" "\
Raise volume and enable or extend the `emms-volume-minor-mode' timeout." t nil)

(autoload 'emms-volume-mode-minus "emms-volume" "\
Lower volume and enable or extend the `emms-volume-minor-mode' timeout." t nil)

(register-definition-prefixes "emms-volume" '("emms-volume-"))



(autoload 'emms-volume-amixer-change "emms-volume-amixer" "\
Change amixer master volume by AMOUNT.

\(fn AMOUNT)" nil nil)

(register-definition-prefixes "emms-volume-amixer" '("emms-volume-amixer-"))



(autoload 'emms-volume-mixerctl-change "emms-volume-mixerctl" "\
Change mixerctl master volume by AMOUNT.

\(fn AMOUNT)" nil nil)

(register-definition-prefixes "emms-volume-mixerctl" '("emms-volume-mixerctl-c"))



(autoload 'emms-volume-pulse-change "emms-volume-pulse" "\
Change PulseAudio volume by AMOUNT.

\(fn AMOUNT)" nil nil)

(register-definition-prefixes "emms-volume-pulse" '("emms-volume-"))



(autoload 'emms-volume-sndioctl-change "emms-volume-sndioctl" "\
Change sndioctl level by AMOUNT.

\(fn AMOUNT)" nil nil)

(register-definition-prefixes "emms-volume-sndioctl" '("emms-volume-sndioctl-"))




)
(let ((load-true-file-name "/home/cam/.emacs.d/elpa/emmet-mode-1.0.8/emmet-mode-autoloads.el")(load-file-name "/home/cam/.emacs.d/elpa/emmet-mode-1.0.8/emmet-mode-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/home/cam/.emacs.d/elpa/emmet-mode-1.0.8/emmet-mode-autoloads.el") (car load-path))))



(autoload 'emmet-expand-line "emmet-mode" "\
Replace the current line's emmet expression with the corresponding expansion.
If prefix ARG is given or region is visible call `emmet-preview' to start an
interactive preview.

Otherwise expand line directly.

For more information see `emmet-mode'.

\(fn ARG)" t nil)

(autoload 'emmet-mode "emmet-mode" "\
Minor mode for writing HTML and CSS markup.
With emmet for HTML and CSS you can write a line like

If called interactively, enable Emmet mode if ARG is positive,
and disable it if ARG is zero or negative.  If called from Lisp,
also enable the mode if ARG is omitted or nil, and toggle it if
ARG is `toggle'; disable the mode otherwise.

  ul#name>li.item*2

and have it expanded to

  <ul id=\"name\">
    <li class=\"item\"></li>
    <li class=\"item\"></li>
  </ul>

This minor mode defines keys for quick access:

\\{emmet-mode-keymap}

Home page URL `http://www.emacswiki.org/emacs/Emmet'.

See also `emmet-expand-line'.

\(fn &optional ARG)" t nil)

(autoload 'emmet-expand-yas "emmet-mode" nil t nil)

(autoload 'emmet-preview "emmet-mode" "\
Expand emmet between BEG and END interactively.
This will show a preview of the expanded emmet code and you can
accept it or skip it.

\(fn BEG END)" t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "emmet-mode" '("emmet-")))




)
(let ((load-true-file-name "/home/cam/.emacs.d/elpa/company-20231208.1730/company-autoloads.el")(load-file-name "/home/cam/.emacs.d/elpa/company-20231208.1730/company-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/home/cam/.emacs.d/elpa/company-20231208.1730/company-autoloads.el") (car load-path))))



(autoload 'company-mode "company" "\
\"complete anything\"; is an in-buffer completion framework.
Completion starts automatically, depending on the values
`company-idle-delay' and `company-minimum-prefix-length'.

This is a minor mode.  If called interactively, toggle the
`Company mode' mode.  If the prefix argument is positive, enable
the mode, and if it is zero or negative, disable the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable
the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `company-mode'.

The mode's hook is called both when the mode is enabled and when
it is disabled.

Completion can be controlled with the commands:
`company-complete-common', `company-complete-selection', `company-complete',
`company-select-next', `company-select-previous'.  If these commands are
called before `company-idle-delay', completion will also start.

Completions can be searched with `company-search-candidates' or
`company-filter-candidates'.  These can be used while completion is
inactive, as well.

The completion data is retrieved using `company-backends' and displayed
using `company-frontends'.  If you want to start a specific backend, call
it interactively or use `company-begin-backend'.

By default, the completions list is sorted alphabetically, unless the
backend chooses otherwise, or `company-transformers' changes it later.

regular keymap (`company-mode-map'):

\\{company-mode-map}
keymap during active completions (`company-active-map'):

\\{company-active-map}

\(fn &optional ARG)" t nil)

(put 'global-company-mode 'globalized-minor-mode t)

(defvar global-company-mode nil "\
Non-nil if Global Company mode is enabled.
See the `global-company-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `global-company-mode'.")

(custom-autoload 'global-company-mode "company" nil)

(autoload 'global-company-mode "company" "\
Toggle Company mode in all buffers.
With prefix ARG, enable Global Company mode if ARG is positive;
otherwise, disable it.

If called from Lisp, toggle the mode if ARG is `toggle'.
Enable the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

Company mode is enabled in all buffers where `company-mode-on' would
do it.

See `company-mode' for more information on Company mode.

\(fn &optional ARG)" t nil)

(autoload 'company-manual-begin "company" "\
Start the completion interface.

Unlike `company-complete-selection' or `company-complete', this command
doesn't cause any immediate changes to the buffer text." t nil)

(autoload 'company-complete "company" "\
Insert the common part of all candidates or the current selection.
The first time this is called, the common part is inserted, the second
time, or when the selection has been changed, the selected candidate is
inserted." t nil)

(register-definition-prefixes "company" '("company-"))



(autoload 'company-abbrev "company-abbrev" "\
`company-mode' completion backend for abbrev.

\(fn COMMAND &optional ARG &rest IGNORED)" t nil)

(register-definition-prefixes "company-abbrev" '("company-abbrev-insert"))



(autoload 'company-bbdb "company-bbdb" "\
`company-mode' completion backend for BBDB.

\(fn COMMAND &optional ARG &rest IGNORE)" t nil)

(register-definition-prefixes "company-bbdb" '("company-bbdb-"))



(register-definition-prefixes "company-capf" '("company-"))



(register-definition-prefixes "company-clang" '("company-clang"))



(register-definition-prefixes "company-cmake" '("company-cmake"))



(autoload 'company-css "company-css" "\
`company-mode' completion backend for `css-mode'.

\(fn COMMAND &optional ARG &rest IGNORED)" t nil)

(register-definition-prefixes "company-css" '("company-css-"))



(autoload 'company-dabbrev "company-dabbrev" "\
dabbrev-like `company-mode' completion backend.

\(fn COMMAND &optional ARG &rest IGNORED)" t nil)

(register-definition-prefixes "company-dabbrev" '("company-dabbrev-"))



(autoload 'company-dabbrev-code "company-dabbrev-code" "\
dabbrev-like `company-mode' backend for code.
The backend looks for all symbols in the current buffer that aren't in
comments or strings.

\(fn COMMAND &optional ARG &rest IGNORED)" t nil)

(register-definition-prefixes "company-dabbrev-code" '("company-dabbrev-code-"))



(autoload 'company-elisp "company-elisp" "\
`company-mode' completion backend for Emacs Lisp.

\(fn COMMAND &optional ARG &rest IGNORED)" t nil)

(register-definition-prefixes "company-elisp" '("company-elisp-"))



(autoload 'company-etags "company-etags" "\
`company-mode' completion backend for etags.

\(fn COMMAND &optional ARG &rest IGNORED)" t nil)

(register-definition-prefixes "company-etags" '("company-etags-"))



(autoload 'company-files "company-files" "\
`company-mode' completion backend existing file names.
Completions works for proper absolute and relative files paths.
File paths with spaces are only supported inside strings.

\(fn COMMAND &optional ARG &rest IGNORED)" t nil)

(register-definition-prefixes "company-files" '("company-file"))



(autoload 'company-gtags "company-gtags" "\
`company-mode' completion backend for GNU Global.

\(fn COMMAND &optional ARG &rest IGNORED)" t nil)

(register-definition-prefixes "company-gtags" '("company-gtags-"))



(autoload 'company-ispell "company-ispell" "\
`company-mode' completion backend using Ispell.

\(fn COMMAND &optional ARG &rest IGNORED)" t nil)

(register-definition-prefixes "company-ispell" '("company-"))



(autoload 'company-keywords "company-keywords" "\
`company-mode' backend for programming language keywords.

\(fn COMMAND &optional ARG &rest IGNORED)" t nil)

(register-definition-prefixes "company-keywords" '("company-keywords-"))



(autoload 'company-nxml "company-nxml" "\
`company-mode' completion backend for `nxml-mode'.

\(fn COMMAND &optional ARG &rest IGNORED)" t nil)

(register-definition-prefixes "company-nxml" '("company-nxml-"))



(autoload 'company-oddmuse "company-oddmuse" "\
`company-mode' completion backend for `oddmuse-mode'.

\(fn COMMAND &optional ARG &rest IGNORED)" t nil)

(register-definition-prefixes "company-oddmuse" '("company-oddmuse-"))



(autoload 'company-semantic "company-semantic" "\
`company-mode' completion backend using CEDET Semantic.

\(fn COMMAND &optional ARG &rest IGNORED)" t nil)

(register-definition-prefixes "company-semantic" '("company-semantic-"))



(register-definition-prefixes "company-template" '("company-template-"))



(autoload 'company-tempo "company-tempo" "\
`company-mode' completion backend for tempo.

\(fn COMMAND &optional ARG &rest IGNORED)" t nil)

(register-definition-prefixes "company-tempo" '("company-tempo-"))



(autoload 'company-tng-frontend "company-tng" "\
When the user changes the selection at least once, this
frontend will display the candidate in the buffer as if it's
already there and any key outside of `company-active-map' will
confirm the selection and finish the completion.

\(fn COMMAND)" nil nil)

(define-obsolete-function-alias 'company-tng-configure-default 'company-tng-mode "0.10.0" "\
Applies the default configuration to enable company-tng.")

(defvar company-tng-mode nil "\
Non-nil if Company-Tng mode is enabled.
See the `company-tng-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `company-tng-mode'.")

(custom-autoload 'company-tng-mode "company-tng" nil)

(autoload 'company-tng-mode "company-tng" "\
This minor mode enables `company-tng-frontend'.

This is a minor mode.  If called interactively, toggle the
`Company-Tng mode' mode.  If the prefix argument is positive,
enable the mode, and if it is zero or negative, disable the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable
the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `(default-value \\='company-tng-mode)'.

The mode's hook is called both when the mode is enabled and when
it is disabled.

\(fn &optional ARG)" t nil)

(register-definition-prefixes "company-tng" '("company-tng-"))



(autoload 'company-yasnippet "company-yasnippet" "\
`company-mode' backend for `yasnippet'.

This backend should be used with care, because as long as there are
snippets defined for the current major mode, this backend will always
shadow backends that come after it.  Recommended usages:

* In a buffer-local value of `company-backends', grouped with a backend or
  several that provide actual text completions.

  (add-hook \\='js-mode-hook
            (lambda ()
              (set (make-local-variable \\='company-backends)
                   \\='((company-dabbrev-code company-yasnippet)))))

* After keyword `:with', grouped with other backends.

  (push \\='(company-semantic :with company-yasnippet) company-backends)

* Not in `company-backends', just bound to a key.

  (global-set-key (kbd \"C-c y\") \\='company-yasnippet)

\(fn COMMAND &optional ARG &rest IGNORE)" t nil)

(register-definition-prefixes "company-yasnippet" '("company-yasnippet-"))




)
(let ((load-true-file-name "/home/cam/.emacs.d/elpa/elpy-20230803.1455/elpy-autoloads.el")(load-file-name "/home/cam/.emacs.d/elpa/elpy-20230803.1455/elpy-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/home/cam/.emacs.d/elpa/elpy-20230803.1455/elpy-autoloads.el") (car load-path))))



(autoload 'elpy-enable "elpy" "\
Enable Elpy in all future Python buffers.

\(fn &optional IGNORED)" t nil)

(autoload 'elpy-mode "elpy" "\
Minor mode in Python buffers for the Emacs Lisp Python Environment.

This is a minor mode.  If called interactively, toggle the `Elpy
mode' mode.  If the prefix argument is positive, enable the mode,
and if it is zero or negative, disable the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable
the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `elpy-mode'.

The mode's hook is called both when the mode is enabled and when
it is disabled.

This mode fully supports virtualenvs. Once you switch a
virtualenv using \\[pyvenv-workon], you can use
\\[elpy-rpc-restart] to make the elpy Python process use your
virtualenv.

\\{elpy-mode-map}

\(fn &optional ARG)" t nil)

(autoload 'elpy-config "elpy" "\
Configure Elpy.

This function will pop up a configuration buffer, which is mostly
a customize buffer, but has some more options." t nil)

(autoload 'elpy-version "elpy" "\
Display the version of Elpy." t nil)

(register-definition-prefixes "elpy" '("elpy-"))



(register-definition-prefixes "elpy-django" '("elpy-"))



(register-definition-prefixes "elpy-profile" '("elpy-profile-"))



(register-definition-prefixes "elpy-refactor" '("elpy-refactor-"))



(register-definition-prefixes "elpy-rpc" '("elpy-" "with-elpy-rpc-virtualenv-activated"))



(register-definition-prefixes "elpy-shell" '("elpy-"))




)
(let ((load-true-file-name "/home/cam/.emacs.d/elpa/elpa-mirror-2.2.2/elpa-mirror-autoloads.el")(load-file-name "/home/cam/.emacs.d/elpa/elpa-mirror-2.2.2/elpa-mirror-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/home/cam/.emacs.d/elpa/elpa-mirror-2.2.2/elpa-mirror-autoloads.el") (car load-path))))



(autoload 'elpamr-version "elpa-mirror" "\
Current version." t nil)

(autoload 'elpamr-create-mirror-for-installed "elpa-mirror" "\
Export installed packages into a new directory.
Create the html files for the mirror site.

The first valid directory found from the below list
will be used as mirror package's output directory:
1. Argument: OUTPUT-DIRECTORY
2. Variable: `elpamr-default-output-directory'
3. Ask user to provide.

When RECREATE-DIRECTORY is non-nil, OUTPUT-DIRECTORY
will be deleted and recreated.

\(fn &optional OUTPUT-DIRECTORY RECREATE-DIRECTORY)" t nil)

(register-definition-prefixes "elpa-mirror" '("elpamr-"))




)
(let ((load-true-file-name "/home/cam/.emacs.d/elpa/dracula-theme-20231013.821/dracula-theme-autoloads.el")(load-file-name "/home/cam/.emacs.d/elpa/dracula-theme-20231013.821/dracula-theme-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/home/cam/.emacs.d/elpa/dracula-theme-20231013.821/dracula-theme-autoloads.el") (car load-path))))



(when load-file-name (add-to-list 'custom-theme-load-path (file-name-as-directory (file-name-directory load-file-name))))

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "dracula-theme" '("dracula-")))




)
(let ((load-true-file-name "/home/cam/.emacs.d/elpa/doom-themes-20231208.2011/doom-themes-autoloads.el")(load-file-name "/home/cam/.emacs.d/elpa/doom-themes-20231208.2011/doom-themes-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/home/cam/.emacs.d/elpa/doom-themes-20231208.2011/doom-themes-autoloads.el") (car load-path))))



(register-definition-prefixes "doom-1337-theme" '("doom-1337"))



(register-definition-prefixes "doom-Iosvkem-theme" '("doom-Iosvkem"))



(register-definition-prefixes "doom-acario-dark-theme" '("doom-acario-dark"))



(register-definition-prefixes "doom-acario-light-theme" '("doom-acario-light"))



(register-definition-prefixes "doom-ayu-dark-theme" '("doom-ayu-dark"))



(register-definition-prefixes "doom-ayu-light-theme" '("doom-ayu-light"))



(register-definition-prefixes "doom-ayu-mirage-theme" '("doom-ayu-mirage"))



(register-definition-prefixes "doom-badger-theme" '("doom-badger"))



(register-definition-prefixes "doom-bluloco-dark-theme" '("doom-bluloco-dark"))



(register-definition-prefixes "doom-bluloco-light-theme" '("doom-bluloco-light"))



(register-definition-prefixes "doom-challenger-deep-theme" '("doom-challenger-deep"))



(register-definition-prefixes "doom-city-lights-theme" '("doom-city-lights"))



(register-definition-prefixes "doom-dark+-theme" '("doom-dark+"))



(register-definition-prefixes "doom-dracula-theme" '("doom-dracula"))



(register-definition-prefixes "doom-earl-grey-theme" '("doom-earl-grey"))



(register-definition-prefixes "doom-ephemeral-theme" '("doom-ephemeral"))



(register-definition-prefixes "doom-fairy-floss-theme" '("doom-fairy-floss"))



(register-definition-prefixes "doom-feather-dark-theme" '("doom-feather-"))



(register-definition-prefixes "doom-feather-light-theme" '("doom-feather-light"))



(register-definition-prefixes "doom-flatwhite-theme" '("doom-f"))



(register-definition-prefixes "doom-gruvbox-light-theme" '("doom-gruvbox-light"))



(register-definition-prefixes "doom-gruvbox-theme" '("doom-gruvbox"))



(register-definition-prefixes "doom-henna-theme" '("doom-henna"))



(register-definition-prefixes "doom-homage-black-theme" '("doom-homage-black"))



(register-definition-prefixes "doom-homage-white-theme" '("doom-homage-white"))



(register-definition-prefixes "doom-horizon-theme" '("doom-horizon"))



(register-definition-prefixes "doom-ir-black-theme" '("doom-ir-black"))



(register-definition-prefixes "doom-lantern-theme" '("doom-lantern"))



(register-definition-prefixes "doom-laserwave-theme" '("doom-laserwave"))



(register-definition-prefixes "doom-manegarm-theme" '("doom-manegarm"))



(register-definition-prefixes "doom-material-dark-theme" '("doom-material-"))



(register-definition-prefixes "doom-material-theme" '("doom-material"))



(register-definition-prefixes "doom-meltbus-theme" '("doom-meltbus"))



(register-definition-prefixes "doom-miramare-theme" '("doom-miramare"))



(register-definition-prefixes "doom-molokai-theme" '("doom-molokai"))



(register-definition-prefixes "doom-monokai-classic-theme" '("doom-monokai-classic"))



(register-definition-prefixes "doom-monokai-machine-theme" '("doom-monokai-machine"))



(register-definition-prefixes "doom-monokai-octagon-theme" '("doom-monokai-octagon"))



(register-definition-prefixes "doom-monokai-pro-theme" '("doom-monokai-pro"))



(register-definition-prefixes "doom-monokai-ristretto-theme" '("doom-monokai-ristretto"))



(register-definition-prefixes "doom-monokai-spectrum-theme" '("doom-monokai-spectrum"))



(register-definition-prefixes "doom-moonlight-theme" '("doom-moonlight"))



(register-definition-prefixes "doom-nord-aurora-theme" '("doom-nord-aurora"))



(register-definition-prefixes "doom-nord-light-theme" '("doom-nord-light"))



(register-definition-prefixes "doom-nord-theme" '("doom-nord"))



(register-definition-prefixes "doom-nova-theme" '("doom-nova"))



(register-definition-prefixes "doom-oceanic-next-theme" '("doom-oceanic-next"))



(register-definition-prefixes "doom-oksolar-dark-theme" '("doom-oksolar-dark"))



(register-definition-prefixes "doom-oksolar-light-theme" '("doom-oksolar-light"))



(register-definition-prefixes "doom-old-hope-theme" '("doom-old-hope"))



(register-definition-prefixes "doom-one-light-theme" '("doom-one-light"))



(register-definition-prefixes "doom-one-theme" '("doom-one"))



(register-definition-prefixes "doom-opera-light-theme" '("doom-opera-light"))



(register-definition-prefixes "doom-opera-theme" '("doom-opera"))



(register-definition-prefixes "doom-outrun-electric-theme" '("doom-outrun-electric"))



(register-definition-prefixes "doom-palenight-theme" '("doom-palenight"))



(register-definition-prefixes "doom-peacock-theme" '("doom-peacock"))



(register-definition-prefixes "doom-pine-theme" '("doom-pine"))



(register-definition-prefixes "doom-plain-dark-theme" '("doom-plain-"))



(register-definition-prefixes "doom-plain-theme" '("doom-plain"))



(register-definition-prefixes "doom-rouge-theme" '("doom-rouge"))



(register-definition-prefixes "doom-shades-of-purple-theme" '("doom-shades-of-purple"))



(register-definition-prefixes "doom-snazzy-theme" '("doom-snazzy"))



(register-definition-prefixes "doom-solarized-dark-high-contrast-theme" '("doom-solarized-dark-high-contrast"))



(register-definition-prefixes "doom-solarized-dark-theme" '("doom-solarized-dark"))



(register-definition-prefixes "doom-solarized-light-theme" '("doom-solarized-light"))



(register-definition-prefixes "doom-sourcerer-theme" '("doom-sourcerer"))



(register-definition-prefixes "doom-spacegrey-theme" '("doom-spacegrey"))



(autoload 'doom-name-to-rgb "doom-themes" "\
Retrieves the hexidecimal string repesented the named COLOR (e.g. \"red\")
for FRAME (defaults to the current frame).

\(fn COLOR)" nil nil)

(autoload 'doom-blend "doom-themes" "\
Blend two colors (hexidecimal strings) together by a coefficient ALPHA (a
float between 0 and 1)

\(fn COLOR1 COLOR2 ALPHA)" nil nil)

(autoload 'doom-darken "doom-themes" "\
Darken a COLOR (a hexidecimal string) by a coefficient ALPHA (a float between
0 and 1).

\(fn COLOR ALPHA)" nil nil)

(autoload 'doom-lighten "doom-themes" "\
Brighten a COLOR (a hexidecimal string) by a coefficient ALPHA (a float
between 0 and 1).

\(fn COLOR ALPHA)" nil nil)

(autoload 'doom-color "doom-themes" "\
Retrieve a specific color named NAME (a symbol) from the current theme.

\(fn NAME &optional TYPE)" nil nil)

(autoload 'doom-ref "doom-themes" "\
TODO

\(fn FACE PROP &optional CLASS)" nil nil)

(autoload 'doom-themes-set-faces "doom-themes" "\
Customize THEME (a symbol) with FACES.

If THEME is nil, it applies to all themes you load. FACES is a list of Doom
theme face specs. These is a simplified spec. For example:

  (doom-themes-set-faces \\='user
    \\='(default :background red :foreground blue)
    \\='(doom-modeline-bar :background (if -modeline-bright modeline-bg highlight))
    \\='(doom-modeline-buffer-file :inherit \\='mode-line-buffer-id :weight \\='bold)
    \\='(doom-modeline-buffer-path :inherit \\='mode-line-emphasis :weight \\='bold)
    \\='(doom-modeline-buffer-project-root :foreground green :weight \\='bold))

\(fn THEME &rest FACES)" nil nil)

(function-put 'doom-themes-set-faces 'lisp-indent-function 'defun)

(when (and (boundp 'custom-theme-load-path) load-file-name) (let* ((base (file-name-directory load-file-name)) (dir (expand-file-name "themes/" base))) (add-to-list 'custom-theme-load-path (or (and (file-directory-p dir) dir) base))))

(register-definition-prefixes "doom-themes" '("def-doom-theme" "doom-"))



(register-definition-prefixes "doom-themes-base" '("doom-themes-base-"))



(autoload 'doom-themes-neotree-config "doom-themes-ext-neotree" "\
Install doom-themes' neotree configuration.

Includes an Atom-esque icon theme and highlighting based on filetype." nil nil)

(register-definition-prefixes "doom-themes-ext-neotree" '("doom-"))



(autoload 'doom-themes-org-config "doom-themes-ext-org" "\
Load `doom-themes-ext-org'." nil nil)

(register-definition-prefixes "doom-themes-ext-org" '("doom-themes-"))



(autoload 'doom-themes-treemacs-config "doom-themes-ext-treemacs" "\
Install doom-themes' treemacs configuration.

Includes an Atom-esque icon theme and highlighting based on filetype." nil nil)

(register-definition-prefixes "doom-themes-ext-treemacs" '("doom-themes-"))



(autoload 'doom-themes-visual-bell-fn "doom-themes-ext-visual-bell" "\
Blink the mode-line red briefly. Set `ring-bell-function' to this to use it." nil nil)

(autoload 'doom-themes-visual-bell-config "doom-themes-ext-visual-bell" "\
Enable flashing the mode-line on error." nil nil)



(register-definition-prefixes "doom-tokyo-night-theme" '("doom-tokyo-night"))



(register-definition-prefixes "doom-tomorrow-day-theme" '("doom-tomorrow-day"))



(register-definition-prefixes "doom-tomorrow-night-theme" '("doom-tomorrow-night"))



(register-definition-prefixes "doom-vibrant-theme" '("doom-vibrant"))



(register-definition-prefixes "doom-wilmersdorf-theme" '("doom-wilmersdorf"))



(register-definition-prefixes "doom-xcode-theme" '("doom-xcode"))



(register-definition-prefixes "doom-zenburn-theme" '("doom-zenburn"))




)
(let ((load-true-file-name "/home/cam/.emacs.d/elpa/django-theme-20131022.902/django-theme-autoloads.el")(load-file-name "/home/cam/.emacs.d/elpa/django-theme-20131022.902/django-theme-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/home/cam/.emacs.d/elpa/django-theme-20131022.902/django-theme-autoloads.el") (car load-path))))



(and load-file-name (boundp 'custom-theme-load-path) (add-to-list 'custom-theme-load-path (file-name-as-directory (file-name-directory load-file-name))))

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "django-theme" '("django")))




)
(let ((load-true-file-name "/home/cam/.emacs.d/elpa/diredfl-0.4/diredfl-autoloads.el")(load-file-name "/home/cam/.emacs.d/elpa/diredfl-0.4/diredfl-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/home/cam/.emacs.d/elpa/diredfl-0.4/diredfl-autoloads.el") (car load-path))))



(autoload 'diredfl-mode "diredfl" "\
Enable additional font locking in `dired-mode'.

If called interactively, enable Diredfl mode if ARG is positive,
and disable it if ARG is zero or negative.  If called from Lisp,
also enable the mode if ARG is omitted or nil, and toggle it if
ARG is `toggle'; disable the mode otherwise.

\(fn &optional ARG)" t nil)

(put 'diredfl-global-mode 'globalized-minor-mode t)

(defvar diredfl-global-mode nil "\
Non-nil if Diredfl-Global mode is enabled.
See the `diredfl-global-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `diredfl-global-mode'.")

(custom-autoload 'diredfl-global-mode "diredfl" nil)

(autoload 'diredfl-global-mode "diredfl" "\
Toggle Diredfl mode in all buffers.
With prefix ARG, enable Diredfl-Global mode if ARG is positive;
otherwise, disable it.  If called from Lisp, enable the mode if
ARG is omitted or nil.

Diredfl mode is enabled in all buffers where
`(lambda nil (when (derived-mode-p 'dired-mode) (diredfl-mode)))' would do it.
See `diredfl-mode' for more information on Diredfl mode.

\(fn &optional ARG)" t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "diredfl" '("diredfl-")))




)
(let ((load-true-file-name "/home/cam/.emacs.d/elpa/diminish-0.46/diminish-autoloads.el")(load-file-name "/home/cam/.emacs.d/elpa/diminish-0.46/diminish-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/home/cam/.emacs.d/elpa/diminish-0.46/diminish-autoloads.el") (car load-path))))



(autoload 'diminish "diminish" "\
Diminish mode-line display of minor mode MODE to TO-WHAT (default \"\").

Interactively, enter (with completion) the name of any minor mode, followed
on the next line by what you want it diminished to (default empty string).
The response to neither prompt should be quoted.  However, in Lisp code,
both args must be quoted, the first as a symbol, the second as a string,
as in (diminish 'jiggle-mode \" Jgl\").

The mode-line displays of minor modes usually begin with a space, so
the modes' names appear as separate words on the mode line.  However, if
you're having problems with a cramped mode line, you may choose to use single
letters for some modes, without leading spaces.  Capitalizing them works
best; if you then diminish some mode to \"X\" but have abbrev-mode enabled as
well, you'll get a display like \"AbbrevX\".  This function prepends a space
to TO-WHAT if it's > 1 char long & doesn't already begin with a space.

\(fn MODE &optional TO-WHAT)" t nil)

(autoload 'diminish-undo "diminish" "\
Restore mode-line display of diminished mode MODE to its minor-mode value.
Do nothing if the arg is a minor mode that hasn't been diminished.

Interactively, enter (with completion) the name of any diminished mode (a
mode that was formerly a minor mode on which you invoked \\[diminish]).
To restore all diminished modes to minor status, answer `diminished-modes'.
The response to the prompt shouldn't be quoted.  However, in Lisp code,
the arg must be quoted as a symbol, as in (diminish-undo 'diminished-modes).

\(fn MODE)" t nil)

(autoload 'diminished-modes "diminish" "\
Echo all active diminished or minor modes as if they were minor.
The display goes in the echo area; if it's too long even for that,
you can see the whole thing in the *Messages* buffer.
This doesn't change the status of any modes; it just lets you see
what diminished modes would be on the mode-line if they were still minor." t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "diminish" '("diminish")))




)
(let ((load-true-file-name "/home/cam/.emacs.d/elpa/darktooth-theme-20231011.427/darktooth-theme-autoloads.el")(load-file-name "/home/cam/.emacs.d/elpa/darktooth-theme-20231011.427/darktooth-theme-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/home/cam/.emacs.d/elpa/darktooth-theme-20231011.427/darktooth-theme-autoloads.el") (car load-path))))



(autoload 'darktooth-deftheme "darktooth" "\
Create darktooth theme with NAME, DESCRIPTION, PALETTE and BODY.

\(fn NAME DESCRIPTION PALETTE &rest BODY)" nil t)

(and load-file-name (boundp 'custom-theme-load-path) (add-to-list 'custom-theme-load-path (file-name-as-directory (file-name-directory load-file-name))))



(and load-file-name (boundp 'custom-theme-load-path) (add-to-list 'custom-theme-load-path (file-name-as-directory (file-name-directory load-file-name))))

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "darktooth-dark-theme" '("darktooth-modeline")))



(and load-file-name (boundp 'custom-theme-load-path) (add-to-list 'custom-theme-load-path (file-name-as-directory (file-name-directory load-file-name))))

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "darktooth-darker-theme" '("darktooth-modeline")))



(and load-file-name (boundp 'custom-theme-load-path) (add-to-list 'custom-theme-load-path (file-name-as-directory (file-name-directory load-file-name))))

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "darktooth-theme" '("darktooth-modeline")))




)
(let ((load-true-file-name "/home/cam/.emacs.d/elpa/darkokai-theme-20200614.1452/darkokai-theme-autoloads.el")(load-file-name "/home/cam/.emacs.d/elpa/darkokai-theme-20200614.1452/darkokai-theme-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/home/cam/.emacs.d/elpa/darkokai-theme-20200614.1452/darkokai-theme-autoloads.el") (car load-path))))



(when (and (boundp 'custom-theme-load-path) load-file-name) (add-to-list 'custom-theme-load-path (file-name-as-directory (file-name-directory load-file-name))))

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "darkokai-theme" '("darkokai")))




)
(let ((load-true-file-name "/home/cam/.emacs.d/elpa/darkmine-theme-20160406.624/darkmine-theme-autoloads.el")(load-file-name "/home/cam/.emacs.d/elpa/darkmine-theme-20160406.624/darkmine-theme-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/home/cam/.emacs.d/elpa/darkmine-theme-20160406.624/darkmine-theme-autoloads.el") (car load-path))))



(when load-file-name (add-to-list 'custom-theme-load-path (file-name-as-directory (file-name-directory load-file-name))))

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "darkmine-theme" '("darkmine")))




)
(let ((load-true-file-name "/home/cam/.emacs.d/elpa/bui-1.2.1/bui-autoloads.el")(load-file-name "/home/cam/.emacs.d/elpa/bui-1.2.1/bui-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/home/cam/.emacs.d/elpa/bui-1.2.1/bui-autoloads.el") (car load-path))))



(register-definition-prefixes "bui" '("bui-define-"))



(register-definition-prefixes "bui-button" '("bui"))



(register-definition-prefixes "bui-core" '("bui-"))



(register-definition-prefixes "bui-entry" '("bui-"))



(register-definition-prefixes "bui-history" '("bui-history"))



(register-definition-prefixes "bui-info" '("bui-info-"))



(register-definition-prefixes "bui-list" '("bui-list-"))



(register-definition-prefixes "bui-utils" '("bui-"))




)
(let ((load-true-file-name "/home/cam/.emacs.d/elpa/dap-mode-0.7/dap-mode-autoloads.el")(load-file-name "/home/cam/.emacs.d/elpa/dap-mode-0.7/dap-mode-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/home/cam/.emacs.d/elpa/dap-mode-0.7/dap-mode-autoloads.el") (car load-path))))



(register-definition-prefixes "dap-chrome" '("dap-chrome-"))



(register-definition-prefixes "dap-codelldb" '("dap-codelldb-"))



(register-definition-prefixes "dap-cpptools" '("dap-cpptools-"))



(register-definition-prefixes "dap-edge" '("dap-edge-"))



(register-definition-prefixes "dap-elixir" '("dap-elixir--populate-start-file-args"))



(register-definition-prefixes "dap-erlang" '("dap-erlang--populate-start-file-args"))



(register-definition-prefixes "dap-firefox" '("dap-firefox-"))



(register-definition-prefixes "dap-gdb-lldb" '("dap-gdb-lldb-"))



(register-definition-prefixes "dap-go" '("dap-go-"))



(autoload 'dap-hydra "dap-hydra" "\
Run `dap-hydra/body'." t nil)

(register-definition-prefixes "dap-hydra" '("dap-hydra"))



(register-definition-prefixes "dap-launch" '("dap-launch-"))



(register-definition-prefixes "dap-lldb" '("dap-lldb-"))



(autoload 'dap-debug "dap-mode" "\
Run debug configuration DEBUG-ARGS.

If DEBUG-ARGS is not specified the configuration is generated
after selecting configuration template.

:dap-compilation specifies a shell command to be run using
`compilation-start' before starting the debug session. It could
be used to compile the project, spin up docker, ....

\(fn DEBUG-ARGS)" t nil)

(defvar dap-mode nil "\
Non-nil if Dap mode is enabled.
See the `dap-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `dap-mode'.")

(custom-autoload 'dap-mode "dap-mode" nil)

(autoload 'dap-mode "dap-mode" "\
Global minor mode for DAP mode.

This is a minor mode.  If called interactively, toggle the `Dap
mode' mode.  If the prefix argument is positive, enable the mode,
and if it is zero or negative, disable the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable
the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `(default-value \\='dap-mode)'.

The mode's hook is called both when the mode is enabled and when
it is disabled.

\(fn &optional ARG)" t nil)

(defvar dap-auto-configure-mode nil "\
Non-nil if Dap-Auto-Configure mode is enabled.
See the `dap-auto-configure-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `dap-auto-configure-mode'.")

(custom-autoload 'dap-auto-configure-mode "dap-mode" nil)

(autoload 'dap-auto-configure-mode "dap-mode" "\
Auto configure dap minor mode.

This is a minor mode.  If called interactively, toggle the
`Dap-Auto-Configure mode' mode.  If the prefix argument is
positive, enable the mode, and if it is zero or negative, disable
the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable
the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `(default-value \\='dap-auto-configure-mode)'.

The mode's hook is called both when the mode is enabled and when
it is disabled.

\(fn &optional ARG)" t nil)

(register-definition-prefixes "dap-mode" '("dap-"))



(defvar dap-tooltip-mode nil "\
Non-nil if Dap-Tooltip mode is enabled.
See the `dap-tooltip-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `dap-tooltip-mode'.")

(custom-autoload 'dap-tooltip-mode "dap-mouse" nil)

(autoload 'dap-tooltip-mode "dap-mouse" "\
Toggle the display of GUD tooltips.

This is a minor mode.  If called interactively, toggle the
`Dap-Tooltip mode' mode.  If the prefix argument is positive,
enable the mode, and if it is zero or negative, disable the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable
the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `(default-value \\='dap-tooltip-mode)'.

The mode's hook is called both when the mode is enabled and when
it is disabled.

\(fn &optional ARG)" t nil)

(register-definition-prefixes "dap-mouse" '("dap-"))



(register-definition-prefixes "dap-netcore" '("dap-netcore-"))



(register-definition-prefixes "dap-node" '("dap-node-"))



(register-definition-prefixes "dap-overlays" '("dap-overlays-"))



(register-definition-prefixes "dap-php" '("dap-php-"))



(register-definition-prefixes "dap-pwsh" '("dap-pwsh-"))



(register-definition-prefixes "dap-python" '("dap-python-"))



(register-definition-prefixes "dap-ruby" '("dap-ruby-"))



(defvar dap-ui-mode nil "\
Non-nil if Dap-Ui mode is enabled.
See the `dap-ui-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `dap-ui-mode'.")

(custom-autoload 'dap-ui-mode "dap-ui" nil)

(autoload 'dap-ui-mode "dap-ui" "\
Displaying DAP visuals.

This is a minor mode.  If called interactively, toggle the
`Dap-Ui mode' mode.  If the prefix argument is positive, enable
the mode, and if it is zero or negative, disable the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable
the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `(default-value \\='dap-ui-mode)'.

The mode's hook is called both when the mode is enabled and when
it is disabled.

\(fn &optional ARG)" t nil)

(autoload 'dap-ui-breakpoints-list "dap-ui" "\
List breakpoints." t nil)

(defvar dap-ui-controls-mode nil "\
Non-nil if Dap-Ui-Controls mode is enabled.
See the `dap-ui-controls-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `dap-ui-controls-mode'.")

(custom-autoload 'dap-ui-controls-mode "dap-ui" nil)

(autoload 'dap-ui-controls-mode "dap-ui" "\
Displaying DAP visuals.

This is a minor mode.  If called interactively, toggle the
`Dap-Ui-Controls mode' mode.  If the prefix argument is positive,
enable the mode, and if it is zero or negative, disable the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable
the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `(default-value \\='dap-ui-controls-mode)'.

The mode's hook is called both when the mode is enabled and when
it is disabled.

\(fn &optional ARG)" t nil)

(autoload 'dap-ui-sessions "dap-ui" "\
Show currently active sessions." t nil)

(autoload 'dap-ui-locals "dap-ui" nil t nil)

(autoload 'dap-ui-show-many-windows "dap-ui" "\
Show auto configured feature windows." t nil)

(autoload 'dap-ui-hide-many-windows "dap-ui" "\
Hide all debug windows when sessions are dead." t nil)

(autoload 'dap-ui-repl "dap-ui" "\
Start an adapter-specific REPL.
This could be used to evaluate JavaScript in a browser, to
evaluate python in the context of the debugee, ...." t nil)

(register-definition-prefixes "dap-ui" '("dap-"))



(register-definition-prefixes "dap-utils" '("dap-utils-"))



(register-definition-prefixes "dap-variables" '("dap-variables-"))



(autoload 'dapui-loaded-sources "dapui" nil t nil)

(register-definition-prefixes "dapui" '("dapui-"))




)
(let ((load-true-file-name "/home/cam/.emacs.d/elpa/dakrone-theme-20170801.1933/dakrone-theme-autoloads.el")(load-file-name "/home/cam/.emacs.d/elpa/dakrone-theme-20170801.1933/dakrone-theme-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/home/cam/.emacs.d/elpa/dakrone-theme-20170801.1933/dakrone-theme-autoloads.el") (car load-path))))



(when load-file-name (add-to-list 'custom-theme-load-path (file-name-as-directory (file-name-directory load-file-name))))

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "dakrone-theme" '("dakrone")))




)
(let ((load-true-file-name "/home/cam/.emacs.d/elpa/cyberpunk-theme-20200601.1632/cyberpunk-theme-autoloads.el")(load-file-name "/home/cam/.emacs.d/elpa/cyberpunk-theme-20200601.1632/cyberpunk-theme-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/home/cam/.emacs.d/elpa/cyberpunk-theme-20200601.1632/cyberpunk-theme-autoloads.el") (car load-path))))



(when load-file-name (add-to-list 'custom-theme-load-path (file-name-as-directory (file-name-directory load-file-name))))

(register-definition-prefixes "cyberpunk-theme" '("cyberpunk"))




)
(let ((load-true-file-name "/home/cam/.emacs.d/elpa/csv-mode-1.22/csv-mode-autoloads.el")(load-file-name "/home/cam/.emacs.d/elpa/csv-mode-1.22/csv-mode-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/home/cam/.emacs.d/elpa/csv-mode-1.22/csv-mode-autoloads.el") (car load-path))))



(autoload 'csv-mode "csv-mode" "\
Major mode for editing files of comma-separated value type.

CSV mode is derived from `text-mode', and runs `text-mode-hook' before
running `csv-mode-hook'.  It turns `auto-fill-mode' off by default.
CSV mode can be customized by user options in the CSV customization
group.  The separators are specified by the value of `csv-separators'.

CSV mode commands ignore blank lines and comment lines beginning with
the value of `csv-comment-start', which delimit \"paragraphs\".
\"Sexp\" is re-interpreted to mean \"field\", so that `forward-sexp'
\(\\[forward-sexp]), `kill-sexp' (\\[kill-sexp]), etc. all apply to fields.
Standard comment commands apply, such as `comment-dwim' (\\[comment-dwim]).

If `font-lock-mode' is enabled then separators, quoted values and
comment lines are highlighted using respectively `csv-separator-face',
`font-lock-string-face' and `font-lock-comment-face'.

The user interface (UI) for CSV mode commands is similar to that of
the standard commands `sort-fields' and `sort-numeric-fields', except
that if there is no prefix argument then the UI prompts for the field
index or indices.  In `transient-mark-mode' only: if the region is not
set then the UI attempts to set it to include all consecutive CSV
records around point, and prompts for confirmation; if there is no
prefix argument then the UI prompts for it, offering as a default the
index of the field containing point if the region was not set
explicitly.  The region set automatically is delimited by blank lines
and comment lines, and the number of header lines at the beginning of
the region given by the value of `csv-header-lines' are skipped.

Sort order is controlled by `csv-descending'.

CSV mode provides the following specific keyboard key bindings:

\\{csv-mode-map}

\(fn)" t nil)

(add-to-list 'auto-mode-alist '("\\.[Cc][Ss][Vv]\\'" . csv-mode))

(add-to-list 'auto-mode-alist '("\\.tsv\\'" . tsv-mode))

(autoload 'tsv-mode "csv-mode" "\
Major mode for editing files of tab-separated value type.

\(fn)" t nil)

(register-definition-prefixes "csv-mode" '("csv-" "tsv-"))



(register-definition-prefixes "csv-mode-tests" '("csv-tests--"))




)
(let ((load-true-file-name "/home/cam/.emacs.d/elpa/cpputils-cmake-5.5/cpputils-cmake-autoloads.el")(load-file-name "/home/cam/.emacs.d/elpa/cpputils-cmake-5.5/cpputils-cmake-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/home/cam/.emacs.d/elpa/cpputils-cmake-5.5/cpputils-cmake-autoloads.el") (car load-path))))



(autoload 'cppcm-get-exe-path-current-buffer "cpputils-cmake" nil t nil)

(autoload 'cppcm-version "cpputils-cmake" nil t nil)

(autoload 'cppcm-compile "cpputils-cmake" "\
Compile the executable/library in current directory,
default compile command or compile in the build directory.
You can specify the sequence which compile is default
by customize `cppcm-compile-list'.

\(fn &optional PREFIX)" t nil)

(autoload 'cppcm-recompile "cpputils-cmake" "\
make clean;compile" t nil)

(autoload 'cppcm-reload-all "cpputils-cmake" "\
Reload and reproduce everything" nil nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "cpputils-cmake" '("cppcm-")))




)
(let ((load-true-file-name "/home/cam/.emacs.d/elpa/counsel-0.14.2/counsel-autoloads.el")(load-file-name "/home/cam/.emacs.d/elpa/counsel-0.14.2/counsel-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/home/cam/.emacs.d/elpa/counsel-0.14.2/counsel-autoloads.el") (car load-path))))



(autoload 'counsel-company "counsel" "\
Complete using `company-candidates'." t nil)

(autoload 'counsel-irony "counsel" "\
Inline C/C++ completion using Irony." t nil)

(autoload 'counsel-describe-variable "counsel" "\
Forward to `describe-variable'.

Variables declared using `defcustom' are highlighted according to
`ivy-highlight-face'." t nil)

(autoload 'counsel-describe-function "counsel" "\
Forward to `describe-function'.

Interactive functions (i.e., commands) are highlighted according
to `ivy-highlight-face'." t nil)

(autoload 'counsel-describe-symbol "counsel" "\
Forward to `describe-symbol'." t nil)

(autoload 'counsel-set-variable "counsel" "\
Set a variable SYM, with completion.

When the selected variable is a `defcustom' with the type boolean
or radio, offer completion of all possible values.

Otherwise, offer a variant of `eval-expression', with the initial
input corresponding to the chosen variable.

With a prefix arg, restrict list to variables defined using
`defcustom'.

\(fn SYM)" t nil)

(autoload 'counsel-apropos "counsel" "\
Show all matching symbols.
See `apropos' for further information on what is considered
a symbol and how to search for them." t nil)

(autoload 'counsel-info-lookup-symbol "counsel" "\
Forward SYMBOL to `info-lookup-symbol' with ivy completion.
With prefix arg MODE a query for the symbol help mode is offered.

\(fn SYMBOL &optional MODE)" t nil)

(autoload 'counsel-M-x "counsel" "\
Ivy version of `execute-extended-command'.
Optional INITIAL-INPUT is the initial input in the minibuffer.
This function integrates with either the `amx' or `smex' package
when available, in that order of precedence.

\(fn &optional INITIAL-INPUT)" t nil)

(autoload 'counsel-command-history "counsel" "\
Show the history of commands." t nil)

(autoload 'counsel-load-library "counsel" "\
Load a selected the Emacs Lisp library.
The libraries are offered from `load-path'." t nil)

(autoload 'counsel-find-library "counsel" "\
Visit a selected the Emacs Lisp library.
The libraries are offered from `load-path'." t nil)

(autoload 'counsel-load-theme "counsel" "\
Forward to `load-theme'.
Usable with `ivy-resume', `ivy-next-line-and-call' and
`ivy-previous-line-and-call'." t nil)

(autoload 'counsel-descbinds "counsel" "\
Show a list of all defined keys and their definitions.
If non-nil, show only bindings that start with PREFIX.
BUFFER defaults to the current one.

\(fn &optional PREFIX BUFFER)" t nil)

(autoload 'counsel-describe-face "counsel" "\
Completion for `describe-face'." t nil)

(autoload 'counsel-faces "counsel" "\
Complete faces with preview.
Actions are provided by default for describing or customizing the
selected face." t nil)

(autoload 'counsel-git "counsel" "\
Find file in the current Git repository.
INITIAL-INPUT can be given as the initial minibuffer input.

\(fn &optional INITIAL-INPUT)" t nil)

(autoload 'counsel-git-grep "counsel" "\
Grep for a string in the current Git repository.
INITIAL-INPUT can be given as the initial minibuffer input.
INITIAL-DIRECTORY, if non-nil, is used as the root directory for search.
When CMD is a string, use it as a \"git grep\" command.
When CMD is non-nil, prompt for a specific \"git grep\" command.

\(fn &optional INITIAL-INPUT INITIAL-DIRECTORY CMD)" t nil)

(autoload 'counsel-git-stash "counsel" "\
Search through all available git stashes." t nil)

(autoload 'counsel-git-change-worktree "counsel" "\
Find the file corresponding to the current buffer on a different worktree." t nil)

(autoload 'counsel-git-checkout "counsel" "\
Call the \"git checkout\" command." t nil)

(autoload 'counsel-git-log "counsel" "\
Call the \"git log --grep\" shell command." t nil)

(autoload 'counsel-find-file "counsel" "\
Forward to `find-file'.
When INITIAL-INPUT is non-nil, use it in the minibuffer during completion.

\(fn &optional INITIAL-INPUT INITIAL-DIRECTORY)" t nil)

(autoload 'counsel-dired "counsel" "\
Forward to `dired'.
When INITIAL-INPUT is non-nil, use it in the minibuffer during completion.

\(fn &optional INITIAL-INPUT)" t nil)

(autoload 'counsel-recentf "counsel" "\
Find a file on `recentf-list'." t nil)

(autoload 'counsel-buffer-or-recentf "counsel" "\
Find a buffer visiting a file or file on `recentf-list'." t nil)

(autoload 'counsel-bookmark "counsel" "\
Forward to `bookmark-jump' or `bookmark-set' if bookmark doesn't exist." t nil)

(autoload 'counsel-bookmarked-directory "counsel" "\
Ivy interface for bookmarked directories.

With a prefix argument, this command creates a new bookmark which points to the
current value of `default-directory'." t nil)

(autoload 'counsel-file-register "counsel" "\
Search file in register.

You cannot use Emacs' normal register commands to create file
registers.  Instead you must use the `set-register' function like
so: `(set-register ?i \"/home/eric/.emacs.d/init.el\")'.  Now you
can use `C-x r j i' to open that file." t nil)

(autoload 'counsel-locate-action-extern "counsel" "\
Pass X to `xdg-open' or equivalent command via the shell.

\(fn X)" t nil)

(autoload 'counsel-locate "counsel" "\
Call a \"locate\" style shell command.
INITIAL-INPUT can be given as the initial minibuffer input.

\(fn &optional INITIAL-INPUT)" t nil)

(autoload 'counsel-tracker "counsel" nil t nil)

(autoload 'counsel-fzf "counsel" "\
Open a file using the fzf shell command.
INITIAL-INPUT can be given as the initial minibuffer input.
INITIAL-DIRECTORY, if non-nil, is used as the root directory for search.
FZF-PROMPT, if non-nil, is passed as `ivy-read' prompt argument.

\(fn &optional INITIAL-INPUT INITIAL-DIRECTORY FZF-PROMPT)" t nil)

(autoload 'counsel-dpkg "counsel" "\
Call the \"dpkg\" shell command." t nil)

(autoload 'counsel-rpm "counsel" "\
Call the \"rpm\" shell command." t nil)

(autoload 'counsel-file-jump "counsel" "\
Jump to a file below the current directory.
List all files within the current directory or any of its sub-directories.
INITIAL-INPUT can be given as the initial minibuffer input.
INITIAL-DIRECTORY, if non-nil, is used as the root directory for search.

\(fn &optional INITIAL-INPUT INITIAL-DIRECTORY)" t nil)

(autoload 'counsel-dired-jump "counsel" "\
Jump to a directory (see `dired-jump') below the current directory.
List all sub-directories within the current directory.
INITIAL-INPUT can be given as the initial minibuffer input.
INITIAL-DIRECTORY, if non-nil, is used as the root directory for search.

\(fn &optional INITIAL-INPUT INITIAL-DIRECTORY)" t nil)

(autoload 'counsel-ag "counsel" "\
Grep for a string in a root directory using `ag'.

By default, the root directory is the first directory containing
a .git subdirectory.

INITIAL-INPUT can be given as the initial minibuffer input.
INITIAL-DIRECTORY, if non-nil, is used as the root directory for search.
EXTRA-AG-ARGS, if non-nil, is appended to `counsel-ag-base-command'.
AG-PROMPT, if non-nil, is passed as `ivy-read' prompt argument.
CALLER is passed to `ivy-read'.

With a `\\[universal-argument]' prefix argument, prompt for INITIAL-DIRECTORY.
With a `\\[universal-argument] \\[universal-argument]' prefix argument, prompt additionally for EXTRA-AG-ARGS.

\(fn &optional INITIAL-INPUT INITIAL-DIRECTORY EXTRA-AG-ARGS AG-PROMPT &key CALLER)" t nil)

(autoload 'counsel-pt "counsel" "\
Grep for a string in the current directory using pt.
INITIAL-INPUT can be given as the initial minibuffer input.
This uses `counsel-ag' with `counsel-pt-base-command' instead of
`counsel-ag-base-command'.

\(fn &optional INITIAL-INPUT)" t nil)

(autoload 'counsel-ack "counsel" "\
Grep for a string in the current directory using ack.
INITIAL-INPUT can be given as the initial minibuffer input.
This uses `counsel-ag' with `counsel-ack-base-command' replacing
`counsel-ag-base-command'.

\(fn &optional INITIAL-INPUT)" t nil)

(autoload 'counsel-rg "counsel" "\
Grep for a string in the current directory using `rg'.
INITIAL-INPUT can be given as the initial minibuffer input.
INITIAL-DIRECTORY, if non-nil, is used as the root directory for search.
EXTRA-RG-ARGS string, if non-nil, is appended to `counsel-rg-base-command'.
RG-PROMPT, if non-nil, is passed as `ivy-read' prompt argument.

Example input with inclusion and exclusion file patterns:
    require i -- -g*.el

\(fn &optional INITIAL-INPUT INITIAL-DIRECTORY EXTRA-RG-ARGS RG-PROMPT)" t nil)

(autoload 'counsel-grep "counsel" "\
Grep for a string in the file visited by the current buffer.
When non-nil, INITIAL-INPUT is the initial search pattern.

\(fn &optional INITIAL-INPUT)" t nil)

(autoload 'counsel-grep-backward "counsel" "\
Grep for a string in the file visited by the current buffer going
backward similar to `swiper-backward'. When non-nil, INITIAL-INPUT is
the initial search pattern.

\(fn &optional INITIAL-INPUT)" t nil)

(autoload 'counsel-grep-or-swiper "counsel" "\
Call `swiper' for small buffers and `counsel-grep' for large ones.
When non-nil, INITIAL-INPUT is the initial search pattern.

\(fn &optional INITIAL-INPUT)" t nil)

(autoload 'counsel-grep-or-swiper-backward "counsel" "\
Call `swiper-backward' for small buffers and `counsel-grep-backward' for
large ones.  When non-nil, INITIAL-INPUT is the initial search pattern.

\(fn &optional INITIAL-INPUT)" t nil)

(autoload 'counsel-recoll "counsel" "\
Search for a string in the recoll database.
You'll be given a list of files that match.
Selecting a file will launch `swiper' for that file.
INITIAL-INPUT can be given as the initial minibuffer input.

\(fn &optional INITIAL-INPUT)" t nil)

(autoload 'counsel--org-get-tags "counsel" nil nil nil)

(autoload 'counsel-org-tag "counsel" "\
Add or remove tags in `org-mode'." t nil)

(autoload 'counsel-org-tag-agenda "counsel" "\
Set tags for the current agenda item." t nil)

(defalias 'counsel-org-goto #'counsel-outline)

(autoload 'counsel-org-goto-all "counsel" "\
Go to a different location in any org file." t nil)

(autoload 'counsel-org-file "counsel" "\
Browse all attachments for current Org file." t nil)

(autoload 'counsel-org-entity "counsel" "\
Complete Org entities using Ivy." t nil)

(autoload 'counsel-org-capture "counsel" "\
Capture something." t nil)

(autoload 'counsel-org-agenda-headlines "counsel" "\
Choose from headers of `org-mode' files in the agenda." t nil)

(autoload 'counsel-org-link "counsel" "\
Insert a link to an headline with completion." t nil)

(autoload 'counsel-mark-ring "counsel" "\
Browse `mark-ring' interactively.
Obeys `widen-automatically', which see." t nil)

(autoload 'counsel-evil-marks "counsel" "\
Ivy replacement for `evil-show-marks'.
By default, this function respects `counsel-evil-marks-exclude-registers'.
When ARG is non-nil, display all active evil registers.

\(fn &optional ARG)" t nil)

(autoload 'counsel-package "counsel" "\
Install or delete packages.

Packages not currently installed are prefixed with \"+\", and
selecting one of these will try to install it.
Packages currently installed are prefixed with \"-\", and
selecting one of these will try to delete it.

Additional actions:\\<ivy-minibuffer-map>

  \\[ivy-dispatching-done] d: Describe package
  \\[ivy-dispatching-done] h: Visit package's homepage" t nil)

(autoload 'counsel-tmm "counsel" "\
Text-mode emulation of looking and choosing from a menu bar." t nil)

(autoload 'counsel-yank-pop "counsel" "\
Ivy replacement for `yank-pop'.
With a plain prefix argument (\\[universal-argument]),
temporarily toggle the value of `counsel-yank-pop-after-point'.
Any other value of ARG has the same meaning as in `yank-pop', but
`counsel-yank-pop-preselect-last' determines its default value.
See also `counsel-yank-pop-filter' for how to filter candidates.

Note: Duplicate elements of `kill-ring' are always deleted.

\(fn &optional ARG)" t nil)

(autoload 'counsel-register "counsel" "\
Interactively choose a register." t nil)

(autoload 'counsel-evil-registers "counsel" "\
Ivy replacement for `evil-show-registers'." t nil)

(autoload 'counsel-imenu "counsel" "\
Jump to a buffer position indexed by imenu." t nil)

(autoload 'counsel-list-processes "counsel" "\
Offer completion for `process-list'.
The default action deletes the selected process.
An extra action allows to switch to the process buffer." t nil)

(autoload 'counsel-minibuffer-history "counsel" "\
Browse minibuffer history." t nil)

(autoload 'counsel-esh-history "counsel" "\
Browse Eshell history." t nil)

(autoload 'counsel-shell-history "counsel" "\
Browse shell history." t nil)

(autoload 'counsel-slime-repl-history "counsel" "\
Browse Slime REPL history." t nil)

(autoload 'counsel-hydra-heads "counsel" "\
Call a head of the current/last hydra." t nil)

(autoload 'counsel-semantic "counsel" "\
Jump to a semantic tag in the current buffer." t nil)

(autoload 'counsel-semantic-or-imenu "counsel" nil t nil)

(autoload 'counsel-outline "counsel" "\
Jump to an outline heading with completion." t nil)

(autoload 'counsel-ibuffer "counsel" "\
Use ibuffer to switch to another buffer.
NAME specifies the name of the buffer (defaults to \"*Ibuffer*\").

\(fn &optional NAME)" t nil)

(autoload 'counsel-switch-to-shell-buffer "counsel" "\
Switch to a shell buffer, or create one." t nil)

(autoload 'counsel-unicode-char "counsel" "\
Insert COUNT copies of a Unicode character at point.
COUNT defaults to 1.

\(fn &optional COUNT)" t nil)

(autoload 'counsel-colors-emacs "counsel" "\
Show a list of all supported colors for a particular frame.

You can insert or kill the name or hexadecimal RGB value of the
selected color." t nil)

(autoload 'counsel-colors-web "counsel" "\
Show a list of all W3C web colors for use in CSS.

You can insert or kill the name or hexadecimal RGB value of the
selected color." t nil)

(autoload 'counsel-fonts "counsel" "\
Show a list of all supported font families for a particular frame.

You can insert or kill the name of the selected font." t nil)

(autoload 'counsel-kmacro "counsel" "\
Interactively choose and run a keyboard macro.

With prefix argument, run macro that many times.

Macros are run using the current value of `kmacro-counter-value'
and their respective counter format. Displayed next to each macro is
the counter's format and initial value.

One can use actions to copy the counter format or initial counter
value of a macro, using them for a new macro." t nil)

(autoload 'counsel-geiser-doc-look-up-manual "counsel" "\
Search Scheme documentation." t nil)

(autoload 'counsel-rhythmbox "counsel" "\
Choose a song from the Rhythmbox library to play or enqueue.

\(fn &optional ARG)" t nil)

(autoload 'counsel-linux-app "counsel" "\
Launch a Linux desktop application, similar to Alt-<F2>.
When ARG is non-nil, ignore NoDisplay property in *.desktop files.

\(fn &optional ARG)" t nil)

(autoload 'counsel-wmctrl "counsel" "\
Select a desktop window using wmctrl." t nil)

(autoload 'counsel-switch-buffer "counsel" "\
Switch to another buffer.
Display a preview of the selected ivy completion candidate buffer
in the current window." t nil)

(autoload 'counsel-switch-buffer-other-window "counsel" "\
Switch to another buffer in another window.
Display a preview of the selected ivy completion candidate buffer
in the current window." t nil)

(autoload 'counsel-compile "counsel" "\
Call `compile' completing with smart suggestions, optionally for DIR.

Additional actions:

\\{counsel-compile-map}

\(fn &optional DIR)" t nil)

(autoload 'counsel-compile-env "counsel" "\
Update `counsel-compile-env' interactively." t nil)

(autoload 'counsel-minor "counsel" "\
Enable or disable minor mode.

Disabled minor modes are prefixed with \"+\", and
selecting one of these will enable it.
Enabled minor modes are prefixed with \"-\", and
selecting one of these will enable it.

Additional actions:\\<ivy-minibuffer-map>

  \\[ivy-dispatching-done] d: Go to minor mode definition
  \\[ivy-dispatching-done] h: Describe minor mode" t nil)

(autoload 'counsel-major "counsel" nil t nil)

(autoload 'counsel-compilation-errors "counsel" "\
Compilation errors." t nil)

(autoload 'counsel-flycheck "counsel" "\
Flycheck errors." t nil)

(defvar counsel-mode nil "\
Non-nil if Counsel mode is enabled.
See the `counsel-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `counsel-mode'.")

(custom-autoload 'counsel-mode "counsel" nil)

(autoload 'counsel-mode "counsel" "\
Toggle Counsel mode on or off.
Turn Counsel mode on if ARG is positive, off otherwise. Counsel
mode remaps built-in emacs functions that have counsel
replacements.

Local bindings (`counsel-mode-map'):
\\{counsel-mode-map}

\(fn &optional ARG)" t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "counsel" '("counsel-" "ivy-function-called-at-point")))




)
(let ((load-true-file-name "/home/cam/.emacs.d/elpa/counsel-gtags-0.1/counsel-gtags-autoloads.el")(load-file-name "/home/cam/.emacs.d/elpa/counsel-gtags-0.1/counsel-gtags-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/home/cam/.emacs.d/elpa/counsel-gtags-0.1/counsel-gtags-autoloads.el") (car load-path))))



(autoload 'counsel-gtags-find-definition "counsel-gtags" "\
Find `tagname' definition.

\(fn TAGNAME)" t nil)

(autoload 'counsel-gtags-find-reference "counsel-gtags" "\
Find `tagname' references.

\(fn TAGNAME)" t nil)

(autoload 'counsel-gtags-find-symbol "counsel-gtags" "\
Find `tagname' references.

\(fn TAGNAME)" t nil)

(autoload 'counsel-gtags-find-file "counsel-gtags" "\
Find `filename' from tagged files.

\(fn FILENAME)" t nil)

(autoload 'counsel-gtags-pop "counsel-gtags" "\
Jump back to previous point." t nil)

(autoload 'counsel-gtags-create-tags "counsel-gtags" "\
Create tag files tags in `rootdir'. This command is asynchronous.

\(fn ROOTDIR LABEL)" t nil)

(autoload 'counsel-gtags-update-tags "counsel-gtags" "\
Update TAG file. Update All files with `C-u' prefix.
Generate new TAG file in selected directory with `C-u C-u'" t nil)

(autoload 'counsel-gtags-dwim "counsel-gtags" "\
Call the counsel-gtags command by current context(Do What I Mean)
by global --from-here option." t nil)

(autoload 'counsel-gtags-mode "counsel-gtags" "\
Toggle Counsel-Gtags mode on or off.

If called interactively, enable Counsel-Gtags mode if ARG is
positive, and disable it if ARG is zero or negative.  If called
from Lisp, also enable the mode if ARG is omitted or nil, and
toggle it if ARG is `toggle'; disable the mode otherwise.

\\{counsel-gtags-mode-map}

\(fn &optional ARG)" t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "counsel-gtags" '("counsel-gtags-")))




)
(let ((load-true-file-name "/home/cam/.emacs.d/elpa/counsel-css-1.0.7/counsel-css-autoloads.el")(load-file-name "/home/cam/.emacs.d/elpa/counsel-css-1.0.7/counsel-css-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/home/cam/.emacs.d/elpa/counsel-css-1.0.7/counsel-css-autoloads.el") (car load-path))))



(autoload 'counsel-css-imenu-setup "counsel-css" "\
Set up imenu to recognize css (as well as nested scss/less selectors)." nil nil)

(autoload 'counsel-css "counsel-css" "\
Jump to a css selector." t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "counsel-css" '("counsel-css--")))




)
(let ((load-true-file-name "/home/cam/.emacs.d/elpa/bbdb-20231122.1326/bbdb-autoloads.el")(load-file-name "/home/cam/.emacs.d/elpa/bbdb-20231122.1326/bbdb-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/home/cam/.emacs.d/elpa/bbdb-20231122.1326/bbdb-autoloads.el") (car load-path))))



(autoload 'bbdb-records "bbdb" "\
Return a list of all BBDB records; read in and parse the db if necessary.
This function also notices if the corresponding file on disk has been modified." nil nil)

(autoload 'bbdb-mode "bbdb" "\
Major mode for viewing and editing the Insidious Big Brother Database.
Letters no longer insert themselves.  Numbers are prefix arguments.
You can move around using the usual cursor motion commands.
\\<bbdb-mode-map>
\\[bbdb-add-mail-alias]	 Add new mail alias to visible records or remove it.
\\[bbdb-edit-field]	 Edit the field on the current line.
\\[bbdb-delete-field-or-record]	 Delete the field on the current line.  If the current line is the
	 first line of a record, then delete the entire record.
\\[bbdb-insert-field]	 Insert a new field into the current record.  Note that this
	 will let you add new fields of your own as well.
\\[bbdb-transpose-fields]	 Swap the field on the current line with the previous field.
\\[bbdb-dial]	 Dial the current phone field.
\\[bbdb-next-record], \\[bbdb-prev-record]	 Move to the next or the previous displayed record, respectively.
\\[bbdb-create]	 Create a new record.
\\[bbdb-toggle-records-layout]	 Toggle whether the current record is displayed in a one-line
	 listing, or a full multi-line listing.
\\[bbdb-do-all-records]\\[bbdb-toggle-records-layout]	 Do that for all displayed records.
\\[bbdb-merge-records]	 Merge the contents of the current record with some other, and then
	 delete the current record.
\\[bbdb-omit-record]	 Remove the current record from the display without deleting it from
	 the database.  This is often a useful thing to do before using one
	 of the `*' commands.
\\[bbdb]	 Search for records in the database (on all fields).
\\[bbdb-search-mail]	 Search for records by mail address.
\\[bbdb-search-organization]	 Search for records by organization.
\\[bbdb-search-xfields]	 Search for records by xfields.
\\[bbdb-search-name]	 Search for records by name.
\\[bbdb-search-changed]	 Display records that have changed since the database was saved.
\\[bbdb-mail]	 Compose mail to the person represented by the current record.
\\[bbdb-do-all-records]\\[bbdb-mail]	 Compose mail to everyone whose record is displayed.
\\[bbdb-save]	 Save the BBDB file to disk.
\\[bbdb-tex]	 Create a TeX listing of the current record.
\\[bbdb-do-all-records]\\[bbdb-tex]	 Do that for all displayed record.
\\[other-window]	 Move to another window.
\\[bbdb-info]	 Read the Info documentation for BBDB.
\\[bbdb-help]	 Display a one line command summary in the echo area.
\\[bbdb-browse-url]	 Visit Web sites listed in the `url' field(s) of the current record.

For address completion using the names and mail addresses in the database:
	 in Mail mode, type \\<mail-mode-map>\\[bbdb-complete-mail].
	 in Message mode, type \\<message-mode-map>\\[bbdb-complete-mail].

Important variables:
	 `bbdb-auto-revert'
	 `bbdb-ignore-redundant-mails'
	 `bbdb-case-fold-search'
	 `bbdb-completion-list'
	 `bbdb-default-area-code'
	 `bbdb-default-domain'
	 `bbdb-layout'
	 `bbdb-file'
	 `bbdb-phone-style'
	 `bbdb-check-auto-save-file'
	 `bbdb-pop-up-layout'
	 `bbdb-pop-up-window-size'
	 `bbdb-add-name'
	 `bbdb-add-aka'
	 `bbdb-add-mails'
	 `bbdb-new-mails-primary'
	 `bbdb-read-only'
	 `bbdb-mua-pop-up'
	 `bbdb-user-mail-address-re'

There are numerous hooks.  M-x apropos ^bbdb.*hook RET

\\{bbdb-mode-map}

\(fn)" t nil)

(autoload 'bbdb-version "bbdb" "\
Return string describing the version of BBDB.
With prefix ARG, insert string at point.

\(fn &optional ARG)" t nil)

(autoload 'bbdb-initialize "bbdb" "\
Initialize BBDB for MUAS and miscellaneous packages.
List MUAS may include the following symbols to initialize the respective
mail/news readers, composers, and miscellaneous packages:
  gnus       Gnus mail/news reader.
  mh-e       MH-E mail reader.
  mu4e       Mu4e mail reader.
  notmuch    Notmuch mail reader.
  rmail      Rmail mail reader.
  vm         VM mail reader.
  mail       Mail (M-x mail).
  message    Message mode.
  wl         Wanderlust mail reader.

  anniv      Anniversaries in Emacs diary.

  sc         Supercite.  However, this is not the full story.
               See bbdb-sc.el for how to fully hook BBDB into Supercite.

  pgp        PGP support:  this adds `bbdb-pgp' to `message-send-hook'
               and `mail-send-hook' so that `bbdb-pgp' runs automatically
               when a message is sent.
               Yet see info node `(message)Signing and encryption'
               why you might not want to rely for encryption on a hook
               function which runs just before the message is sent,
               that is, you might want to call the command `bbdb-pgp' manually,
               then call `mml-preview'.

See also `bbdb-mua-auto-update-init'.  The latter is a separate function
as this allows one to initialize the auto update feature for some MUAs only,
for example only for outgoing messages.

\(fn &rest MUAS)" nil nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "bbdb" '("bbdb-")))



(autoload 'bbdb-anniv-diary-entries "bbdb-anniv" "\
Add anniversaries from BBDB records to `diary-list-entries'.
This obeys `calendar-date-style' via `diary-date-forms'.
To enable this feature, put the following into your .emacs:

 (add-hook \\='diary-list-entries-hook \\='bbdb-anniv-diary-entries)" nil nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "bbdb-anniv" '("bbdb-anniv-")))



(autoload 'bbdb-do-all-records "bbdb-com" "\
Command prefix for operating on all records currently displayed.
With prefix ARG a positive number, operate on all records.
With prefix ARG a negative number, operate on current record only.
This only works for certain commands.

\(fn &optional ARG)" t nil)

(autoload 'bbdb-do-records "bbdb-com" "\
Return list of records to operate on.
Normally this list includes only the current record.
It includes all currently displayed records if the command prefix \\<bbdb-mode-map>\\[bbdb-do-all-records] is used.
If FULL is non-nil, the list of records includes display information.

\(fn &optional FULL)" nil nil)

(autoload 'bbdb-append-display-p "bbdb-com" "\
Return variable `bbdb-append-display' and reset." nil nil)

(autoload 'bbdb-append-display "bbdb-com" "\
Toggle appending next searched records in the *BBDB* buffer.
With prefix ARG \\[universal-argument] always append.
With ARG a positive number append for that many times.
With ARG a negative number do not append.

\(fn &optional ARG)" t nil)

(autoload 'bbdb-search-invert "bbdb-com" "\
Toggle inversion of the next search command.
With prefix ARG a positive number, invert next search.
With prefix ARG a negative number, do not invert next search.

\(fn &optional ARG)" t nil)

(autoload 'bbdb "bbdb-com" "\
Display all records in the BBDB matching REGEXP
in either the name(s), organization, address, phone, mail, or xfields.

\(fn REGEXP &optional LAYOUT)" t nil)

(autoload 'bbdb-search-name "bbdb-com" "\
Display all records in the BBDB matching REGEXP in the name
\(or ``alternate'' names).

\(fn REGEXP &optional LAYOUT)" t nil)

(autoload 'bbdb-search-organization "bbdb-com" "\
Display all records in the BBDB matching REGEXP in the organization field.

\(fn REGEXP &optional LAYOUT)" t nil)

(autoload 'bbdb-search-address "bbdb-com" "\
Display all records in the BBDB matching REGEXP in the address fields.

\(fn REGEXP &optional LAYOUT)" t nil)

(autoload 'bbdb-search-mail "bbdb-com" "\
Display all records in the BBDB matching REGEXP in the mail address.

\(fn REGEXP &optional LAYOUT)" t nil)

(autoload 'bbdb-search-phone "bbdb-com" "\
Display all records in the BBDB matching REGEXP in the phones field.

\(fn REGEXP &optional LAYOUT)" t nil)

(autoload 'bbdb-search-xfields "bbdb-com" "\
Display all BBDB records for which xfield FIELD matches REGEXP.

\(fn FIELD REGEXP &optional LAYOUT)" t nil)

(autoload 'bbdb-search-changed "bbdb-com" "\
Display records which have been changed since BBDB was last saved.

\(fn &optional LAYOUT)" t nil)

(autoload 'bbdb-timestamp-older "bbdb-com" "\
Display records with timestamp older than DATE.
DATE must be in yyyy-mm-dd format.

\(fn DATE &optional LAYOUT)" t nil)

(autoload 'bbdb-timestamp-newer "bbdb-com" "\
Display records with timestamp newer than DATE.
DATE must be in yyyy-mm-dd format.

\(fn DATE &optional LAYOUT)" t nil)

(autoload 'bbdb-creation-older "bbdb-com" "\
Display records with creation-date older than DATE.
DATE must be in yyyy-mm-dd format.

\(fn DATE &optional LAYOUT)" t nil)

(autoload 'bbdb-creation-newer "bbdb-com" "\
Display records with creation-date newer than DATE.
DATE must be in yyyy-mm-dd format.

\(fn DATE &optional LAYOUT)" t nil)

(autoload 'bbdb-creation-no-change "bbdb-com" "\
Display records that have the same timestamp and creation-date.

\(fn &optional LAYOUT)" t nil)

(autoload 'bbdb-create "bbdb-com" "\
Add a new RECORD to BBDB.
When called interactively read all relevant info.
Do not call this from a program; call `bbdb-create-internal' instead.

\(fn RECORD)" t nil)

(autoload 'bbdb-create-internal "bbdb-com" "\
Add a new record to the database and return it.

The following keywords are supported in SPEC:
:name VAL          String or a cons cell (FIRST . LAST), the name of the person.
                   An error is thrown if VAL is already in use
                   and `bbdb-allow-duplicates' is nil.
:affix VAL         List of strings.
:aka VAL           List of strings.
                   An error is thrown if an aka in VAL is already in use
                   and `bbdb-allow-duplicates' is nil.
:organization VAL  List of strings.
:mail VAL          String with comma-separated mail address
                   or a list of strings.
                   An error is thrown if a mail address in VAL is already
                   in use and `bbdb-allow-duplicates' is nil.
:phone VAL         List of phone-number objects.  A phone-number is a vector
                   [\"label\" area-code prefix suffix extension-or-nil]
                   or [\"label\" \"phone-number\"]
:address VAL       List of addresses.  An address is a vector of the form
                   [\"label\" (\"line1\" \"line2\" ... ) \"City\"
                   \"State\" \"Postcode\" \"Country\"].
:xfields VAL       Alist associating symbols with strings.
:uuid VAL          String, the uuid.
:creation-date VAL String, the creation date.
:check             If present, throw an error if a field value is not
                   syntactically correct.

\(fn &rest SPEC)" nil nil)

(autoload 'bbdb-insert-field "bbdb-com" "\
For RECORD, add a new FIELD with value VALUE.
Interactively, read FIELD and VALUE; RECORD is the current record.
A non-nil prefix arg is passed on to `bbdb-read-field' as FLAG (see there).

\(fn RECORD FIELD VALUE)" t nil)

(autoload 'bbdb-edit-field "bbdb-com" "\
Edit the contents of FIELD of RECORD.
If point is in the middle of a multi-line field (e.g., address),
then the entire field is edited, not just the current line.
For editing phone numbers or addresses, VALUE must be the phone number
or address that gets edited. An error is thrown when attempting to edit
a phone number or address with VALUE being nil.  Other fields will be
newly created when calling this function and these fields are not yet
defined for RECORD.

The value of an xfield is a string.  With prefix FLAG the value may be
any lisp object.

If optional arg IDENT is a string, when editing FIELD add this string
to the prompt as an identifier for RECORD.  If IDENT is t, generate
the identifier from the name or mail address of RECORD.

\(fn RECORD FIELD &optional VALUE FLAG IDENT)" t nil)

(autoload 'bbdb-transpose-fields "bbdb-com" "\
Transpose previous and current field of a BBDB record.
With numeric prefix ARG, take previous field and move it past ARG fields.
With region active or ARG 0, transpose field point is in and field mark is in.

Both fields must be in the same record, and must be of the same basic type
\(that is, you can use this command to change the order in which phone numbers
or email addresses are listed, but you cannot use it to make an address appear
before a phone number; the order of field types is fixed).

If the current field is the name field, transpose first and last name,
irrespective of the value of ARG.

\(fn ARG)" t nil)

(autoload 'bbdb-delete-field-or-record "bbdb-com" "\
For RECORDS delete FIELD.
If FIELD is the `name' field, delete RECORDS from datanbase.
Interactively, use BBDB prefix \\<bbdb-mode-map>\\[bbdb-do-all-records], see `bbdb-do-all-records',
and FIELD is the field point is on.
If prefix NOPROMPT is non-nil, do not confirm deletion.

\(fn RECORDS FIELD &optional NOPROMPT)" t nil)

(autoload 'bbdb-delete-records "bbdb-com" "\
Delete RECORDS.
Interactively, use BBDB prefix \\<bbdb-mode-map>\\[bbdb-do-all-records], see `bbdb-do-all-records'.
If prefix NOPROMPT is non-nil, do not confirm deletion.

\(fn RECORDS &optional NOPROMPT)" t nil)

(autoload 'bbdb-display-all-records "bbdb-com" "\
Show all records.
If invoked in a *BBDB* buffer point stays on the currently visible record.
Inverse of `bbdb-display-current-record'.

\(fn &optional LAYOUT)" t nil)

(autoload 'bbdb-display-current-record "bbdb-com" "\
Narrow to current record.  Inverse of `bbdb-display-all-records'.

\(fn &optional LAYOUT)" t nil)

(autoload 'bbdb-toggle-records-layout "bbdb-com" "\
Toggle layout of RECORDS (elided or expanded).
Interactively, use BBDB prefix \\<bbdb-mode-map>\\[bbdb-do-all-records], see `bbdb-do-all-records'.
With prefix ARG 0, RECORDS are displayed elided.
With any other non-nil ARG, RECORDS are displayed expanded.

\(fn RECORDS &optional ARG)" t nil)

(autoload 'bbdb-display-records-completely "bbdb-com" "\
Display RECORDS using layout `full-multi-line' (i.e., display all fields).
Interactively, use BBDB prefix \\<bbdb-mode-map>\\[bbdb-do-all-records], see `bbdb-do-all-records'.

\(fn RECORDS)" t nil)

(autoload 'bbdb-display-records-with-layout "bbdb-com" "\
Display RECORDS using LAYOUT.
Interactively, use BBDB prefix \\<bbdb-mode-map>\\[bbdb-do-all-records], see `bbdb-do-all-records'.

\(fn RECORDS LAYOUT)" t nil)

(autoload 'bbdb-omit-record "bbdb-com" "\
Remove current record from the display without deleting it from BBDB.
With prefix N, omit the next N records.  If negative, omit backwards.

\(fn N)" t nil)

(autoload 'bbdb-merge-records "bbdb-com" "\
Merge RECORD1 into RECORD2, then delete RECORD1 and return RECORD2.
If both records have name fields ask which one to use.
Concatenate other fields, ignoring duplicates.
RECORD1 need not be known to BBDB, its hash and cache are ignored.
Update hash and cache for RECORD2.

Interactively, RECORD1 is the current record; prompt for RECORD2.
With prefix, RECORD2 defaults to the first record with the same name.

\(fn RECORD1 RECORD2)" t nil)

(autoload 'bbdb-sort-addresses "bbdb-com" "\
Sort the addresses in RECORDS according to the label.
Interactively, use BBDB prefix \\<bbdb-mode-map>\\[bbdb-do-all-records], see `bbdb-do-all-records'.
If UPDATE is non-nil (as in interactive calls) update the database.
Otherwise, this is the caller's responsiblity (for example, when used
in `bbdb-change-hook').

\(fn RECORDS &optional UPDATE)" t nil)

(autoload 'bbdb-sort-phones "bbdb-com" "\
Sort the phones in RECORDS according to the label.
Interactively, use BBDB prefix \\<bbdb-mode-map>\\[bbdb-do-all-records], see `bbdb-do-all-records'.
If UPDATE is non-nil (as in interactive calls) update the database.
Otherwise, this is the caller's responsiblity (for example, when used
in `bbdb-change-hook').

\(fn RECORDS &optional UPDATE)" t nil)

(autoload 'bbdb-sort-xfields "bbdb-com" "\
Sort the xfields in RECORDS according to `bbdb-xfields-sort-order'.
Interactively, use BBDB prefix \\<bbdb-mode-map>\\[bbdb-do-all-records], see `bbdb-do-all-records'.
If UPDATE is non-nil (as in interactive calls) update the database.
Otherwise, this is the caller's responsiblity (for example, when used
in `bbdb-change-hook').

\(fn RECORDS &optional UPDATE)" t nil)

(autoload 'bbdb-dwim-mail "bbdb-com" "\
Return a string to use as the mail address of RECORD.
The name in the mail address is formatted obeying `bbdb-mail-name-format'
and `bbdb-mail-name'.  However, if both the first name and last name
are constituents of the address as in John.Doe@Some.Host,
and `bbdb-mail-avoid-redundancy' is non-nil, then the address is used as is
and `bbdb-mail-name-format' and `bbdb-mail-name' are ignored.
If `bbdb-mail-avoid-redundancy' is \\='mail-only the name is never included.
MAIL may be a mail address to be used for RECORD.
If MAIL is an integer, use the MAILth mail address of RECORD.
If MAIL is nil use the first mail address of RECORD.

\(fn RECORD &optional MAIL)" nil nil)

(autoload 'bbdb-mail "bbdb-com" "\
Compose a mail message to RECORDS (optional: using SUBJECT).
Interactively, use BBDB prefix \\<bbdb-mode-map>\\[bbdb-do-all-records], see `bbdb-do-all-records'.
By default, the first mail addresses of RECORDS are used.
If prefix N is a number, use Nth mail address of RECORDS (starting from 1).
If prefix N is C-u (t noninteractively) use all mail addresses of RECORDS.
If VERBOSE is non-nil (as in interactive calls) be verbose.

\(fn RECORDS &optional SUBJECT N VERBOSE)" t nil)

(autoload 'bbdb-completion-predicate "bbdb-com" "\
For use as the third argument to `completing-read'.
Obey `bbdb-completion-list'.

\(fn KEY RECORDS)" nil nil)

(autoload 'bbdb-completing-read-mails "bbdb-com" "\
Like `read-string', but allows `bbdb-complete-mail' style completion.

\(fn PROMPT &optional INIT)" nil nil)

(autoload 'bbdb-complete-mail "bbdb-com" "\
In a mail buffer, complete the user name or mail before point.
Completion happens up to the preceeding colon, comma, or BEG.
Return non-nil if there is a valid completion, else return nil.

Completion behaviour obeys `bbdb-completion-list' (see there).
If what has been typed matches a unique BBDB record, insert an address
formatted by `bbdb-dwim-mail' (see there).  Also, display this record
if `bbdb-completion-display-record' is non-nil,
If what has been typed is a valid completion but does not match
a unique record, display a list of completions.
If the completion is done and `bbdb-complete-mail-allow-cycling' is t
then cycle through the mails for the matching record.  If BBDB
would format a given address different from what we have in the mail buffer,
the first round of cycling reformats the address accordingly, then we cycle
through the mails for the matching record.
With prefix CYCLE-COMPLETION-BUFFER non-nil, display a list of all mails
available for cycling.

Set the variable `bbdb-complete-mail' non-nil for enabling this feature
as part of the MUA insinuation.

\(fn &optional BEG CYCLE-COMPLETION-BUFFER)" t nil)

(define-obsolete-function-alias 'bbdb-complete-name #'bbdb-complete-mail "3.0")

(autoload 'bbdb-mail-aliases "bbdb-com" "\
Define mail aliases for the records in the database.
Define a mail alias for every record that has a `mail-alias' field
which is the contents of that field.
If there are multiple comma-separated words in the `mail-alias' field,
then all of those words will be defined as aliases for that person.

If multiple records in the database have the same mail alias,
then that alias expands to a comma-separated list of the mail addresses
of all of these people.
Add this command to `mail-setup-hook'.

Mail aliases are (re)built only if `bbdb-mail-aliases-need-rebuilt' is non-nil
because the database was newly loaded or it has been edited.
Rebuilding the aliases is enforced if prefix FORCE-REBUILT is t.

\(fn &optional FORCE-REBUILT NOISY)" t nil)

(defsubst bbdb-mail-alias-list (alias) (if (stringp alias) (bbdb-split bbdb-mail-alias-field alias) alias))

(autoload 'bbdb-dial "bbdb-com" "\
Dial the number at point.
If the point is at the beginning of a record, dial the first phone number.
Use rules from `bbdb-dial-local-prefix-alist' unless prefix FORCE-AREA-CODE
is non-nil.  Do not dial the extension.

\(fn PHONE FORCE-AREA-CODE)" t nil)

(autoload 'bbdb-browse-url "bbdb-com" "\
Brwose URLs stored in the `url' field of RECORDS.
Interactively, use BBDB prefix \\<bbdb-mode-map>\\[bbdb-do-all-records], see `bbdb-do-all-records'.
Prefix WHICH specifies which URL in field `url' is used (starting from 0).
Default is the first URL.

\(fn RECORDS &optional WHICH)" t nil)

(autoload 'bbdb-grab-url "bbdb-com" "\
Grab URL and store it in RECORD.

\(fn RECORD URL)" t nil)

(autoload 'bbdb-copy-records-as-kill "bbdb-com" "\
Copy RECORDS to kill ring.
Interactively, use BBDB prefix \\<bbdb-mode-map>\\[bbdb-do-all-records], see `bbdb-do-all-records'.

\(fn RECORDS)" t nil)

(autoload 'bbdb-copy-fields-as-kill "bbdb-com" "\
For RECORDS copy values of FIELD at point to kill ring.
If FIELD is an address or phone with a label, copy only field values
with the same label.  With numeric prefix NUM, if the value of FIELD
is a list, copy only the NUMth list element.
Interactively, use BBDB prefix \\<bbdb-mode-map>\\[bbdb-do-all-records], see `bbdb-do-all-records'.

\(fn RECORDS FIELD &optional NUM)" t nil)

(autoload 'bbdb-info "bbdb-com" nil t nil)

(autoload 'bbdb-help "bbdb-com" nil t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "bbdb-com" '("bbdb-")))



(autoload 'bbdb-insinuate-gnus "bbdb-gnus" "\
Hook BBDB into Gnus.
Do not call this in your init file.  Use `bbdb-initialize'." nil nil)



(autoload 'bbdb/gnus-score-invalidate-alist "bbdb-gnus-aux" "\
This function is called through `bbdb-after-change-hook',
and sets `bbdb/gnus-score-rebuild-alist' to t if the changed
record contains a gnus-score field.

\(fn RECORD)" nil nil)

(autoload 'bbdb/gnus-score "bbdb-gnus-aux" "\
This returns a score alist for Gnus.  A score pair will be made for
every member of the mail field in records which also have a gnus-score
field.  This allows the BBDB to serve as a supplemental global score
file, with the advantage that it can keep up with multiple and changing
addresses better than the traditionally static global scorefile.

\(fn GROUP)" nil nil)

(autoload 'bbdb/gnus-split-method "bbdb-gnus-aux" "\
This function expects to be called in a buffer which contains a mail
message to be spooled, and the buffer should be narrowed to the message
headers.  It returns a list of groups to which the message should be
spooled, using the addresses in the headers and information from BBDB." nil nil)

(autoload 'bbdb/gnus-nnimap-folder-list-from-bbdb "bbdb-gnus-aux" "\
Return a list of ( \"From\" mail-regexp imap-folder-name) tuples
based on the contents of the bbdb.

The folder-name is the value of the \\='imap attribute of the BBDB record;
the mail-regexp consists of all the mail addresses for the BBDB record
concatenated with OR.  Records without an \\='imap attribute are ignored.

Here  is an example of a relevant BBDB record:

Uwe Brauer
           mail: oub@mat.ucm.es
           imap: testimap

This function uses `regexp-opt' to generate the mail-regexp which automatically
`regexp-quote's its arguments.  Please note: in order that this will work with
the `nnimap-split-fancy' method you have to use macros, that is your setting
will look like:

\(setq nnimap-split-rule  \\='nnimap-split-fancy
       nnimap-split-inbox \"INBOX\"
       nnimap-split-fancy
       \\=`(| ,@(bbdb/gnus-nnimap-folder-list-from-bbdb)
            ... ))

Note that \\=`( is the backquote, NOT the quote \\='(." nil nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "bbdb-gnus-aux" '("bbdb/gnus-s")))



(autoload 'bbdb-ispell-export "bbdb-ispell" "\
Export BBDB records to ispell personal dictionaries." t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "bbdb-ispell" '("bbdb-ispell-")))



(autoload 'bbdb-insinuate-message "bbdb-message" "\
Hook BBDB into Message Mode.
Do not call this in your init file.  Use `bbdb-initialize'." nil nil)

(autoload 'bbdb-insinuate-mail "bbdb-message" "\
Hook BBDB into Mail Mode.
Do not call this in your init file.  Use `bbdb-initialize'." nil nil)



(autoload 'bbdb/mh-header "bbdb-mhe" "\
Find and return the value of HEADER in the current buffer.
Returns the empty string if HEADER is not in the message.

\(fn HEADER)" nil nil)

(autoload 'bbdb-insinuate-mh "bbdb-mhe" "\
Call this function to hook BBDB into MH-E.
Do not call this in your init file.  Use `bbdb-initialize'." nil nil)



(autoload 'bbdb-migrate "bbdb-migrate" "\
Migrate RECORDS from format OLD to `bbdb-file-format'.

\(fn RECORDS OLD)" nil nil)

(autoload 'bbdb-undocumented-variables "bbdb-migrate" "\
Return list of undocumented variables in NAME-SPACE.
NAME-SPACE defaults to \"bbdb-\".  Use a prefix arg to specify NAME-SPACE
interactively.  If MESSAGE is non-nil (as in interactive calls) display
the list in the message area.

This command may come handy to identify BBDB variables in your init file
that are not used anymore by the current version of BBDB.  Yet this fails
for outdated BBDB variables that are set via your personal `custom-file'.

\(fn &optional NAME-SPACE MESSAGE)" t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "bbdb-migrate" '("bbdb-migrate-")))



(autoload 'bbdb-insinuate-mu4e "bbdb-mu4e" "\
Hook BBDB into mu4e.
Do not call this in your init file.  Use `bbdb-initialize'." nil nil)



(autoload 'bbdb-message-header "bbdb-mua" "\
For the current message return the value of HEADER.
MIME encoded headers are decoded.  Return nil if HEADER does not exist.

\(fn HEADER)" nil nil)

(autoload 'bbdb-accept-message "bbdb-mua" "\
For use with variable `bbdb-mua-auto-action' and friends.
Return the value of variable `bbdb-mua-action' for messages matching
`bbdb-accept-message-alist'.  If INVERT is non-nil, accept messages
not matching `bbdb-ignore-message-alist'.

\(fn &optional INVERT)" nil nil)

(autoload 'bbdb-ignore-message "bbdb-mua" "\
For use with variable `bbdb-mua-auto-action' and friends.
Return the value of variable `bbdb-mua-action' for messages not matching
`bbdb-ignore-message-alist'.  If INVERT is non-nil, accept messages
matching `bbdb-accept-message-alist'.

\(fn &optional INVERT)" nil nil)

(autoload 'bbdb-select-message "bbdb-mua" "\
For use with variable `bbdb-mua-auto-action' and friends.
Return the value of variable `bbdb-mua-action' for messages both matching
`bbdb-accept-message-alist' and not matching `bbdb-ignore-message-alist'." nil nil)

(autoload 'bbdb-update-records "bbdb-mua" "\
Return the list of BBDB records matching ADDRESS-LIST.
ADDRESS-LIST is a list of mail addresses.  (It can be extracted from
a mail message using `bbdb-get-address-components'.)
ACTION may take the following values:
 search       Search for existing records matching ADDRESS.
 update       Search for existing records matching ADDRESS;
                update name and mail field if necessary.
 query        Search for existing records matching ADDRESS;
                query for creation of a new record if the record does not exist.
 create or t  Search for existing records matching ADDRESS;
                create a new record if it does not yet exist.
 nil          Do nothing.
 a function   This functions will be called with no arguments.
                It should return one of the above values.

If SORT is non-nil, sort records according to `bbdb-record-lessp'.
Otherwise, the records are ordered according to ADDRESS-LIST.

Usually this function is called by the wrapper `bbdb-mua-update-records'.

\(fn ADDRESS-LIST &optional ACTION SORT)" nil nil)

(autoload 'bbdb-mua-display-records "bbdb-mua" "\
Display the BBDB record(s) for the addresses in this message.
This looks into the headers of a message according to HEADER-CLASS.
Then for the mail addresses found the corresponding BBDB records are displayed.
ACTION determines whether only existing BBDB records are displayed
or whether also new records are created for these mail addresses.

HEADER-CLASS is defined in `bbdb-message-headers'.  If it is nil,
use all classes in `bbdb-message-headers'.
ACTION may take the same values as `bbdb-mua-action'.
For interactive calls, see function `bbdb-mua-interactive-action'.
If ALL is non-nil, bind `bbdb-message-all-addresses' to ALL.

\(fn &optional HEADER-CLASS ACTION ALL)" t nil)

(autoload 'bbdb-mua-display-sender "bbdb-mua" "\
Display the BBDB record(s) for the sender of this message.
ACTION may take the same values as `bbdb-mua-action'.
For interactive calls, see function `bbdb-mua-interactive-action'.

\(fn &optional ACTION)" t nil)

(autoload 'bbdb-mua-display-recipients "bbdb-mua" "\
Display the BBDB record(s) for the recipients of this message.
ACTION may take the same values as `bbdb-mua-action'.
For interactive calls, see function `bbdb-mua-interactive-action'.

\(fn &optional ACTION)" t nil)

(autoload 'bbdb-mua-display-all-records "bbdb-mua" "\
Display the BBDB record(s) for all addresses in this message.
ACTION may take the same values as `bbdb-mua-action'.
For interactive calls, see function `bbdb-mua-interactive-action'.

\(fn &optional ACTION)" t nil)

(autoload 'bbdb-mua-display-all-recipients "bbdb-mua" "\
Display BBDB records for all recipients of this message.
ACTION may take the same values as `bbdb-mua-action'.
For interactive calls, see function `bbdb-mua-interactive-action'.

\(fn &optional ACTION)" t nil)

(autoload 'bbdb-mua-annotate-sender "bbdb-mua" "\
Add ANNOTATION to field FIELD of the BBDB record(s) of message sender(s).
FIELD defaults to `bbdb-annotate-field'.
If REPLACE is non-nil, ANNOTATION replaces the content of FIELD.
ACTION may take the same values as `bbdb-mua-action'.
For interactive calls, use car of `bbdb-mua-interactive-action'.

\(fn ANNOTATION &optional FIELD REPLACE ACTION)" t nil)

(autoload 'bbdb-mua-annotate-recipients "bbdb-mua" "\
Add ANNOTATION to field FIELD of the BBDB records of message recipients.
FIELD defaults to `bbdb-annotate-field'.
If REPLACE is non-nil, ANNOTATION replaces the content of FIELD.
ACTION may take the same values as `bbdb-mua-action'.
For interactive calls, use car of `bbdb-mua-interactive-action'.

\(fn ANNOTATION &optional FIELD REPLACE ACTION)" t nil)

(autoload 'bbdb-mua-edit-field "bbdb-mua" "\
Edit FIELD of the BBDB record(s) of message sender(s) or recipients.
FIELD defaults to value of variable `bbdb-mua-edit-field'.
ACTION may take the same values as `bbdb-mua-action'.
For interactive calls, see function `bbdb-mua-interactive-action'.
HEADER-CLASS is defined in `bbdb-message-headers'.  If it is nil,
use all classes in `bbdb-message-headers'.

\(fn &optional FIELD ACTION HEADER-CLASS)" t nil)

(autoload 'bbdb-mua-edit-field-sender "bbdb-mua" "\
Edit FIELD of record corresponding to sender of this message.
FIELD defaults to value of variable `bbdb-mua-edit-field'.
ACTION may take the same values as `bbdb-mua-action'.
For interactive calls, see function `bbdb-mua-interactive-action'.

\(fn &optional FIELD ACTION)" t nil)

(autoload 'bbdb-mua-edit-field-recipients "bbdb-mua" "\
Edit FIELD of record corresponding to recipient of this message.
FIELD defaults to value of variable `bbdb-mua-edit-field'.
ACTION may take the same values as `bbdb-mua-action'.
For interactive calls, see function `bbdb-mua-interactive-action'.

\(fn &optional FIELD ACTION)" t nil)

(autoload 'bbdb-mua-auto-update "bbdb-mua" "\
Update BBDB automatically based on incoming and outgoing messages.
This looks into the headers of a message according to HEADER-CLASS.
Then for the mail addresses found the corresponding BBDB records are updated.
ACTION determines whether only existing BBDB records are taken
or whether also new records are created for these mail addresses.
Return matching records.

HEADER-CLASS is defined in `bbdb-message-headers'.  If it is nil,
use all classes in `bbdb-message-headers'.
ACTION may take the same values as `bbdb-mua-auto-action'.
If ACTION is nil, use `bbdb-mua-auto-action' (which see).

If `bbdb-mua-pop-up' is non-nil, BBDB pops up the *BBDB* buffer
along with the MUA window(s), displaying the matching records
using `bbdb-pop-up-layout'.
If this is nil, BBDB is updated silently.

This function is intended for noninteractive use via appropriate MUA hooks.
Call `bbdb-mua-auto-update-init' in your init file to put this function
into the respective MUA hooks.
See `bbdb-mua-display-records' and friends for interactive commands.

\(fn &optional HEADER-CLASS ACTION)" nil nil)

(autoload 'bbdb-mua-auto-update-init "bbdb-mua" "\
For MUAS add `bbdb-mua-auto-update' to their presentation hook.
If a MUA is not an element of MUAS, `bbdb-mua-auto-update' is removed
from the respective presentation hook.

Call this function in your init file to use the auto update feature with MUAS.
This function is separate from the general function `bbdb-initialize'
as this allows one to initialize the auto update feature for some MUAs only,
for example only for outgoing messages.

See `bbdb-mua-auto-update' for details about the auto update feature.

\(fn &rest MUAS)" nil nil)

(autoload 'bbdb-auto-notes "bbdb-mua" "\
Automatically annotate RECORD based on the headers of the current message.
See the variables `bbdb-auto-notes-rules', `bbdb-auto-notes-ignore-messages'
and `bbdb-auto-notes-ignore-headers'.
For use as an element of `bbdb-notice-record-hook'.

\(fn RECORD)" nil nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "bbdb-mua" '("bbdb-")))



(autoload 'bbdb/notmuch-header "bbdb-notmuch" "\
Find and return the value of HEADER in the current buffer.
Return nil if HEADER is not in the message.  This function works
in notmuch-show-mode and notmuch-tree-mode buffers.

\(fn HEADER)" nil nil)

(autoload 'bbdb-insinuate-notmuch "bbdb-notmuch" "\
Hook BBDB into notmuch.
Do not call this in your init file.  Use `bbdb-initialize'." nil nil)



(autoload 'bbdb-read-xfield-pgp-mail "bbdb-pgp" "\
Set `bbdb-pgp-field', requiring match with `bbdb-pgp-ranked-actions'.

\(fn &optional INIT)" nil nil)

(autoload 'bbdb-pgp "bbdb-pgp" "\
Add PGP MML tags to a message according to the recipients' BBDB records.
For all message recipients in `bbdb-pgp-headers', this grabs the action
in `bbdb-pgp-field' of their BBDB records.  If this proposes multiple actions,
perform the action which appears first in `bbdb-pgp-ranked-actions'.
If this proposes no action at all, use `bbdb-pgp-default'.
The variable `bbdb-pgp-method' defines the method which is actually used
for signing and encrypting.

This command works with both `mail-mode' and `message-mode' to send
signed or encrypted mail.

To run this command automatically when sending a message,
use `bbdb-initialize' with arg `pgp' to add this function
to `message-send-hook' and `mail-send-hook'.
Yet see info node `(message)Signing and encryption' why you
might not want to rely for encryption on a hook function
which runs just before the message is sent, that is, you might want
to call the command `bbdb-pgp' manually, then call `mml-preview'." t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "bbdb-pgp" '("bbdb-pgp-")))



(autoload 'bbdb-insinuate-rmail "bbdb-rmail" "\
Hook BBDB into RMAIL.
Do not call this in your init file.  Use `bbdb-initialize'." nil nil)



(autoload 'bbdb-sc-update-from "bbdb-sc" "\
Update the \"from\" field in `sc-mail-info'.
If the \"from\" field in `sc-mail-info' contains only a plain mail address,
complement the \"from\" field in `sc-mail-info' with the sender's name in BBDB." nil nil)

(autoload 'bbdb-insinuate-sc "bbdb-sc" "\
Hook BBDB into Supercite.
Do not call this in your init file.  Use `bbdb-initialize'.
However, this is not the full story.  See bbdb-sc.el for how to fully hook
BBDB into Supercite." nil nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "bbdb-sc" '("bbdb-sc-")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "bbdb-site" '("bbdb-")))



(autoload 'bbdb-snarf-vcard "bbdb-snarf" "\
Snarf BBDB record from vCard around position POS using RULE.
The vCard is the one that contains POS or follows POS.
POS defaults to the position of point.
RULE defaults to `bbdb-snarf-vcard'.  See `bbdb-snarf-rule-alist' for details.
Return record.  Also, display the record unless NO-DISPLAY is non-nil.

\(fn &optional POS RULE NO-DISPLAY)" t nil)

(autoload 'bbdb-snarf-vcard-buffer "bbdb-snarf" "\
Snarf BBDB records from vCards in the current buffer.
RULE defaults to `bbdb-snarf-vcard'.  See `bbdb-snarf-rule-alist' for details.
Return the records.  Also, display the records unless NO-DISPLAY is non-nil.

\(fn &optional RULE NO-DISPLAY)" t nil)

(autoload 'bbdb-snarf-paragraph "bbdb-snarf" "\
Snarf BBDB record from paragraph around position POS using RULE.
The paragraph is the one that contains POS or follows POS.
Interactively POS is the position of point.
RULE defaults to `bbdb-snarf-rule-default'.
See `bbdb-snarf-rule-alist' for details.
Return record.  Also, display the record unless NO-DISPLAY is non-nil.

\(fn POS &optional RULE NO-DISPLAY)" t nil)

(autoload 'bbdb-snarf-yank "bbdb-snarf" "\
Snarf a BBDB record from latest kill using RULE.
The latest kill may also be a window system selection, see `current-kill'.
RULE defaults to `bbdb-snarf-rule-default'.
See `bbdb-snarf-rule-alist' for details.
Return record.  Also, display the record unless NO-DISPLAY is non-nil.

\(fn &optional RULE NO-DISPLAY)" t nil)

(autoload 'bbdb-snarf "bbdb-snarf" "\
Snarf a BBDB record in STRING using RULE.
Interactively, STRING is the current region.
RULE defaults to `bbdb-snarf-rule-default'.
See `bbdb-snarf-rule-alist' for details.
Return the record.  Also, displau the record unless NO-DISPLAY is non-nil.
Discard the record and return nil if the record does not have a name or mail.

\(fn STRING &optional RULE NO-DISPLAY)" t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "bbdb-snarf" '("bbdb-snarf-")))



(autoload 'bbdb-tex "bbdb-tex" "\
Generate FILE for TeXing RECORDS.
Interactively, use BBDB prefix \\<bbdb-mode-map>\\[bbdb-do-all-records], see `bbdb-do-all-records'.
RULE should be an element of `bbdb-tex-alist'.

\(fn RECORDS FILE RULE)" t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "bbdb-tex" '("bbdb-tex-")))



(autoload 'bbdb/vm-header "bbdb-vm" "\


\(fn HEADER)" nil nil)

(autoload 'bbdb-insinuate-vm "bbdb-vm" "\
Hook BBDB into VM.
Do not call this in your init file.  Use `bbdb-initialize'." nil nil)



(autoload 'vm-summary-function-B "bbdb-vm-aux" "\
For VM message M return the BBDB name of the sender.
Respect `vm-summary-uninteresting-senders'.

\(fn M)" nil nil)

(defvar bbdb/vm-auto-folder-headers '("From:" "To:" "CC:") "\
The headers used by `bbdb/vm-auto-folder'.
The order in this list is the order how matching will be performed.")

(custom-autoload 'bbdb/vm-auto-folder-headers "bbdb-vm-aux" t)

(defvar bbdb/vm-auto-folder-field 'vm-folder "\
The xfield which `bbdb/vm-auto-folder' searches for.")

(custom-autoload 'bbdb/vm-auto-folder-field "bbdb-vm-aux" t)

(defvar bbdb/vm-virtual-folder-field 'vm-virtual "\
The xfield which `bbdb/vm-virtual-folder' searches for.")

(custom-autoload 'bbdb/vm-virtual-folder-field "bbdb-vm-aux" t)

(defvar bbdb/vm-virtual-real-folders nil "\
Real folders used for defining virtual folders.
If nil use `vm-primary-inbox'.")

(custom-autoload 'bbdb/vm-virtual-real-folders "bbdb-vm-aux" t)

(autoload 'bbdb/vm-auto-folder "bbdb-vm-aux" "\
Add entries to `vm-auto-folder-alist' for the records in BBDB.
For each record that has a `vm-folder' xfield, add an element
\(MAIL-REGEXP . FOLDER-NAME) to `vm-auto-folder-alist'.
The element gets added to the sublists of `vm-auto-folder-alist'
specified in `bbdb/vm-auto-folder-headers'.
MAIL-REGEXP matches the mail addresses of the BBDB record.
The value of the `vm-folder' xfield becomes FOLDER-NAME.
The `vm-folder' xfield is defined via `bbdb/vm-auto-folder-field'.

Add this function to `bbdb-before-save-hook' and your .vm." t nil)

(autoload 'bbdb/vm-virtual-folder "bbdb-vm-aux" "\
Create `vm-virtual-folder-alist' according to the records in BBDB.
For each record that has a `vm-virtual' xfield, add or modify the
corresponding VIRTUAL-FOLDER-NAME element of `vm-virtual-folder-alist'.

  (VIRTUAL-FOLDER-NAME ((FOLDER-NAME ...)
                        (author-or-recipient MAIL-REGEXP)))

VIRTUAL-FOLDER-NAME is the first element of the `vm-virtual' xfield.
FOLDER-NAME ... are either the remaining elements of the `vm-virtual' xfield,
or `bbdb/vm-virtual-real-folders' or `vm-primary-inbox'.
MAIL-REGEXP matches the mail addresses of the BBDB record.
The `vm-virtual' xfield is defined via `bbdb/vm-virtual-folder-field'.

Add this function to `bbdb-before-save-hook' and your .vm." t nil)

(autoload 'bbdb/vm-auto-add-label "bbdb-vm-aux" "\
Automatically add labels to VM messages.
Add this to `bbdb-notice-record-hook' to check the messages noticed by BBDB.
If the value of `bbdb/vm-auto-add-label-field' in the sender's BBDB record
matches a value in `bbdb/vm-auto-add-label-list' then a VM label will be added
to the message.  Such VM labels can be used, e.g., to mark messages via
`vm-mark-matching-messages' or to define virtual folders via
`vm-create-virtual-folder'

Typically `bbdb/vm-auto-add-label-field' and `bbdb/vm-auto-add-label-list'
refer to mail aliases FOO used with multiple records.  This adds a label FOO
to all incoming messages matching FOO.  Then VM can create a virtual folder
for these messages.  The concept of combining multiple recipients of an
outgoing message in one mail alias thus gets extended to incoming messages
from different senders.

\(fn RECORD)" nil nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "bbdb-vm-aux" '("bbdb/vm-a")))



(autoload 'bbdb/wl-header "bbdb-wl" "\


\(fn HEADER)" nil nil)

(autoload 'bbdb-insinuate-wl "bbdb-wl" "\
Hook BBDB into Wanderlust." nil nil)




)
(let ((load-true-file-name "/home/cam/.emacs.d/elpa/counsel-bbdb-0.0.5/counsel-bbdb-autoloads.el")(load-file-name "/home/cam/.emacs.d/elpa/counsel-bbdb-0.0.5/counsel-bbdb-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/home/cam/.emacs.d/elpa/counsel-bbdb-0.0.5/counsel-bbdb-autoloads.el") (car load-path))))



(autoload 'counsel-bbdb-insert-string "counsel-bbdb" "\
Insert STR into current buffer.

\(fn STR)" nil nil)

(autoload 'counsel-bbdb-reload "counsel-bbdb" "\
Load contacts from `bbdb-file'." t nil)

(autoload 'counsel-bbdb-complete-mail "counsel-bbdb" "\
In a mail buffer, complete email before point.
Extra argument APPEND-COMMA will append comma after email.

\(fn &optional APPEND-COMMA)" t nil)

(autoload 'counsel-bbdb-expand-mail-alias "counsel-bbdb" "\
Insert multiple mail address in alias/group." t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "counsel-bbdb" '("counsel-bbdb-")))




)
(let ((load-true-file-name "/home/cam/.emacs.d/elpa/company-statistics-20170210.1933/company-statistics-autoloads.el")(load-file-name "/home/cam/.emacs.d/elpa/company-statistics-20170210.1933/company-statistics-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/home/cam/.emacs.d/elpa/company-statistics-20170210.1933/company-statistics-autoloads.el") (car load-path))))



(defvar company-statistics-mode nil "\
Non-nil if Company-Statistics mode is enabled.
See the `company-statistics-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `company-statistics-mode'.")

(custom-autoload 'company-statistics-mode "company-statistics" nil)

(autoload 'company-statistics-mode "company-statistics" "\
Statistical sorting for company-mode.  Ranks completion candidates by
the frequency with which they have been chosen in recent (as given by
`company-statistics-size') history.

If called interactively, enable Company-Statistics mode if ARG is
positive, and disable it if ARG is zero or negative.  If called
from Lisp, also enable the mode if ARG is omitted or nil, and
toggle it if ARG is `toggle'; disable the mode otherwise.

Turning this mode on and off preserves the statistics.  They are also
preserved automatically between Emacs sessions in the default
configuration.  You can customize this behavior with
`company-statistics-auto-save', `company-statistics-auto-restore' and
`company-statistics-file'.

\(fn &optional ARG)" t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "company-statistics" '("company-s")))




)
(let ((load-true-file-name "/home/cam/.emacs.d/elpa/company-native-complete-20220103.1622/company-native-complete-autoloads.el")(load-file-name "/home/cam/.emacs.d/elpa/company-native-complete-20220103.1622/company-native-complete-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/home/cam/.emacs.d/elpa/company-native-complete-20220103.1622/company-native-complete-autoloads.el") (car load-path))))



(autoload 'company-native-complete "company-native-complete" "\
Completion for native shell complete functionality.
Dispatch based on COMMAND.

\(fn COMMAND &rest IGNORED)" t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "company-native-complete" '("company-native-complete--")))




)
(let ((load-true-file-name "/home/cam/.emacs.d/elpa/company-c-headers-20190825.1631/company-c-headers-autoloads.el")(load-file-name "/home/cam/.emacs.d/elpa/company-c-headers-20190825.1631/company-c-headers-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/home/cam/.emacs.d/elpa/company-c-headers-20190825.1631/company-c-headers-autoloads.el") (car load-path))))



(autoload 'company-c-headers "company-c-headers" "\
Company backend for C/C++ header files.

\(fn COMMAND &optional ARG &rest IGNORED)" t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "company-c-headers" '("call-if-function" "company-c-headers-")))




)
(let ((load-true-file-name "/home/cam/.emacs.d/elpa/command-log-mode-20160413.447/command-log-mode-autoloads.el")(load-file-name "/home/cam/.emacs.d/elpa/command-log-mode-20160413.447/command-log-mode-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/home/cam/.emacs.d/elpa/command-log-mode-20160413.447/command-log-mode-autoloads.el") (car load-path))))



(autoload 'command-log-mode "command-log-mode" "\
Toggle keyboard command logging.

If called interactively, enable Command-Log mode if ARG is
positive, and disable it if ARG is zero or negative.  If called
from Lisp, also enable the mode if ARG is omitted or nil, and
toggle it if ARG is `toggle'; disable the mode otherwise.

\(fn &optional ARG)" t nil)

(autoload 'clm/toggle-command-log-buffer "command-log-mode" "\
Toggle the command log showing or not.

\(fn &optional ARG)" t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "command-log-mode" '("clm/" "command-log-mode-" "global-command-log-mode")))




)
(let ((load-true-file-name "/home/cam/.emacs.d/elpa/color-theme-sanityinc-tomorrow-20231226.930/color-theme-sanityinc-tomorrow-autoloads.el")(load-file-name "/home/cam/.emacs.d/elpa/color-theme-sanityinc-tomorrow-20231226.930/color-theme-sanityinc-tomorrow-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/home/cam/.emacs.d/elpa/color-theme-sanityinc-tomorrow-20231226.930/color-theme-sanityinc-tomorrow-autoloads.el") (car load-path))))



(when (boundp 'custom-theme-load-path) (add-to-list 'custom-theme-load-path (file-name-as-directory (file-name-directory load-file-name))))

(autoload 'color-theme-sanityinc-tomorrow-night "color-theme-sanityinc-tomorrow" "\
Apply the tomorrow night theme." t nil)

(autoload 'color-theme-sanityinc-tomorrow-day "color-theme-sanityinc-tomorrow" "\
Apply the tomorrow day theme." t nil)

(autoload 'color-theme-sanityinc-tomorrow-bright "color-theme-sanityinc-tomorrow" "\
Apply the tomorrow bright theme." t nil)

(autoload 'color-theme-sanityinc-tomorrow-eighties "color-theme-sanityinc-tomorrow" "\
Apply the tomorrow eighties theme." t nil)

(autoload 'color-theme-sanityinc-tomorrow-blue "color-theme-sanityinc-tomorrow" "\
Apply the tomorrow blue theme." t nil)

(register-definition-prefixes "color-theme-sanityinc-tomorrow" '("color-theme-sanityinc-tomorrow" "sanityinc-tomorrow--"))




)
(let ((load-true-file-name "/home/cam/.emacs.d/elpa/color-theme-sanityinc-solarized-20220917.1350/color-theme-sanityinc-solarized-autoloads.el")(load-file-name "/home/cam/.emacs.d/elpa/color-theme-sanityinc-solarized-20220917.1350/color-theme-sanityinc-solarized-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/home/cam/.emacs.d/elpa/color-theme-sanityinc-solarized-20220917.1350/color-theme-sanityinc-solarized-autoloads.el") (car load-path))))



(when (boundp 'custom-theme-load-path) (add-to-list 'custom-theme-load-path (file-name-as-directory (file-name-directory load-file-name))))

(autoload 'color-theme-sanityinc-solarized-dark "color-theme-sanityinc-solarized" "\
Apply the dark solarized theme." t nil)

(autoload 'color-theme-sanityinc-solarized-light "color-theme-sanityinc-solarized" "\
Apply the light solarized theme." t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "color-theme-sanityinc-solarized" '("color-theme-sanityinc-solarized")))




)
(let ((load-true-file-name "/home/cam/.emacs.d/elpa/color-theme-20190220.1115/color-theme-autoloads.el")(load-file-name "/home/cam/.emacs.d/elpa/color-theme-20190220.1115/color-theme-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/home/cam/.emacs.d/elpa/color-theme-20190220.1115/color-theme-autoloads.el") (car load-path))))



(autoload 'color-theme-select "color-theme" "\
Displays a special buffer for selecting and installing a color theme.
With optional prefix ARG, this buffer will include color theme libraries
as well.  A color theme library is in itself not complete, it must be
used as part of another color theme to be useful.  Thus, color theme
libraries are mainly useful for color theme authors.

\(fn &optional ARG)" t nil)

(autoload 'color-theme-describe "color-theme" "\
Describe color theme listed at point.
This shows the documentation of the value of text-property color-theme
at point.  The text-property color-theme should be a color theme
function.  See `color-themes'." t nil)

(autoload 'color-theme-install-at-mouse "color-theme" "\
Install color theme clicked upon using the mouse.
First argument EVENT is used to set point.  Then
`color-theme-install-at-point' is called.

\(fn EVENT)" t nil)

(autoload 'color-theme-install-at-point-for-current-frame "color-theme" "\
Install color theme at point for current frame only.
Binds `color-theme-is-global' to nil and calls
`color-theme-install-at-point'." t nil)

(autoload 'color-theme-print "color-theme" "\
Print the current color theme function.

You can contribute this function to <URL:news:gnu.emacs.sources> or
paste it into your .emacs file and call it.  That should recreate all
the settings necessary for your color theme.

Example:

    (require 'color-theme)
    (defun my-color-theme ()
      \"Color theme by Alex Schroeder, created 2000-05-17.\"
      (interactive)
      (color-theme-install
       '(...
	 ...
	 ...)))
    (my-color-theme)

If you want to use a specific color theme function, you can call the
color theme function in your .emacs directly.

Example:

    (require 'color-theme)
    (color-theme-gnome2)

\(fn &optional BUF)" t nil)

(autoload 'color-theme-analyze-defun "color-theme" "\
Once you have a color-theme printed, check for missing faces.
This is used by maintainers who receive a color-theme submission
and want to make sure it follows the guidelines by the color-theme
author." t nil)

(autoload 'color-theme-make-snapshot "color-theme" "\
Return the definition of the current color-theme.
The function returned will recreate the color-theme in use at the moment." nil nil)

(autoload 'color-theme-compare "color-theme" "\
Compare two color themes.
This will print the differences between installing THEME-A and
installing THEME-B.  Note that the order is important: If a face is
defined in THEME-A and not in THEME-B, then this will not show up as a
difference, because there is no reset before installing THEME-B.  If a
face is defined in THEME-B and not in THEME-A, then this will show up as
a difference.

\(fn THEME-A THEME-B)" t nil)

(autoload 'color-theme-install "color-theme" "\
Install a color theme defined by frame parameters, variables and faces.

The theme is installed for all present and future frames; any missing
faces are created.  See `color-theme-install-faces'.

THEME is a color theme definition.  See below for more information.

If you want to install a color theme from your .emacs, use the output
generated by `color-theme-print'.  This produces color theme function
which you can copy to your .emacs.

A color theme definition is a list:
\([FUNCTION] FRAME-PARAMETERS VARIABLE-SETTINGS FACE-DEFINITIONS)

FUNCTION is the color theme function which called `color-theme-install'.
This is no longer used.  There was a time when this package supported
automatic factoring of color themes.  This has been abandoned.

FRAME-PARAMETERS is an alist of frame parameters.  These are installed
with `color-theme-install-frame-params'.  These are installed last such
that any changes to the default face can be changed by the frame
parameters.

VARIABLE-DEFINITIONS is an alist of variable settings.  These are
installed with `color-theme-install-variables'.

FACE-DEFINITIONS is an alist of face definitions.  These are installed
with `color-theme-install-faces'.

If `color-theme-is-cumulative' is nil, a color theme will undo face and
frame-parameter settings of previous color themes.

\(fn THEME)" nil nil)

(autoload 'color-theme-submit "color-theme" "\
Submit your color-theme to the maintainer." t nil)

(autoload 'color-theme-initialize "color-theme" "\
Initialize the color theme package by loading color-theme-libraries." t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "color-theme" '("color-theme" "define-color-theme")))




)
(let ((load-true-file-name "/home/cam/.emacs.d/elpa/cnfonts-1.1.1/cnfonts-autoloads.el")(load-file-name "/home/cam/.emacs.d/elpa/cnfonts-1.1.1/cnfonts-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/home/cam/.emacs.d/elpa/cnfonts-1.1.1/cnfonts-autoloads.el") (car load-path))))



(defvar cnfonts-mode nil "\
Non-nil if Cnfonts mode is enabled.
See the `cnfonts-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `cnfonts-mode'.")

(custom-autoload 'cnfonts-mode "cnfonts" nil)

(autoload 'cnfonts-mode "cnfonts" "\
cnfonts mode.

This is a minor mode.  If called interactively, toggle the
`Cnfonts mode' mode.  If the prefix argument is positive, enable
the mode, and if it is zero or negative, disable the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable
the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `(default-value \\='cnfonts-mode)'.

The mode's hook is called both when the mode is enabled and when
it is disabled.

\(fn &optional ARG)" t nil)

(autoload 'cnfonts-set-font "cnfonts" "\
使用已经保存的字号设置字体.
如果 FRAME 是 non-nil, 设置对应的 FRAME 的字体。

\(fn &optional FRAME)" t nil)

(autoload 'cnfonts-increase-fontsize "cnfonts" "\
Cnfonts 增大字体." t nil)

(autoload 'cnfonts-decrease-fontsize "cnfonts" "\
Cnfonts 减小字体." t nil)

(autoload 'cnfonts-reset-fontsize "cnfonts" "\
使用 `cnfonts-default-fontsize' 重置字号." t nil)

(autoload 'cnfonts-switch-profile "cnfonts" "\
切换 cnfonts profile." t nil)

(autoload 'cnfonts-next-profile "cnfonts" "\
选择下一个字体设置 profile.

\(fn &optional _)" t nil)

(declare-function cnfonts-ui "cnfonts-ui")

(autoload 'cnfonts-regenerate-profile "cnfonts" "\
重新生成当前 profile." t nil)

(register-definition-prefixes "cnfonts" '("cnfonts-"))



(register-definition-prefixes "cnfonts-ui" '("cnfonts-ui"))




)
(let ((load-true-file-name "/home/cam/.emacs.d/elpa/cmake-mode-3.28.1/cmake-mode-autoloads.el")(load-file-name "/home/cam/.emacs.d/elpa/cmake-mode-3.28.1/cmake-mode-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/home/cam/.emacs.d/elpa/cmake-mode-3.28.1/cmake-mode-autoloads.el") (car load-path))))



(autoload 'cmake-mode "cmake-mode" "\
Major mode for editing CMake source files.

\(fn)" t nil)

(autoload 'cmake-command-run "cmake-mode" "\
Runs the command cmake with the arguments specified.  The
optional argument topic will be appended to the argument list.

\(fn TYPE &optional TOPIC BUFFER)" t nil)

(autoload 'cmake-command-run-help "cmake-mode" "\
`cmake-command-run' but rendered in `rst-mode'.

\(fn TYPE &optional TOPIC BUFFER)" t nil)

(autoload 'cmake-help-list-commands "cmake-mode" "\
Prints out a list of the cmake commands." t nil)

(autoload 'cmake-help-command "cmake-mode" "\
Prints out the help message for the command the cursor is on." t nil)

(autoload 'cmake-help-module "cmake-mode" "\
Prints out the help message for the module the cursor is on." t nil)

(autoload 'cmake-help-variable "cmake-mode" "\
Prints out the help message for the variable the cursor is on." t nil)

(autoload 'cmake-help-property "cmake-mode" "\
Prints out the help message for the property the cursor is on." t nil)

(autoload 'cmake-help "cmake-mode" "\
Queries for any of the four available help topics and prints out the appropriate page." t nil)

(add-to-list 'auto-mode-alist '("CMakeLists\\.txt\\'" . cmake-mode))

(add-to-list 'auto-mode-alist '("\\.cmake\\'" . cmake-mode))

(register-definition-prefixes "cmake-mode" '("cmake-"))




)
(let ((load-true-file-name "/home/cam/.emacs.d/elpa/clues-theme-20161213.1127/clues-theme-autoloads.el")(load-file-name "/home/cam/.emacs.d/elpa/clues-theme-20161213.1127/clues-theme-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/home/cam/.emacs.d/elpa/clues-theme-20161213.1127/clues-theme-autoloads.el") (car load-path))))



(when load-file-name (add-to-list 'custom-theme-load-path (file-name-as-directory (file-name-directory load-file-name))))

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "clues-theme" '("clues")))




)
(let ((load-true-file-name "/home/cam/.emacs.d/elpa/cliphist-0.6.3/cliphist-autoloads.el")(load-file-name "/home/cam/.emacs.d/elpa/cliphist-0.6.3/cliphist-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/home/cam/.emacs.d/elpa/cliphist-0.6.3/cliphist-autoloads.el") (car load-path))))



(autoload 'cliphist-version "cliphist" "\
Echo package version." nil nil)

(autoload 'cliphist-read-items "cliphist" "\
Read clipboard items." t nil)

(autoload 'cliphist-paste-item "cliphist" "\
Paste selected item into current buffer.
Rectangle paste the item if arg RECT-PASTE is non-nil.

\(fn &optional RECT-PASTE)" t nil)

(autoload 'cliphist-select-item "cliphist" "\
Select one item from clipboard history.
NUM and selected item is passed to `cliphist-select-item-callback'.

\(fn &optional NUM)" t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "cliphist" '("cliphist-")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "cliphist-clipit" '("cliphist-clipit-")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "cliphist-flycut" '("cliphist-flycut-")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "cliphist-greenclip" '("cliphist-greenclip-")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "cliphist-parcellite" '("cliphist-parcellite-")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "cliphist-sdk" '("cliphist-sdk-")))




)
(let ((load-true-file-name "/home/cam/.emacs.d/elpa/cherry-blossom-theme-20150622.342/cherry-blossom-theme-autoloads.el")(load-file-name "/home/cam/.emacs.d/elpa/cherry-blossom-theme-20150622.342/cherry-blossom-theme-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/home/cam/.emacs.d/elpa/cherry-blossom-theme-20150622.342/cherry-blossom-theme-autoloads.el") (car load-path))))



(when (and (boundp 'custom-theme-load-path) load-file-name) (add-to-list 'custom-theme-load-path (file-name-as-directory (file-name-directory load-file-name))))

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "cherry-blossom-theme" '("cherry-blossom")))




)
(let ((load-true-file-name "/home/cam/.emacs.d/elpa/busybee-theme-20170719.928/busybee-theme-autoloads.el")(load-file-name "/home/cam/.emacs.d/elpa/busybee-theme-20170719.928/busybee-theme-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/home/cam/.emacs.d/elpa/busybee-theme-20170719.928/busybee-theme-autoloads.el") (car load-path))))



(when load-file-name (add-to-list 'custom-theme-load-path (file-name-as-directory (file-name-directory load-file-name))))




)
(let ((load-true-file-name "/home/cam/.emacs.d/elpa/buffer-move-20220512.755/buffer-move-autoloads.el")(load-file-name "/home/cam/.emacs.d/elpa/buffer-move-20220512.755/buffer-move-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/home/cam/.emacs.d/elpa/buffer-move-20220512.755/buffer-move-autoloads.el") (car load-path))))



(autoload 'buf-move-up "buffer-move" "\
Swap the current buffer and the buffer above the split.
   If there is no split, ie now window above the current one, an
   error is signaled." t nil)

(autoload 'buf-move-down "buffer-move" "\
Swap the current buffer and the buffer under the split.
   If there is no split, ie now window under the current one, an
   error is signaled." t nil)

(autoload 'buf-move-left "buffer-move" "\
Swap the current buffer and the buffer on the left of the split.
   If there is no split, ie now window on the left of the current
   one, an error is signaled." t nil)

(autoload 'buf-move-right "buffer-move" "\
Swap the current buffer and the buffer on the right of the split.
   If there is no split, ie now window on the right of the current
   one, an error is signaled." t nil)

(autoload 'buf-move "buffer-move" "\
Begin moving the current buffer to different windows.

Use the arrow keys to move in the desired direction.  Pressing
any other key exits this function." t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "buffer-move" '("buf")))




)
(let ((load-true-file-name "/home/cam/.emacs.d/elpa/bubbleberry-theme-20141017.944/bubbleberry-theme-autoloads.el")(load-file-name "/home/cam/.emacs.d/elpa/bubbleberry-theme-20141017.944/bubbleberry-theme-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/home/cam/.emacs.d/elpa/bubbleberry-theme-20141017.944/bubbleberry-theme-autoloads.el") (car load-path))))



(when load-file-name (add-to-list 'custom-theme-load-path (file-name-as-directory (file-name-directory load-file-name))))

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "bubbleberry-theme" '("bubbleberry")))




)
(let ((load-true-file-name "/home/cam/.emacs.d/elpa/birds-of-paradise-plus-theme-20130419.2129/birds-of-paradise-plus-theme-autoloads.el")(load-file-name "/home/cam/.emacs.d/elpa/birds-of-paradise-plus-theme-20130419.2129/birds-of-paradise-plus-theme-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/home/cam/.emacs.d/elpa/birds-of-paradise-plus-theme-20130419.2129/birds-of-paradise-plus-theme-autoloads.el") (car load-path))))



(and load-file-name (boundp 'custom-theme-load-path) (add-to-list 'custom-theme-load-path (file-name-as-directory (file-name-directory load-file-name))))

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "birds-of-paradise-plus-theme" '("birds-of-paradise-plus")))




)
(let ((load-true-file-name "/home/cam/.emacs.d/elpa/bind-key-2.4.4/bind-key-autoloads.el")(load-file-name "/home/cam/.emacs.d/elpa/bind-key-2.4.4/bind-key-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/home/cam/.emacs.d/elpa/bind-key-2.4.4/bind-key-autoloads.el") (car load-path))))



(autoload 'bind-key "bind-key" "\
Bind KEY-NAME to COMMAND in KEYMAP (`global-map' if not passed).

KEY-NAME may be a vector, in which case it is passed straight to
`define-key'. Or it may be a string to be interpreted as
spelled-out keystrokes, e.g., `C-c C-z'. See documentation of
`edmacro-mode' for details.

COMMAND must be an interactive function or lambda form.

KEYMAP, if present, should be a keymap variable or symbol.
For example:

  (bind-key \"M-h\" #\\='some-interactive-function my-mode-map)

  (bind-key \"M-h\" #\\='some-interactive-function \\='my-mode-map)

If PREDICATE is non-nil, it is a form evaluated to determine when
a key should be bound. It must return non-nil in such cases.
Emacs can evaluate this form at any time that it does redisplay
or operates on menu data structures, so you should write it so it
can safely be called at any time.

\(fn KEY-NAME COMMAND &optional KEYMAP PREDICATE)" nil t)

(autoload 'unbind-key "bind-key" "\
Unbind the given KEY-NAME, within the KEYMAP (if specified).
See `bind-key' for more details.

\(fn KEY-NAME &optional KEYMAP)" nil t)

(autoload 'bind-key* "bind-key" "\
Similar to `bind-key', but overrides any mode-specific bindings.

\(fn KEY-NAME COMMAND &optional PREDICATE)" nil t)

(autoload 'bind-keys "bind-key" "\
Bind multiple keys at once.

Accepts keyword arguments:
:map MAP               - a keymap into which the keybindings should be
                         added
:prefix KEY            - prefix key for these bindings
:prefix-map MAP        - name of the prefix map that should be created
                         for these bindings
:prefix-docstring STR  - docstring for the prefix-map variable
:menu-name NAME        - optional menu string for prefix map
:repeat-docstring STR  - docstring for the repeat-map variable
:repeat-map MAP        - name of the repeat map that should be created
                         for these bindings. If specified, the
                         `repeat-map' property of each command bound
                         (within the scope of the `:repeat-map' keyword)
                         is set to this map.
:exit BINDINGS         - Within the scope of `:repeat-map' will bind the
                         key in the repeat map, but will not set the
                         `repeat-map' property of the bound command.
:continue BINDINGS     - Within the scope of `:repeat-map' forces the
                         same behaviour as if no special keyword had
                         been used (that is, the command is bound, and
                         it's `repeat-map' property set)
:filter FORM           - optional form to determine when bindings apply

The rest of the arguments are conses of keybinding string and a
function symbol (unquoted).

\(fn &rest ARGS)" nil t)

(autoload 'bind-keys* "bind-key" "\


\(fn &rest ARGS)" nil t)

(autoload 'describe-personal-keybindings "bind-key" "\
Display all the personal keybindings defined by `bind-key'." t nil)

(register-definition-prefixes "bind-key" '("bind-key" "compare-keybindings" "get-binding-description" "override-global-m" "personal-keybindings"))




)
(let ((load-true-file-name "/home/cam/.emacs.d/elpa/benchmark-init-1.1/benchmark-init-autoloads.el")(load-file-name "/home/cam/.emacs.d/elpa/benchmark-init-1.1/benchmark-init-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/home/cam/.emacs.d/elpa/benchmark-init-1.1/benchmark-init-autoloads.el") (car load-path))))



(autoload 'benchmark-init/activate "benchmark-init" "\
Activate benchmark-init and start collecting data." t nil)

(register-definition-prefixes "benchmark-init" '("benchmark-init/"))



(autoload 'benchmark-init/show-durations-tabulated "benchmark-init-modes" "\
Show the benchmark results in a sorted table." t nil)

(autoload 'benchmark-init/show-durations-tree "benchmark-init-modes" "\
Show durations in call-tree." t nil)

(register-definition-prefixes "benchmark-init-modes" '("benchmark-init/"))




)
(let ((load-true-file-name "/home/cam/.emacs.d/elpa/base16-theme-20231216.839/base16-theme-autoloads.el")(load-file-name "/home/cam/.emacs.d/elpa/base16-theme-20231216.839/base16-theme-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/home/cam/.emacs.d/elpa/base16-theme-20231216.839/base16-theme-autoloads.el") (car load-path))))



(register-definition-prefixes "base16-3024-theme" '("base16-3024-theme-colors"))



(register-definition-prefixes "base16-apathy-theme" '("base16-apathy-theme-colors"))



(register-definition-prefixes "base16-apprentice-theme" '("base16-apprentice-theme-colors"))



(register-definition-prefixes "base16-ashes-theme" '("base16-ashes-theme-colors"))



(register-definition-prefixes "base16-atelier-cave-light-theme" '("base16-atelier-cave-light-theme-colors"))



(register-definition-prefixes "base16-atelier-cave-theme" '("base16-atelier-cave-theme-colors"))



(register-definition-prefixes "base16-atelier-dune-light-theme" '("base16-atelier-dune-light-theme-colors"))



(register-definition-prefixes "base16-atelier-dune-theme" '("base16-atelier-dune-theme-colors"))



(register-definition-prefixes "base16-atelier-estuary-light-theme" '("base16-atelier-estuary-light-theme-colors"))



(register-definition-prefixes "base16-atelier-estuary-theme" '("base16-atelier-estuary-theme-colors"))



(register-definition-prefixes "base16-atelier-forest-light-theme" '("base16-atelier-forest-light-theme-colors"))



(register-definition-prefixes "base16-atelier-forest-theme" '("base16-atelier-forest-theme-colors"))



(register-definition-prefixes "base16-atelier-heath-light-theme" '("base16-atelier-heath-light-theme-colors"))



(register-definition-prefixes "base16-atelier-heath-theme" '("base16-atelier-heath-theme-colors"))



(register-definition-prefixes "base16-atelier-lakeside-light-theme" '("base16-atelier-lakeside-light-theme-colors"))



(register-definition-prefixes "base16-atelier-lakeside-theme" '("base16-atelier-lakeside-theme-colors"))



(register-definition-prefixes "base16-atelier-plateau-light-theme" '("base16-atelier-plateau-light-theme-colors"))



(register-definition-prefixes "base16-atelier-plateau-theme" '("base16-atelier-plateau-theme-colors"))



(register-definition-prefixes "base16-atelier-savanna-light-theme" '("base16-atelier-savanna-light-theme-colors"))



(register-definition-prefixes "base16-atelier-savanna-theme" '("base16-atelier-savanna-theme-colors"))



(register-definition-prefixes "base16-atelier-seaside-light-theme" '("base16-atelier-seaside-light-theme-colors"))



(register-definition-prefixes "base16-atelier-seaside-theme" '("base16-atelier-seaside-theme-colors"))



(register-definition-prefixes "base16-atelier-sulphurpool-light-theme" '("base16-atelier-sulphurpool-light-theme-colors"))



(register-definition-prefixes "base16-atelier-sulphurpool-theme" '("base16-atelier-sulphurpool-theme-colors"))



(register-definition-prefixes "base16-atlas-theme" '("base16-atlas-theme-colors"))



(register-definition-prefixes "base16-ayu-dark-theme" '("base16-ayu-dark-theme-colors"))



(register-definition-prefixes "base16-ayu-light-theme" '("base16-ayu-light-theme-colors"))



(register-definition-prefixes "base16-ayu-mirage-theme" '("base16-ayu-mirage-theme-colors"))



(register-definition-prefixes "base16-bespin-theme" '("base16-bespin-theme-colors"))



(register-definition-prefixes "base16-black-metal-bathory-theme" '("base16-black-metal-bathory-theme-colors"))



(register-definition-prefixes "base16-black-metal-burzum-theme" '("base16-black-metal-burzum-theme-colors"))



(register-definition-prefixes "base16-black-metal-dark-funeral-theme" '("base16-black-metal-dark-funeral-theme-colors"))



(register-definition-prefixes "base16-black-metal-gorgoroth-theme" '("base16-black-metal-gorgoroth-theme-colors"))



(register-definition-prefixes "base16-black-metal-immortal-theme" '("base16-black-metal-immortal-theme-colors"))



(register-definition-prefixes "base16-black-metal-khold-theme" '("base16-black-metal-khold-theme-colors"))



(register-definition-prefixes "base16-black-metal-marduk-theme" '("base16-black-metal-marduk-theme-colors"))



(register-definition-prefixes "base16-black-metal-mayhem-theme" '("base16-black-metal-mayhem-theme-colors"))



(register-definition-prefixes "base16-black-metal-nile-theme" '("base16-black-metal-nile-theme-colors"))



(register-definition-prefixes "base16-black-metal-theme" '("base16-black-metal-theme-colors"))



(register-definition-prefixes "base16-black-metal-venom-theme" '("base16-black-metal-venom-theme-colors"))



(register-definition-prefixes "base16-blueforest-theme" '("base16-blueforest-theme-colors"))



(register-definition-prefixes "base16-blueish-theme" '("base16-blueish-theme-colors"))



(register-definition-prefixes "base16-brewer-theme" '("base16-brewer-theme-colors"))



(register-definition-prefixes "base16-bright-theme" '("base16-bright-theme-colors"))



(register-definition-prefixes "base16-brogrammer-theme" '("base16-brogrammer-theme-colors"))



(register-definition-prefixes "base16-brushtrees-dark-theme" '("base16-brushtrees-dark-theme-colors"))



(register-definition-prefixes "base16-brushtrees-theme" '("base16-brushtrees-theme-colors"))



(register-definition-prefixes "base16-caroline-theme" '("base16-caroline-theme-colors"))



(register-definition-prefixes "base16-catppuccin-frappe-theme" '("base16-catppuccin-frappe-theme-colors"))



(register-definition-prefixes "base16-catppuccin-latte-theme" '("base16-catppuccin-latte-theme-colors"))



(register-definition-prefixes "base16-catppuccin-macchiato-theme" '("base16-catppuccin-macchiato-theme-colors"))



(register-definition-prefixes "base16-catppuccin-mocha-theme" '("base16-catppuccin-mocha-theme-colors"))



(register-definition-prefixes "base16-catppuccin-theme" '("base16-catppuccin-theme-colors"))



(register-definition-prefixes "base16-chalk-theme" '("base16-chalk-theme-colors"))



(register-definition-prefixes "base16-circus-theme" '("base16-circus-theme-colors"))



(register-definition-prefixes "base16-classic-dark-theme" '("base16-classic-dark-theme-colors"))



(register-definition-prefixes "base16-classic-light-theme" '("base16-classic-light-theme-colors"))



(register-definition-prefixes "base16-codeschool-theme" '("base16-codeschool-theme-colors"))



(register-definition-prefixes "base16-colors-theme" '("base16-colors-theme-colors"))



(register-definition-prefixes "base16-cupcake-theme" '("base16-cupcake-theme-colors"))



(register-definition-prefixes "base16-cupertino-theme" '("base16-cupertino-theme-colors"))



(register-definition-prefixes "base16-da-one-black-theme" '("base16-da-one-black-theme-colors"))



(register-definition-prefixes "base16-da-one-gray-theme" '("base16-da-one-gray-theme-colors"))



(register-definition-prefixes "base16-da-one-ocean-theme" '("base16-da-one-ocean-theme-colors"))



(register-definition-prefixes "base16-da-one-paper-theme" '("base16-da-one-paper-theme-colors"))



(register-definition-prefixes "base16-da-one-sea-theme" '("base16-da-one-sea-theme-colors"))



(register-definition-prefixes "base16-da-one-white-theme" '("base16-da-one-white-theme-colors"))



(register-definition-prefixes "base16-danqing-light-theme" '("base16-danqing-light-theme-colors"))



(register-definition-prefixes "base16-danqing-theme" '("base16-danqing-theme-colors"))



(register-definition-prefixes "base16-darcula-theme" '("base16-darcula-theme-colors"))



(register-definition-prefixes "base16-darkmoss-theme" '("base16-darkmoss-theme-colors"))



(register-definition-prefixes "base16-darktooth-theme" '("base16-darktooth-theme-colors"))



(register-definition-prefixes "base16-darkviolet-theme" '("base16-darkviolet-theme-colors"))



(register-definition-prefixes "base16-decaf-theme" '("base16-decaf-theme-colors"))



(register-definition-prefixes "base16-default-dark-theme" '("base16-default-dark-theme-colors"))



(register-definition-prefixes "base16-default-light-theme" '("base16-default-light-theme-colors"))



(register-definition-prefixes "base16-dirtysea-theme" '("base16-dirtysea-theme-colors"))



(register-definition-prefixes "base16-dracula-theme" '("base16-dracula-theme-colors"))



(register-definition-prefixes "base16-edge-dark-theme" '("base16-edge-dark-theme-colors"))



(register-definition-prefixes "base16-edge-light-theme" '("base16-edge-light-theme-colors"))



(register-definition-prefixes "base16-eighties-theme" '("base16-eighties-theme-colors"))



(register-definition-prefixes "base16-embers-theme" '("base16-embers-theme-colors"))



(register-definition-prefixes "base16-emil-theme" '("base16-emil-theme-colors"))



(register-definition-prefixes "base16-equilibrium-dark-theme" '("base16-equilibrium-dark-theme-colors"))



(register-definition-prefixes "base16-equilibrium-gray-dark-theme" '("base16-equilibrium-gray-dark-theme-colors"))



(register-definition-prefixes "base16-equilibrium-gray-light-theme" '("base16-equilibrium-gray-light-theme-colors"))



(register-definition-prefixes "base16-equilibrium-light-theme" '("base16-equilibrium-light-theme-colors"))



(register-definition-prefixes "base16-eris-theme" '("base16-eris-theme-colors"))



(register-definition-prefixes "base16-espresso-theme" '("base16-espresso-theme-colors"))



(register-definition-prefixes "base16-eva-dim-theme" '("base16-eva-dim-theme-colors"))



(register-definition-prefixes "base16-eva-theme" '("base16-eva-theme-colors"))



(register-definition-prefixes "base16-evenok-dark-theme" '("base16-evenok-dark-theme-colors"))



(register-definition-prefixes "base16-everforest-dark-hard-theme" '("base16-everforest-dark-hard-theme-colors"))



(register-definition-prefixes "base16-everforest-theme" '("base16-everforest-theme-colors"))



(register-definition-prefixes "base16-flat-theme" '("base16-flat-theme-colors"))



(register-definition-prefixes "base16-framer-theme" '("base16-framer-theme-colors"))



(register-definition-prefixes "base16-fruit-soda-theme" '("base16-fruit-soda-theme-colors"))



(register-definition-prefixes "base16-gigavolt-theme" '("base16-gigavolt-theme-colors"))



(register-definition-prefixes "base16-github-theme" '("base16-github-theme-colors"))



(register-definition-prefixes "base16-google-dark-theme" '("base16-google-dark-theme-colors"))



(register-definition-prefixes "base16-google-light-theme" '("base16-google-light-theme-colors"))



(register-definition-prefixes "base16-gotham-theme" '("base16-gotham-theme-colors"))



(register-definition-prefixes "base16-grayscale-dark-theme" '("base16-grayscale-dark-theme-colors"))



(register-definition-prefixes "base16-grayscale-light-theme" '("base16-grayscale-light-theme-colors"))



(register-definition-prefixes "base16-greenscreen-theme" '("base16-greenscreen-theme-colors"))



(register-definition-prefixes "base16-gruber-theme" '("base16-gruber-theme-colors"))



(register-definition-prefixes "base16-gruvbox-dark-hard-theme" '("base16-gruvbox-dark-hard-theme-colors"))



(register-definition-prefixes "base16-gruvbox-dark-medium-theme" '("base16-gruvbox-dark-medium-theme-colors"))



(register-definition-prefixes "base16-gruvbox-dark-pale-theme" '("base16-gruvbox-dark-pale-theme-colors"))



(register-definition-prefixes "base16-gruvbox-dark-soft-theme" '("base16-gruvbox-dark-soft-theme-colors"))



(register-definition-prefixes "base16-gruvbox-light-hard-theme" '("base16-gruvbox-light-hard-theme-colors"))



(register-definition-prefixes "base16-gruvbox-light-medium-theme" '("base16-gruvbox-light-medium-theme-colors"))



(register-definition-prefixes "base16-gruvbox-light-soft-theme" '("base16-gruvbox-light-soft-theme-colors"))



(register-definition-prefixes "base16-gruvbox-material-dark-hard-theme" '("base16-gruvbox-material-dark-hard-theme-colors"))



(register-definition-prefixes "base16-gruvbox-material-dark-medium-theme" '("base16-gruvbox-material-dark-medium-theme-colors"))



(register-definition-prefixes "base16-gruvbox-material-dark-soft-theme" '("base16-gruvbox-material-dark-soft-theme-colors"))



(register-definition-prefixes "base16-gruvbox-material-light-hard-theme" '("base16-gruvbox-material-light-hard-theme-colors"))



(register-definition-prefixes "base16-gruvbox-material-light-medium-theme" '("base16-gruvbox-material-light-medium-theme-colors"))



(register-definition-prefixes "base16-gruvbox-material-light-soft-theme" '("base16-gruvbox-material-light-soft-theme-colors"))



(register-definition-prefixes "base16-hardcore-theme" '("base16-hardcore-theme-colors"))



(register-definition-prefixes "base16-harmonic16-dark-theme" '("base16-harmonic16-dark-theme-colors"))



(register-definition-prefixes "base16-harmonic16-light-theme" '("base16-harmonic16-light-theme-colors"))



(register-definition-prefixes "base16-heetch-light-theme" '("base16-heetch-light-theme-colors"))



(register-definition-prefixes "base16-heetch-theme" '("base16-heetch-theme-colors"))



(register-definition-prefixes "base16-helios-theme" '("base16-helios-theme-colors"))



(register-definition-prefixes "base16-hopscotch-theme" '("base16-hopscotch-theme-colors"))



(register-definition-prefixes "base16-horizon-dark-theme" '("base16-horizon-dark-theme-colors"))



(register-definition-prefixes "base16-horizon-light-theme" '("base16-horizon-light-theme-colors"))



(register-definition-prefixes "base16-horizon-terminal-dark-theme" '("base16-horizon-terminal-dark-theme-colors"))



(register-definition-prefixes "base16-horizon-terminal-light-theme" '("base16-horizon-terminal-light-theme-colors"))



(register-definition-prefixes "base16-humanoid-dark-theme" '("base16-humanoid-dark-theme-colors"))



(register-definition-prefixes "base16-humanoid-light-theme" '("base16-humanoid-light-theme-colors"))



(register-definition-prefixes "base16-ia-dark-theme" '("base16-ia-dark-theme-colors"))



(register-definition-prefixes "base16-ia-light-theme" '("base16-ia-light-theme-colors"))



(register-definition-prefixes "base16-icy-theme" '("base16-icy-theme-colors"))



(register-definition-prefixes "base16-irblack-theme" '("base16-irblack-theme-colors"))



(register-definition-prefixes "base16-isotope-theme" '("base16-isotope-theme-colors"))



(register-definition-prefixes "base16-jabuti-theme" '("base16-jabuti-theme-colors"))



(register-definition-prefixes "base16-kanagawa-theme" '("base16-kanagawa-theme-colors"))



(register-definition-prefixes "base16-katy-theme" '("base16-katy-theme-colors"))



(register-definition-prefixes "base16-kimber-theme" '("base16-kimber-theme-colors"))



(register-definition-prefixes "base16-lime-theme" '("base16-lime-theme-colors"))



(register-definition-prefixes "base16-macintosh-theme" '("base16-macintosh-theme-colors"))



(register-definition-prefixes "base16-marrakesh-theme" '("base16-marrakesh-theme-colors"))



(register-definition-prefixes "base16-materia-theme" '("base16-materia-theme-colors"))



(register-definition-prefixes "base16-material-darker-theme" '("base16-material-darker-theme-colors"))



(register-definition-prefixes "base16-material-lighter-theme" '("base16-material-lighter-theme-colors"))



(register-definition-prefixes "base16-material-palenight-theme" '("base16-material-palenight-theme-colors"))



(register-definition-prefixes "base16-material-theme" '("base16-material-theme-colors"))



(register-definition-prefixes "base16-material-vivid-theme" '("base16-material-vivid-theme-colors"))



(register-definition-prefixes "base16-mellow-purple-theme" '("base16-mellow-purple-theme-colors"))



(register-definition-prefixes "base16-mexico-light-theme" '("base16-mexico-light-theme-colors"))



(register-definition-prefixes "base16-mocha-theme" '("base16-mocha-theme-colors"))



(register-definition-prefixes "base16-monokai-theme" '("base16-monokai-theme-colors"))



(register-definition-prefixes "base16-mountain-theme" '("base16-mountain-theme-colors"))



(register-definition-prefixes "base16-nebula-theme" '("base16-nebula-theme-colors"))



(register-definition-prefixes "base16-nord-light-theme" '("base16-nord-light-theme-colors"))



(register-definition-prefixes "base16-nord-theme" '("base16-nord-theme-colors"))



(register-definition-prefixes "base16-nova-theme" '("base16-nova-theme-colors"))



(register-definition-prefixes "base16-ocean-theme" '("base16-ocean-theme-colors"))



(register-definition-prefixes "base16-oceanicnext-theme" '("base16-oceanicnext-theme-colors"))



(register-definition-prefixes "base16-one-light-theme" '("base16-one-light-theme-colors"))



(register-definition-prefixes "base16-onedark-theme" '("base16-onedark-theme-colors"))



(register-definition-prefixes "base16-outrun-dark-theme" '("base16-outrun-dark-theme-colors"))



(register-definition-prefixes "base16-oxocarbon-dark-theme" '("base16-oxocarbon-dark-theme-colors"))



(register-definition-prefixes "base16-oxocarbon-light-theme" '("base16-oxocarbon-light-theme-colors"))



(register-definition-prefixes "base16-pandora-theme" '("base16-pandora-theme-colors"))



(register-definition-prefixes "base16-papercolor-dark-theme" '("base16-papercolor-dark-theme-colors"))



(register-definition-prefixes "base16-papercolor-light-theme" '("base16-papercolor-light-theme-colors"))



(register-definition-prefixes "base16-paraiso-theme" '("base16-paraiso-theme-colors"))



(register-definition-prefixes "base16-pasque-theme" '("base16-pasque-theme-colors"))



(register-definition-prefixes "base16-phd-theme" '("base16-phd-theme-colors"))



(register-definition-prefixes "base16-pico-theme" '("base16-pico-theme-colors"))



(register-definition-prefixes "base16-pinky-theme" '("base16-pinky-theme-colors"))



(register-definition-prefixes "base16-pop-theme" '("base16-pop-theme-colors"))



(register-definition-prefixes "base16-porple-theme" '("base16-porple-theme-colors"))



(register-definition-prefixes "base16-primer-dark-dimmed-theme" '("base16-primer-dark-dimmed-theme-colors"))



(register-definition-prefixes "base16-primer-dark-theme" '("base16-primer-dark-theme-colors"))



(register-definition-prefixes "base16-primer-light-theme" '("base16-primer-light-theme-colors"))



(register-definition-prefixes "base16-purpledream-theme" '("base16-purpledream-theme-colors"))



(register-definition-prefixes "base16-qualia-theme" '("base16-qualia-theme-colors"))



(register-definition-prefixes "base16-railscasts-theme" '("base16-railscasts-theme-colors"))



(register-definition-prefixes "base16-rebecca-theme" '("base16-rebecca-theme-colors"))



(register-definition-prefixes "base16-rose-pine-dawn-theme" '("base16-rose-pine-dawn-theme-colors"))



(register-definition-prefixes "base16-rose-pine-moon-theme" '("base16-rose-pine-moon-theme-colors"))



(register-definition-prefixes "base16-rose-pine-theme" '("base16-rose-pine-theme-colors"))



(register-definition-prefixes "base16-sagelight-theme" '("base16-sagelight-theme-colors"))



(register-definition-prefixes "base16-sakura-theme" '("base16-sakura-theme-colors"))



(register-definition-prefixes "base16-sandcastle-theme" '("base16-sandcastle-theme-colors"))



(register-definition-prefixes "base16-selenized-black-theme" '("base16-selenized-black-theme-colors"))



(register-definition-prefixes "base16-selenized-dark-theme" '("base16-selenized-dark-theme-colors"))



(register-definition-prefixes "base16-selenized-light-theme" '("base16-selenized-light-theme-colors"))



(register-definition-prefixes "base16-selenized-white-theme" '("base16-selenized-white-theme-colors"))



(register-definition-prefixes "base16-seti-theme" '("base16-seti-theme-colors"))



(register-definition-prefixes "base16-shades-of-purple-theme" '("base16-shades-of-purple-theme-colors"))



(register-definition-prefixes "base16-shadesmear-dark-theme" '("base16-shadesmear-dark-theme-colors"))



(register-definition-prefixes "base16-shadesmear-light-theme" '("base16-shadesmear-light-theme-colors"))



(register-definition-prefixes "base16-shapeshifter-theme" '("base16-shapeshifter-theme-colors"))



(register-definition-prefixes "base16-silk-dark-theme" '("base16-silk-dark-theme-colors"))



(register-definition-prefixes "base16-silk-light-theme" '("base16-silk-light-theme-colors"))



(register-definition-prefixes "base16-snazzy-theme" '("base16-snazzy-theme-colors"))



(register-definition-prefixes "base16-solarflare-light-theme" '("base16-solarflare-light-theme-colors"))



(register-definition-prefixes "base16-solarflare-theme" '("base16-solarflare-theme-colors"))



(register-definition-prefixes "base16-solarized-dark-theme" '("base16-solarized-dark-theme-colors"))



(register-definition-prefixes "base16-solarized-light-theme" '("base16-solarized-light-theme-colors"))



(register-definition-prefixes "base16-spaceduck-theme" '("base16-spaceduck-theme-colors"))



(register-definition-prefixes "base16-spacemacs-theme" '("base16-spacemacs-theme-colors"))



(register-definition-prefixes "base16-standardized-dark-theme" '("base16-standardized-dark-theme-colors"))



(register-definition-prefixes "base16-standardized-light-theme" '("base16-standardized-light-theme-colors"))



(register-definition-prefixes "base16-stella-theme" '("base16-stella-theme-colors"))



(register-definition-prefixes "base16-still-alive-theme" '("base16-still-alive-theme-colors"))



(register-definition-prefixes "base16-summercamp-theme" '("base16-summercamp-theme-colors"))



(register-definition-prefixes "base16-summerfruit-dark-theme" '("base16-summerfruit-dark-theme-colors"))



(register-definition-prefixes "base16-summerfruit-light-theme" '("base16-summerfruit-light-theme-colors"))



(register-definition-prefixes "base16-synth-midnight-dark-theme" '("base16-synth-midnight-dark-theme-colors"))



(register-definition-prefixes "base16-synth-midnight-light-theme" '("base16-synth-midnight-light-theme-colors"))



(register-definition-prefixes "base16-tango-theme" '("base16-tango-theme-colors"))



(register-definition-prefixes "base16-tarot-theme" '("base16-tarot-theme-colors"))



(register-definition-prefixes "base16-tender-theme" '("base16-tender-theme-colors"))



(and load-file-name (boundp 'custom-theme-load-path) (add-to-list 'custom-theme-load-path (file-name-as-directory (file-name-directory load-file-name))))

(register-definition-prefixes "base16-theme" '("base16-theme-"))



(register-definition-prefixes "base16-tokyo-city-dark-theme" '("base16-tokyo-city-dark-theme-colors"))



(register-definition-prefixes "base16-tokyo-city-light-theme" '("base16-tokyo-city-light-theme-colors"))



(register-definition-prefixes "base16-tokyo-city-terminal-dark-theme" '("base16-tokyo-city-terminal-dark-theme-colors"))



(register-definition-prefixes "base16-tokyo-city-terminal-light-theme" '("base16-tokyo-city-terminal-light-theme-colors"))



(register-definition-prefixes "base16-tokyo-night-dark-theme" '("base16-tokyo-night-dark-theme-colors"))



(register-definition-prefixes "base16-tokyo-night-light-theme" '("base16-tokyo-night-light-theme-colors"))



(register-definition-prefixes "base16-tokyo-night-storm-theme" '("base16-tokyo-night-storm-theme-colors"))



(register-definition-prefixes "base16-tokyo-night-terminal-dark-theme" '("base16-tokyo-night-terminal-dark-theme-colors"))



(register-definition-prefixes "base16-tokyo-night-terminal-light-theme" '("base16-tokyo-night-terminal-light-theme-colors"))



(register-definition-prefixes "base16-tokyo-night-terminal-storm-theme" '("base16-tokyo-night-terminal-storm-theme-colors"))



(register-definition-prefixes "base16-tokyodark-terminal-theme" '("base16-tokyodark-terminal-theme-colors"))



(register-definition-prefixes "base16-tokyodark-theme" '("base16-tokyodark-theme-colors"))



(register-definition-prefixes "base16-tomorrow-night-eighties-theme" '("base16-tomorrow-night-eighties-theme-colors"))



(register-definition-prefixes "base16-tomorrow-night-theme" '("base16-tomorrow-night-theme-colors"))



(register-definition-prefixes "base16-tomorrow-theme" '("base16-tomorrow-theme-colors"))



(register-definition-prefixes "base16-tube-theme" '("base16-tube-theme-colors"))



(register-definition-prefixes "base16-twilight-theme" '("base16-twilight-theme-colors"))



(register-definition-prefixes "base16-unikitty-dark-theme" '("base16-unikitty-dark-theme-colors"))



(register-definition-prefixes "base16-unikitty-light-theme" '("base16-unikitty-light-theme-colors"))



(register-definition-prefixes "base16-unikitty-reversible-theme" '("base16-unikitty-reversible-theme-colors"))



(register-definition-prefixes "base16-uwunicorn-theme" '("base16-uwunicorn-theme-colors"))



(register-definition-prefixes "base16-vice-theme" '("base16-vice-theme-colors"))



(register-definition-prefixes "base16-vulcan-theme" '("base16-vulcan-theme-colors"))



(register-definition-prefixes "base16-windows-10-light-theme" '("base16-windows-10-light-theme-colors"))



(register-definition-prefixes "base16-windows-10-theme" '("base16-windows-10-theme-colors"))



(register-definition-prefixes "base16-windows-95-light-theme" '("base16-windows-95-light-theme-colors"))



(register-definition-prefixes "base16-windows-95-theme" '("base16-windows-95-theme-colors"))



(register-definition-prefixes "base16-windows-highcontrast-light-theme" '("base16-windows-highcontrast-light-theme-colors"))



(register-definition-prefixes "base16-windows-highcontrast-theme" '("base16-windows-highcontrast-theme-colors"))



(register-definition-prefixes "base16-windows-nt-light-theme" '("base16-windows-nt-light-theme-colors"))



(register-definition-prefixes "base16-windows-nt-theme" '("base16-windows-nt-theme-colors"))



(register-definition-prefixes "base16-woodland-theme" '("base16-woodland-theme-colors"))



(register-definition-prefixes "base16-xcode-dusk-theme" '("base16-xcode-dusk-theme-colors"))



(register-definition-prefixes "base16-zenbones-theme" '("base16-zenbones-theme-colors"))



(register-definition-prefixes "base16-zenburn-theme" '("base16-zenburn-theme-colors"))




)
(let ((load-true-file-name "/home/cam/.emacs.d/elpa/badwolf-theme-20161004.715/badwolf-theme-autoloads.el")(load-file-name "/home/cam/.emacs.d/elpa/badwolf-theme-20161004.715/badwolf-theme-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/home/cam/.emacs.d/elpa/badwolf-theme-20161004.715/badwolf-theme-autoloads.el") (car load-path))))



(when load-file-name (add-to-list 'custom-theme-load-path (file-name-as-directory (file-name-directory load-file-name))))

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "badwolf-theme" '("badwolf")))




)
(let ((load-true-file-name "/home/cam/.emacs.d/elpa/auto-yasnippet-20230208.331/auto-yasnippet-autoloads.el")(load-file-name "/home/cam/.emacs.d/elpa/auto-yasnippet-20230208.331/auto-yasnippet-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/home/cam/.emacs.d/elpa/auto-yasnippet-20230208.331/auto-yasnippet-autoloads.el") (car load-path))))



(autoload 'aya-create "auto-yasnippet" "\
Create a snippet from the text between BEG and END.
When the bounds are not given, use either the current region or line.

Remove `aya-marker' prefixes, write the corresponding snippet to
`aya-current', with words prefixed by `aya-marker' as fields, and
mirrors properly set up.

\(fn &optional BEG END)" t nil)

(autoload 'aya-create-one-line "auto-yasnippet" "\
A simplistic `aya-create' to create only one mirror.
You can still have as many instances of this mirror as you want.
It's less flexible than `aya-create', but faster.
It uses a different marker, which is `aya-marker-one-line'.
You can use it to quickly generate one-liners such as
menu.add_item(spamspamspam, \"spamspamspam\")" t nil)

(autoload 'aya-expand "auto-yasnippet" "\
Insert the last yasnippet created by `aya-create'.

Optionally use PREFIX to set any field as `$0' for wrapping the
current region. (`$0' also sets the exit point after `aya-expand'
when there's no active region.) When PREFIX is it defaults to 1.

For example let's say the second field in a snippet is where you
want to wrap the currently selected region.

Use `M-2' \\[aya-expand].

If we use this text as a snippet:

```~lang
~code
````'

and assume the selected region as:

`let somePrettyComplexCode = \"Hello World!\"'

we'd do `M-2' \\[aya-expand] which allows us to
fill in `~lang' as `javascript' and wraps our
code into the code-fences like this.

```javascript
let somePrettyComplexCode = \"Hello World!\"
```

Hint: if you view the current snippet(s) in history with
`aya-expand-from-history'. The snippets are shown with their
fields numbered.

In our example the snippet looks like like this:

\\`\\`\\`$1⤶$2⤶\\`\\`\\`⤶

\(fn &optional PREFIX)" t nil)

(autoload 'aya-expand-from-history "auto-yasnippet" "\
Select and insert a yasnippet from the `aya-history'.
The selected snippet will become `aya-current'
and will be used for consecutive `aya-expand' commands.

When PREFIX is given, the corresponding field number is
modified to make it the current point after expansion.

\(fn &optional PREFIX)" t nil)

(autoload 'aya-delete-from-history "auto-yasnippet" "\
Select and delete one or more snippets from `aya-history'.
If the selected snippet is also `aya-current', it will be replaced
by the next snippet in history, or blank if no other history items
are available." t nil)

(autoload 'aya-open-line "auto-yasnippet" "\
Call `open-line', unless there are abbrevs or snippets at point.
In that case expand them.  If there's a snippet expansion in progress,
move to the next field.  Call `open-line' if nothing else applies." t nil)

(autoload 'aya-yank-snippet "auto-yasnippet" "\
Insert current snippet at point.
To save a snippet permanently, create an empty file and call this." t nil)

(autoload 'aya-yank-snippet-from-history "auto-yasnippet" "\
Insert snippet from history at point." t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "auto-yasnippet" '("aya-")))




)
(let ((load-true-file-name "/home/cam/.emacs.d/elpa/auto-package-update-20211108.2025/auto-package-update-autoloads.el")(load-file-name "/home/cam/.emacs.d/elpa/auto-package-update-20211108.2025/auto-package-update-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/home/cam/.emacs.d/elpa/auto-package-update-20211108.2025/auto-package-update-autoloads.el") (car load-path))))



(autoload 'auto-package-update-now "auto-package-update" "\
Update installed Emacs packages.

\(fn &optional ASYNC)" t nil)

(autoload 'auto-package-update-now-async "auto-package-update" "\
Update installed Emacs packages with an async manner.
If FORCE is non-nil, kill the update thread anyway.

\(fn &optional FORCE)" t nil)

(autoload 'auto-package-update-at-time "auto-package-update" "\
Try to update every day at the specified TIME.

\(fn TIME)" nil nil)

(autoload 'auto-package-update-maybe "auto-package-update" "\
Update installed Emacs packages if at least
`auto-package-update-interval' days have passed since the last
update." nil nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "auto-package-update" '("apu--" "auto-package-")))




)
(let ((load-true-file-name "/home/cam/.emacs.d/elpa/atom-one-dark-theme-20210128.1640/atom-one-dark-theme-autoloads.el")(load-file-name "/home/cam/.emacs.d/elpa/atom-one-dark-theme-20210128.1640/atom-one-dark-theme-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/home/cam/.emacs.d/elpa/atom-one-dark-theme-20210128.1640/atom-one-dark-theme-autoloads.el") (car load-path))))



(and load-file-name (boundp 'custom-theme-load-path) (add-to-list 'custom-theme-load-path (file-name-as-directory (file-name-directory load-file-name))))

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "atom-one-dark-theme" '("atom-one-dark")))




)
(let ((load-true-file-name "/home/cam/.emacs.d/elpa/atom-dark-theme-20220114.1902/atom-dark-theme-autoloads.el")(load-file-name "/home/cam/.emacs.d/elpa/atom-dark-theme-20220114.1902/atom-dark-theme-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/home/cam/.emacs.d/elpa/atom-dark-theme-20220114.1902/atom-dark-theme-autoloads.el") (car load-path))))



(and load-file-name (boundp 'custom-theme-load-path) (add-to-list 'custom-theme-load-path (file-name-as-directory (file-name-directory load-file-name))))

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "atom-dark-theme" '("atom-dark")))




)
(let ((load-true-file-name "/home/cam/.emacs.d/elpa/apropospriate-theme-20230925.114/apropospriate-theme-autoloads.el")(load-file-name "/home/cam/.emacs.d/elpa/apropospriate-theme-20230925.114/apropospriate-theme-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/home/cam/.emacs.d/elpa/apropospriate-theme-20230925.114/apropospriate-theme-autoloads.el") (car load-path))))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "apropospriate-dark-theme" '("apropospriate-dark")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "apropospriate-light-theme" '("apropospriate-light")))



(and load-file-name (boundp 'custom-theme-load-path) (add-to-list 'custom-theme-load-path (file-name-as-directory (file-name-directory load-file-name))))

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "apropospriate-theme" '("apropospriate-" "create-apropospriate-theme")))




)
(let ((load-true-file-name "/home/cam/.emacs.d/elpa/anti-zenburn-theme-20180712.1838/anti-zenburn-theme-autoloads.el")(load-file-name "/home/cam/.emacs.d/elpa/anti-zenburn-theme-20180712.1838/anti-zenburn-theme-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/home/cam/.emacs.d/elpa/anti-zenburn-theme-20180712.1838/anti-zenburn-theme-autoloads.el") (car load-path))))



(and load-file-name (boundp 'custom-theme-load-path) (add-to-list 'custom-theme-load-path (file-name-as-directory (file-name-directory load-file-name))))

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "anti-zenburn-theme" '("anti-zenburn")))




)
(let ((load-true-file-name "/home/cam/.emacs.d/elpa/amx-3.4/amx-autoloads.el")(load-file-name "/home/cam/.emacs.d/elpa/amx-3.4/amx-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/home/cam/.emacs.d/elpa/amx-3.4/amx-autoloads.el") (car load-path))))



(defvar amx-mode nil "\
Non-nil if Amx mode is enabled.
See the `amx-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `amx-mode'.")

(custom-autoload 'amx-mode "amx" nil)

(autoload 'amx-mode "amx" "\
Use ido completion for M-x

If called interactively, enable Amx mode if ARG is positive, and
disable it if ARG is zero or negative.  If called from Lisp, also
enable the mode if ARG is omitted or nil, and toggle it if ARG is
`toggle'; disable the mode otherwise.

\(fn &optional ARG)" t nil)

(autoload 'amx "amx" "\
Read a command name and execute the command.

This is the main entry point for the Amx package, an alternative
to the normal \\[execute-extended-command] built into Emacs that
provides several extra features." t nil)

(autoload 'amx-major-mode-commands "amx" "\
Like `amx', but limited to commands that are relevant to the active major mode." t nil)

(autoload 'amx-initialize "amx" "\
Ensure that amx is properly initialized.

This function is normally idempotent, only having an effect the
first time it is called, so it is safe to call it at the
beginning of any function that expects amx to be initialized.
However, optional arg REINIT forces the initialization needs to
be re-run. Interactively, reinitialize when a prefix arg is
provided.

\(fn &optional REINIT)" t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "amx" '("amx-")))




)
(let ((load-true-file-name "/home/cam/.emacs.d/elpa/ample-zen-theme-20150119.2154/ample-zen-theme-autoloads.el")(load-file-name "/home/cam/.emacs.d/elpa/ample-zen-theme-20150119.2154/ample-zen-theme-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/home/cam/.emacs.d/elpa/ample-zen-theme-20150119.2154/ample-zen-theme-autoloads.el") (car load-path))))



(and load-file-name (boundp 'custom-theme-load-path) (add-to-list 'custom-theme-load-path (file-name-as-directory (file-name-directory load-file-name))))

(add-to-list 'safe-local-eval-forms '(when (require 'rainbow-mode nil t) (rainbow-mode 1)))

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "ample-zen-theme" '("ample-zen")))




)
(let ((load-true-file-name "/home/cam/.emacs.d/elpa/ample-theme-20180207.1745/ample-theme-autoloads.el")(load-file-name "/home/cam/.emacs.d/elpa/ample-theme-20180207.1745/ample-theme-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/home/cam/.emacs.d/elpa/ample-theme-20180207.1745/ample-theme-autoloads.el") (car load-path))))



(when load-file-name (add-to-list 'custom-theme-load-path (file-name-as-directory (file-name-directory load-file-name))))

(autoload 'ample-flat-theme "ample-flat-theme" "\
Apply the ample-flat-theme." t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "ample-flat-theme" '("ample-flat")))



(when load-file-name (add-to-list 'custom-theme-load-path (file-name-as-directory (file-name-directory load-file-name))))

(autoload 'ample-light-theme "ample-light-theme" "\
Apply the ample-light-theme." t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "ample-light-theme" '("ample-light")))



(when load-file-name (add-to-list 'custom-theme-load-path (file-name-as-directory (file-name-directory load-file-name))))

(autoload 'ample-theme "ample-theme" "\
Apply the ample-theme." t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "ample-theme" '("ample")))




)
(let ((load-true-file-name "/home/cam/.emacs.d/elpa/alect-themes-20211022.1651/alect-themes-autoloads.el")(load-file-name "/home/cam/.emacs.d/elpa/alect-themes-20211022.1651/alect-themes-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/home/cam/.emacs.d/elpa/alect-themes-20211022.1651/alect-themes-autoloads.el") (car load-path))))



(autoload 'alect-generate-colors "alect-themes" "\
Return alist of themes suitable for the variable `alect-colors'.

THEME-NAMES is a list of symbols.

COLORS is a list of lists (COLOR-NAME COLOR-VAL...) where
COLOR-VAL is a color for specified theme (theme names and color
values should be in matching order).

\(fn THEME-NAMES COLORS)" nil nil)

(and load-file-name (boundp 'custom-theme-load-path) (add-to-list 'custom-theme-load-path (file-name-as-directory (file-name-directory load-file-name))))

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "alect-themes" '("alect-")))




)
(let ((load-true-file-name "/home/cam/.emacs.d/elpa/afternoon-theme-20140104.1859/afternoon-theme-autoloads.el")(load-file-name "/home/cam/.emacs.d/elpa/afternoon-theme-20140104.1859/afternoon-theme-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/home/cam/.emacs.d/elpa/afternoon-theme-20140104.1859/afternoon-theme-autoloads.el") (car load-path))))



(when (and (boundp 'custom-theme-load-path) load-file-name) (add-to-list 'custom-theme-load-path (file-name-as-directory (file-name-directory load-file-name))))

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "afternoon-theme" '("afternoon")))




)
(let ((load-true-file-name "/home/cam/.emacs.d/elpa/adoc-mode-0.7.0/adoc-mode-autoloads.el")(load-file-name "/home/cam/.emacs.d/elpa/adoc-mode-0.7.0/adoc-mode-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/home/cam/.emacs.d/elpa/adoc-mode-0.7.0/adoc-mode-autoloads.el") (car load-path))))



(autoload 'adoc-mode "adoc-mode" "\
Major mode for editing AsciiDoc text files.
Turning on Adoc mode runs the normal hook `adoc-mode-hook'.

\(fn)" t nil)

(add-to-list 'auto-mode-alist '("\\.a\\(?:scii\\)?doc\\'" . adoc-mode))

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "adoc-mode" '("adoc-")))




)
(let ((load-true-file-name "/home/cam/.emacs.d/elpa/ace-pinyin-20210827.355/ace-pinyin-autoloads.el")(load-file-name "/home/cam/.emacs.d/elpa/ace-pinyin-20210827.355/ace-pinyin-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/home/cam/.emacs.d/elpa/ace-pinyin-20210827.355/ace-pinyin-autoloads.el") (car load-path))))



(autoload 'ace-pinyin-jump-word "ace-pinyin" "\
Jump to Chinese word.
If ARG is non-nil, read input from Minibuffer.

\(fn ARG)" t nil)

(autoload 'ace-pinyin-dwim "ace-pinyin" "\
With PREFIX, only search Chinese.
Without PREFIX, search both Chinese and English.

\(fn &optional PREFIX)" t nil)

(autoload 'ace-pinyin-mode "ace-pinyin" "\
Toggle `ace-pinyin-mode'.

If called interactively, enable Ace-Pinyin mode if ARG is
positive, and disable it if ARG is zero or negative.  If called
from Lisp, also enable the mode if ARG is omitted or nil, and
toggle it if ARG is `toggle'; disable the mode otherwise.

\(fn &optional ARG)" t nil)

(put 'ace-pinyin-global-mode 'globalized-minor-mode t)

(defvar ace-pinyin-global-mode nil "\
Non-nil if Ace-Pinyin-Global mode is enabled.
See the `ace-pinyin-global-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `ace-pinyin-global-mode'.")

(custom-autoload 'ace-pinyin-global-mode "ace-pinyin" nil)

(autoload 'ace-pinyin-global-mode "ace-pinyin" "\
Toggle Ace-Pinyin mode in all buffers.
With prefix ARG, enable Ace-Pinyin-Global mode if ARG is positive;
otherwise, disable it.  If called from Lisp, enable the mode if
ARG is omitted or nil.

Ace-Pinyin mode is enabled in all buffers where
`turn-on-ace-pinyin-mode' would do it.
See `ace-pinyin-mode' for more information on Ace-Pinyin mode.

\(fn &optional ARG)" t nil)

(autoload 'turn-on-ace-pinyin-mode "ace-pinyin" "\
Turn on `ace-pinyin-mode'." t nil)

(autoload 'turn-off-ace-pinyin-mode "ace-pinyin" "\
Turn off `ace-pinyin-mode'." t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "ace-pinyin" '("ace-pinyin-")))




)
(defvar package-activated-list)
(setq package-activated-list
      (delete-dups
       (append
	'(all-the-icons zerodark-theme zenburn-theme zen-and-art-theme yasnippet yasnippet-snippets yaml-mode xr ws-butler visual-fill-column writeroom-mode compat with-editor dash winum white-sand-theme which-key wgrep websocket web-mode wc-mode vterm vscode-dark-plus-theme visual-regexp vimrc-mode unfill queue undo-tree undo-fu underwater-theme ujelly-theme typescript-mode twilight-theme twilight-bright-theme twilight-anti-bright-theme s avy ace-window pfuture lv hydra ht posframe cfrs treemacs transient toxi-theme toc-org textile-mode tao-theme tangotango-theme tango-plus-theme tango-2-theme tagedit tablist ivy swiper sunny-day-theme sublime-themes subatomic256-theme subatomic-theme srcery-theme spinner spacemacs-theme spacegray-theme autothemer soothe-theme solarized-theme soft-stone-theme soft-morning-theme soft-charcoal-theme smyx-theme simple-httpd shackle seti-theme session scratch deferred sage-shell-mode rvm rust-mode js2-mode rjsx-mode reverse-theme restart-emacs request regex-tool rebecca-theme rainbow-delimiters railscasts-theme qrencode pyvenv async pyim pyim-wbdict pyim-basedict purple-haze-theme pulseaudio-control projectile professional-theme popup pomodoro planet-theme epl pkg-info pinyinlib phoenix-dark-pink-theme phoenix-dark-mono-theme pdf-tools paredit organic-green-theme htmlize org-re-reveal omtose-phellack-theme oldlace-theme occidental-theme obsidian-theme ob-sagemath f dash-functional nvm kv esxml nov nord-theme noctilux-theme neotree native-complete naquadah-theme mustang-theme monokai-theme monochrome-theme molokai-theme moe-theme modus-themes minimal-theme material-theme markdown-mode marginalia majapahit-themes magit-section git-commit magit madhat2r-theme lush-theme lua-mode lsp-mode lsp-ui lsp-treemacs light-soap-theme leuven-theme legalese keyfreq kaolin-themes findr inflections jump js-doc jbeans-theme jazz-theme jade-mode ivy-posframe ivy-hydra ir-black-theme inkpot-theme iedit highlight-symbol highlight-indentation heroku-theme hemisu-theme elisp-refs helpful hc-zenburn-theme haml-mode gruvbox-theme gruber-darker-theme groovy-mode graphql-mode grandshell-theme goto-chg gotham-theme gnu-elpa-keyring-update git-timemachine git-modes git-link ggtags gandalf-theme fringe-helper flycheck flatui-theme flatland-theme find-file-in-project find-by-pinyin-dired farmhouse-themes fantom-theme eziam-themes expand-region exotica-theme exec-path-from-shell eww-lnum evil evil-visualstar evil-surround evil-nerd-commenter evil-matchit evil-mark-replace evil-find-char-pinyin evil-exchange evil-escape esup espresso-theme emms emmet-mode company elpy elpa-mirror dracula-theme doom-themes django-theme diredfl diminish darktooth-theme darkokai-theme darkmine-theme bui dap-mode dakrone-theme cyberpunk-theme csv-mode cpputils-cmake counsel counsel-gtags counsel-css bbdb counsel-bbdb company-statistics company-native-complete company-c-headers command-log-mode color-theme-sanityinc-tomorrow color-theme-sanityinc-solarized color-theme cnfonts cmake-mode clues-theme cliphist cherry-blossom-theme busybee-theme buffer-move bubbleberry-theme birds-of-paradise-plus-theme bind-key benchmark-init base16-theme badwolf-theme auto-yasnippet auto-package-update atom-one-dark-theme atom-dark-theme apropospriate-theme anti-zenburn-theme amx ample-zen-theme ample-theme alect-themes afternoon-theme adoc-mode ace-pinyin)
	package-activated-list)))
(progn
  (require 'info)
  (info-initialize)
  (setq Info-directory-list
	(append
	 '("/home/cam/.emacs.d/elpa/bbdb-20231122.1326" "/home/cam/.emacs.d/elpa/company-20231208.1730" "/home/cam/.emacs.d/elpa/emms-17" "/home/cam/.emacs.d/elpa/evil-20240102.1659" "/home/cam/.emacs.d/elpa/magit-3.3.0" "/home/cam/.emacs.d/elpa/magit-section-3.3.0" "/home/cam/.emacs.d/elpa/marginalia-1.6" "/home/cam/.emacs.d/elpa/modus-themes-20240103.755" "/home/cam/.emacs.d/elpa/ivy-0.14.2" "/home/cam/.emacs.d/elpa/transient-0.5.3" "/home/cam/.emacs.d/elpa/dash-2.19.1" "/home/cam/.emacs.d/elpa/with-editor-3.3.2" "/home/cam/.emacs.d/elpa/compat-29.1.4.4" "/home/cam/.emacs.d/elpa/writeroom-mode-3.11")
	 Info-directory-list)))

;; Local Variables:
;; version-control: never
;; no-update-autoloads: t
;; byte-compile-warnings: (not make-local)
;; End:
