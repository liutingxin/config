;; -*- mode: emacs-lisp; coding: utf-8-unix -*-
;; Minibuffer history file, automatically generated by ‘savehist’.

(setq savehist-minibuffer-history-variables '(helm-ag--helm-history helm-make-target-history helm-grep-history magit-revision-history empty-history ivy-history buffer-name-history file-name-history counsel-M-x-history read-from-kill-ring-history tmm--history woman-topic-history ido-buffer-history command-history read-number-history shell-command-history evil-ex-history evil-ex-search-history compile-history helm-file-name-history minibuffer-history helm-M-x-input-history))
(setq helm-make-target-history '("CMake" "--" #("0" 0 1 (face highlight-numbers-number fontified t)) "Compatibility" #("set" 0 3 (face font-lock-function-name-face fontified t)) #("CMAKE_LIBRARY_OUTPUT_DIRECTORY" 0 30 (fontified t))))
(setq helm-grep-history '("scro" "scroll" "user-config"))
(setq ivy-history '(#("clangd" 0 6 (ivy-index 0)) #("flyspell-lazy" 0 13 (ivy-index 13))))
(setq buffer-name-history '("*ansi-term*" "*ansi-term*<2>" "evil-tutor-24042024.txt" "*Keys*" "*compilation*" "CMakeLists.txt" "CMakeLists.txt<boost>" "*Shell Command Output*" "*Messages*" "*scratch*" "*spacemacs*" "*cmakels::stderr*" "*info*" " *Treemacs-Scoped-Buffer-#<frame F1 0x558e98c68128>*" "*helm M-x*" "*Help*" ".spacemacs" "TUTORIAL.cn" #("c:/" 0 3 (ivy-index 0)) #(".emacs.d" 0 8 (ivy-index 0))))
(setq file-name-history '("~/Project/dishui/c/day_one/Main.cpp" "~/Project/didui/c/dat_one/Main.cpp" "~/Project/boost_test/chkfile.cpp" "~/pro/test_1/CMakeLists.txt" "~/pro/test_1/a.cpp" "~/Project/boost/chkfile.cpp" "~/Project/boost/CMakeLists.txt" "~/pro/test_1/CmakeLists.txt" "~/Project/boost/CmakeLists.txt" "~/pro/test_1/Makefile" "~/config/.emacs.d/README.org" "~/a.cpp" "~/config/.git/COMMIT_EDITMSG" "~/config/README.md" "~/.emacs.d/core/banners/998-banner.txt" "~/.emacs.d/core/banners/999-banner.txt" "~/.emacs.d/core/banners/997-banner.txt" "~/.emacs.d/core/banners/100-banner.txt" "~/.emacs.d/core/banners/003-banner.txt" "~/.emacs.d/core/banners/004-banner.txt" "~/.emacs.d/core/banners/002-banner.txt" "~/.emacs.d/core/banners/001-banner.txt" "~/.emacs.d/core/banners/000-banner.txt" "~/config/.spacemacs" "~/config/init.vim" #("c:/Users/Ltx/a.cpp" 0 18 (ivy-index 0)) #("c:/" 0 3 (ivy-index 0)) #("c:/Users/Ltx/.emacs.d/" 0 22 (ivy-index 0)) "~/.spacemacs" "d:/Software/Work/Emacs/a.cpp" "~/.emacs.d/.cache/.custom-settings" "~/.emacs.d__/init.el"))
(setq counsel-M-x-history '(#("^package-install" 0 16 (ivy-index 0)) "package-install"))
(setq tmm--history '("h==>Help" "y==>YASnippet" "P==>Projectile" "p==>Perspectives" "t==>Tools" "b==>Buffers" "o==>Options" "e==>Edit" "f==>File"))
(setq ido-buffer-history '("*ansi-term*" "*ansi-term*<2>" "evil-tutor-24042024.txt" "*Keys*" "*compilation*" "CMakeLists.txt" "CMakeLists.txt<boost>" "*Shell Command Output*" "*Messages*" "*scratch*" "*spacemacs*" "*cmakels::stderr*" "*info*" " *Treemacs-Scoped-Buffer-#<frame F1 0x558e98c68128>*" "*helm M-x*" "*Help*" ".spacemacs" "TUTORIAL.cn" "*Compile-Log*"))
(setq command-history '((evil-delete 81 90 'line) (evil-delete 141 145 'line) (evil-record-macro 32) (shell-command "make -k -C ./build/ -f Makefile" nil nil) (shell-command "_cmake " nil nil) (evil-replace 104 105 'exclusive 97) (shell-command "rm ./build/boost_test " nil nil) (shell-command "make -C ./build/ -f Makefile -k clean" nil nil) (shell-command "make -K -C ./build/ -f Makefile" nil nil) (shell-command "make -K -C ./build/ -f MakeFile" nil nil) (shell-command "make -k -C ./build/ -f MakeFile" nil nil) (shell-command "./build/boost_test" nil nil) (shell-command "pwd" nil nil) (shell-command "make -k -C ./build/ -f MakeFiles" nil nil) (ansi-term "/usr/bin/zsh") (shell-command "make -k -f -C ./build/Makefile " nil nil) (shell-command "make -k -C ./build/ -f Main.cpp " nil nil) (evil-record-macro 10) (shell-command "make -k -C ./build/Makefile -f" nil nil) (kill-buffer "*ansi-term*") (evil-record-macro 107) (evil-record-macro 106) (shell-command "make ./build/" nil nil) (evil-set-marker 97) (shell-command "make ./build/Makefile " nil nil) (evil-record-macro 113) (shell-command "make" nil nil) (shell-command "ls" nil nil) (shell-command "cp ~/Project/boost/CMakeLists.txt ~/Project/dishui/c/day_one/" nil nil) (kill-buffer "*ansi-term*<2>") (evil-goto-mark 96) (shell-command "./main " nil nil) (shell-command "g++ -o main ./Main.cpp" nil nil) (evil-shell-command 92 94 'line) (shell-command "g++ -o main ./Main.c" nil nil) (compile "make" nil) (compile "make -k " nil) (kill-buffer "Main.cpp") (hexl-find-file "/home/cam/Project/didui/c/dat_one/Main.cpp") (mkdir "/home/cam/Project/didui/c/dat_one/" t) (kill-buffer "evil-tutor-24042024.txt") (evil-goto-mark-line 106) (load-library "2048") (evil-delete 504 545 'line) (evil-delete 322 29434) (evil-find-char nil 101) (package-install 'treemacs-all-the-icons nil) (evil-delete 2664 2671 'line) (evil-record-macro 58) (kill-buffer "*Keys*") (lsp-workspace-folders-switch "/home/cam/Project/boost_test") (evil-delete 1208 1264 'line) (shell-command "./build/boost_test " nil nil) (shell-command "_cmake" nil nil) (shell-command "./build/sample" nil nil) (evil-yank 14102 14151 'line) (evil-find-char nil 106) (evil-find-char-to nil 106) (lsp-describe-session) (evil-delete 1298 1299 'exclusive) (evil-delete 1323 1397 'line) (shell-command " rm -rf ./build" nil nil) (shell-command "cmake" nil nil) (shell-command "_cmkae" nil nil) (evil-yank 1252 1320 'line) (shell-command "rm -rf ./build" nil nil) (evil-set-marker 27) (eaf-install) (shell-command "rm ./build -rf" nil nil) (evil-yank 940 970 'line) (evil-find-char nil 116) (evil-find-char nil 32) (evil-set-marker 32) (kill-buffer "*compilation*") (shell-command " rm -rf ./build/" nil nil) (evil-delete 2128 2174 'line) (evil-set-marker 103) (shell-command " rm -rf CMakeCache.txt ./CMakeFiles/ ./build/ ./Makefile ./cmake_install.cmake " nil nil) (shell-command " pwd" nil nil) (shell-command "cd .." nil nil) (kill-buffer "CMakeLists.txt") (kill-buffer "CMakeLists.txt<boost>") (kill-buffer "*Shell Command Output*") (kill-buffer "*Messages*") (kill-buffer "*scratch*") (kill-buffer "*spacemacs*") (evil-delete 28557 28601 'line) (shell nil nil) (shell-command "nethack" nil nil) (kill-buffer "*cmakels::stderr*") (kill-buffer "*info*") (shell-command "which ls" nil nil) (shell-command "echo $SHELL" nil nil) (shell-command "_cmake()" nil nil) (shell-command "source ~/.zshrc" nil nil) (evil-shell-command 222 222 'exclusive) (shell-command "echo $PATH" nil nil) (shell-command "cmake ." nil nil) (shell-command "rm -rf .cmake/ ./CMakeFiles/  ./build/ ./CMakeCache.txt  ./Makefile  ./cmake_install.cmake " nil nil) (shell-command "rm -rf ./.cmake/ ./CMakeFiles/  ./build/ ./CMakeCache.txt  ./Makefile  ./cmake_install.cmake " nil nil) (evil-delete 235 236 'line) (evil-delete 235 278 'line) (evil-yank 85 126 'line) (shell-command "rm -rf ./build/" nil nil) (shell-command "rm -rf ./.cmake/ ./CMakeFiles/ ./CMakeCache.txt  ./cmake_install.cmake CmakeLists.txt " nil nil) (kill-buffer " *Treemacs-Scoped-Buffer-#<frame F1 0x558e98c68128>*") (shell-command "rm -rf .cmake/ ./CMakeFiles/ ./CMakeCache.txt  ./cmake_install.cmake CmakeLists.txt " nil nil) (evil-delete 1 1 'line) (evil-delete 955 1013 'line) (shell-command "rm -rf .cmake/ ./CMakeFiles/ ./CMakeCache.txt  ./cmake_install.cmake " nil nil) (evil-shell-command 1 1) (shell-command "rmdir build/" nil nil) (shell-command "mkdir build" nil nil) (shell-command "rm Makefile" nil nil) (shell-command "rm ./.CMakeCache.txt" nil nil) (shell-command "rm -rf ./CMakeFiles .cmake ./.CMakeCache.txt cmake_install.cmake " nil nil) (evil-record-macro 24) (evil-delete 59 89 'line) (evil-delete 59 88 'line) (shell-command "ll" nil nil) (evil-shell-command 84 84 'exclusive) (shell-command "cd ../" nil nil) (evil-change 84 84 'exclusive) (shell-command "mv Makefile Makefile.bak" nil nil) (shell-command "mv ./Makefile ./Makefile.bak" nil nil) (shell-command "mv ./Makfile ./Makefile.bak" nil nil) (evil-delete 248 249 'line) (evil-yank 106 138 'line) (evil-change 2810 2811 'exclusive) (compile "make -k clean" nil) (shell-command "./sample " nil nil) (evil-delete 234 335 'line) (evil-delete 2875 2876 'line) (evil-yank 2755 2796 'line) (evil-delete 2796 2857 'line) (evil-yank 2661 2731 'line) (evil-shell-command 115 115 'exclusive) (shell-command "cmake --help" nil nil) (evil-change 115 115 'exclusive) (compile "cmake " nil) (shell-command "./samlpe.out " nil nil) (compile "g++ -o samlpe.out  ./chkfile.cpp  -I$BOOST_INCLUDE -L$BOOST_LIB -lboost_thread" nil) (evil-replace 328 329 'exclusive 34) (evil-replace 313 314 'exclusive 34) (evil-replace 176 177 'exclusive 34) (evil-replace 176 177 'exclusive 58) (evil-replace 127 128 'exclusive 34) (evil-set-marker 98) (treemacs--setup-fringe-indicator-mode 'always) (evil-find-char-to-backward nil 115) (evil-find-char-to-backward nil 32) (treemacs--setup-git-mode 'extended) (evil-find-char-to nil 102) (evil-replace 2030 2031 'exclusive 97) (evil-replace 3455 3456 'exclusive 115) (evil-replace 3455 3456 'exclusive 83) (evil-yank 2648 2718 'line) (evil-delete 3273 3344 'line) (evil-change 3273 3274 'exclusive) (evil-yank 9406 9459 'line) (evil-yank 9406 9453 'line) (evil-delete 3272 3283 'line) (evil-delete 3273 3308 'line) (shell-command "ls -la" nil nil) (shell-command "ls -l" nil nil) (evil-find-char nil 97) (evil-change 3181 3182 'exclusive) (evil-set-marker 110) (evil-find-char-to nil 116) (evil-delete 57 58 'line) (evil-delete 48 49 'line) (shell-command "a.py " nil nil) (shell-command "./a" nil nil) (shell-command "a.out" nil nil) (compile "make -k a" nil) (shell-command "mkdir  pro/test_1 && mv ./a.cpp ./pro/test_1" nil nil) (shell-command "mkdir  pro" nil nil) (shell-command "mkdir -r pro/test_1 && mv ./a.cpp ./pro/test_1" nil nil) (shell-command "mkdir pro/test_1 && mv ./a.cpp ./pro/test_1" nil nil) (kill-buffer "*helm M-x*") (evil-delete 27269 27290 'line) (evil-set-marker 109) (evil-delete 2323 2329 'line) (evil-delete 2117 2128 'line) (evil-set-marker 44) (evil-delete 2203 2204 'line) (evil-find-char nil 103) (evil-find-char nil 102) (kill-buffer "*Help*") (evil-delete 172 29988) (evil-delete 2042 2059 'line) (evil-delete 1 19 'line) (kill-buffer ".spacemacs") (kill-buffer "TUTORIAL.cn") (evil-yank 8292 8346 'line) (package-install 'monokai-theme nil) (package-install 'farmhouse-themes nil) (evil-yank 17388 17427 'line) (evil-find-char nil 100) (evil-yank 16919 16961 'line) (evilnc-comment-operator 16919 17003 'line) (evil-goto-mark-line 39) (evil-yank 8248 8291 'line) (evilnc-comment-operator 20238 20239 'exclusive) (evilnc-comment-operator 20235 20301 'line) (evil-yank 20235 20268 'line) (evil-goto-mark-line 27) (evil-find-char-to nil 117) (evil-replace 6371 6371 'exclusive 9) (evil-record-macro 117) (evil-find-char nil 117) (kill-buffer "*Compile-Log*") (evil-yank 20927 20960 'line nil nil) (package-install 'dracula-theme nil) (evil-yank 12495 12565 'line nil nil) (evil-delete 26338 26342 'line nil nil) (evil-delete 12494 12534 'line nil nil) (evil-record-macro 81) (evil-goto-mark-line 13) (kill-buffer "c:/") (find-file-literally "c:/") (package-install 'flyspell-lazy nil) (kill-buffer ".emacs.d") (evil-delete 2138 2147 'line) (evil-delete 11162 11195 'line) (evil-delete 11195 11236 'line) (evil-delete 11394 11395 'line) (evil-delete 11268 11309 'line) (evil-delete 11268 11308 'line) (eval-buffer) (evil-delete 12652 12735 'line) (evil-yank 12316 12371 'line) (evil-record-macro 82) (evil-delete 20506 20573 'line) (evil-goto-mark-line 127) (Info-goto-emacs-command-node 'dotspacemacs-line-numbers t) (Info-goto-emacs-command-node 'visual-line--saved-state t) (evil-delete 12807 12808 'line) (evil-delete 12762 12763 'line) (evil-delete 12716 12717 'line) (evil-delete 12676 12677 'line) (evil-replace 12861 12862 'exclusive 53) (evil-yank 12234 12258 'line) (evil-yank 12306 12359 'line) (evil-delete 12340 12389 'line) (evil-yank 12232 12281 'line) (evil-yank 12281 12323 'line) (evil-replace 12319 12320 'exclusive 53) (evil-replace 12319 12320 'exclusive 52) (evil-yank 20227 20260 'line) (evil-delete 78 79 'line) (evil-indent 33 35) (kill-buffer "init.el") (evil-record-macro 44) (evil-find-char nil 98) (kill-buffer "*Process List*") (shell-command "./a.exe " nil nil) (compile "g++ -o a a.cpp " nil)))
(setq shell-command-history '("make -k -C ./build/ -f Makefile" "_cmake " "rm ./build/boost_test " "make -C ./build/ -f Makefile -k clean" "make -K -C ./build/ -f Makefile" "make -K -C ./build/ -f MakeFile" "make -k -C ./build/ -f MakeFile" "./build/boost_test" "pwd" "make -k -C ./build/ -f MakeFiles" "make -k -f -C ./build/Makefile " "make -k -C ./build/ -f Main.cpp " "make -k -C ./build/Makefile -f" "make ./build/" "make ./build/Makefile " "make" "ls" "cp ~/Project/boost/CMakeLists.txt ~/Project/dishui/c/day_one/" "./main " "g++ -o main ./Main.cpp" "g++ -o main ./Main.c" "./build/boost_test " "_cmake" "./build/sample" " rm -rf ./build" "cmake" "_cmkae" "rm -rf ./build" "rm ./build -rf" " rm -rf ./build/" " rm -rf CMakeCache.txt ./CMakeFiles/ ./build/ ./Makefile ./cmake_install.cmake " " pwd" "ll" "cd .." "nethack" "which ls" "echo $SHELL" "_cmake()" "source ~/.zshrc" "echo $PATH" "cmake ." "rm -rf .cmake/ ./CMakeFiles/  ./build/ ./CMakeCache.txt  ./Makefile  ./cmake_install.cmake " "rm -rf ./.cmake/ ./CMakeFiles/  ./build/ ./CMakeCache.txt  ./Makefile  ./cmake_install.cmake " "rm -rf ./build/" "rm -rf ./.cmake/ ./CMakeFiles/ ./CMakeCache.txt  ./cmake_install.cmake CmakeLists.txt " "rm -rf .cmake/ ./CMakeFiles/ ./CMakeCache.txt  ./cmake_install.cmake CmakeLists.txt " "rm -rf .cmake/ ./CMakeFiles/ ./CMakeCache.txt  ./cmake_install.cmake " "rmdir build/" "mkdir build" "rm Makefile" "rm ./.CMakeCache.txt" "rm -rf ./CMakeFiles .cmake ./.CMakeCache.txt cmake_install.cmake " "cd ../" "mv Makefile Makefile.bak" "mv ./Makefile ./Makefile.bak" "mv ./Makfile ./Makefile.bak" "./sample " "cmake --help" "./samlpe.out " "ls -la" "ls -l" "a.py " "./a" "a.out" "mkdir  pro/test_1 && mv ./a.cpp ./pro/test_1" "mkdir  pro" "mkdir -r pro/test_1 && mv ./a.cpp ./pro/test_1" "mkdir pro/test_1 && mv ./a.cpp ./pro/test_1" "./a.exe "))
(setq evil-ex-history '(".!" "q" "w" "q" "wq" "noh"))
(setq evil-ex-search-history '("-k" "configuration-layers" "configuration-layer" "font" "org" "user-init" "init" "sideline" "lsp-ui" "user-con" "dia" "kbd" "diaster" "tree" "ivy" "gdb" "998" "line" "random" "treemacs" "position" "layers" "scroll" "scrolling" "user-config" "lsp" "git" "layer" "user" "leader-key" "non-nil" "key" "keys" "rand" "farm" "My add config start" "theme" "fullscree" "full" "max" "add config" "banner" "30" "user-ini" "melpa" "eaf" "26" "'visual" "relative" "'relative" "line-number" "https"))
(setq compile-history '("make" "make -k " "make -k clean" "cmake " "g++ -o samlpe.out  ./chkfile.cpp  -I$BOOST_INCLUDE -L$BOOST_LIB -lboost_thread" "make -k a" "g++ -o a a.cpp "))
(setq helm-file-name-history '(".spacemacs" "init.vim" "chkfile.cpp" "a.cpp" "c:" ".emacs.d" ".spacemacs" "a.cpp" ".custom-settings" "init.el"))
(setq minibuffer-history '(#("day_one" 0 7 (button (t) category t face treemacs-root-face :project #s(treemacs-project "day_one" #1="/home/cam/Project/dishui/c/day_one" local-readable nil) :default-face treemacs-root-face :key #1# :symlink nil :state root-node-open :path #1# :depth 0)) "/build/" "/usr/bin/zsh" "/" "/Project/dishui/c/day_one/" "/Project/dishui/c/" "/Project/dishui/" "/Project/" "/Project/boost/" "Main.cpp" "/home/cam/Project/didui/c/dat_one/" "~/project/c/dat_one/" "/home/cam/Project/didui/c/dat_one/Main.cpp" "2048" "treemacs-" "rain" "cmake_" "CM" "CMa" "cm" "Mak" "cma" "cmake ." "/home/cam/Project/boost/" "/home/cam/pro/test_1/" "../" "/home/cam/Project/boost/CMakeLists.txt" "/home/cam/Project/boost/CmakeLists.txt" "/home/cam/pro/test_1/CmakeLists.txt" "/home/cam/pro/test_1/Makefile" "chk" "di" #("the" 0 3 (face font-lock-comment-face fontified t)) #("int" 0 2 (face font-lock-type-face fontified t) 2 3 (face font-lock-type-face c-type c-decl-id-start fontified t)) #("-" 0 1 (face org-superstar-item composition (1 1 [8211]) fontified t)) "灯火" "/home/cam/pro/" #("dotspacemacs-scroll-bar-while-scrolling" 0 39 (fontified nil)) "/home/cam/a.cpp" "0" "d" "/home/cam/config/README.md" #("then" 0 4 (wrap-prefix #("  " 0 2 (face org-indent)) line-prefix #("  " 0 2 (face org-indent)) fontified t)) "key" "message" "/home/cam/.emacs.d/core/banners/" "/home/cam/" "╋╋╋╋╋╋╋╋╋┃┃" "mess" "██║╚██████╗███████║" "monoka" #("spacemacs-light" 0 15 (fontified t)) #("farmhouse-theme" 0 15 (fontified nil)) "farmho" "vim" "git" "*Compile-Log*" "/home/cam/config/init.vim" "/home/cam/Project/boost/chkfi" "z" "drac" #("Spacemacs" 0 9 (face font-lock-function-name-face)) #("Documentation" 0 13 (face font-lock-keyword-face)) #("monokai" 0 7 (fontified t)) "spacemacs" "dra" #("font" 0 4 (face font-lock-comment-face fontified t)) "dotspacemacs-line-numbers" "visual-line--saved-state" #("terminal." 0 9 (face font-lock-comment-face fontified t)) #("prioritized" 0 11 (face font-lock-comment-face fontified t)) #("Code" 0 4 (face font-lock-comment-face fontified t)) #("can" 0 3 (face font-lock-comment-face fontified t)) #("because" 0 7 (face font-lock-comment-face fontified t)) #("Source" 0 6 (face font-lock-string-face fontified t)) #("16.0" 0 2 (face highlight-numbers-number fontified nil) 2 4 (face highlight-numbers-number fontified nil)) "book" "init.el" "book_makr test a.cpp" "*Messages*" "*Process List*" "a.cpp" "d:/Software/Work/Emacs/" "c:/Users/Ltx/.emacs.d_" "d:/hello.cpp"))
(setq helm-M-x-input-history '("mk" "packins" "load-li" "pac" "pack" "lsp-desc" "eaf-install" "ansi" "shell" #("spacemacs-light" 0 15 (fontified t)) "packageinsta" "packainsta" "eval-buf" "com" "resrtart"))
(setq projectile-project-command-history '#s(hash-table size 65 test equal rehash-size 1.5 rehash-threshold 0.8125 data ()))
(setq evil-jumps-history 'nil)
(setq mark-ring 'nil)
(setq search-ring '(#("font" 0 4 (isearch-case-fold-search t isearch-regexp-function nil)) #("line-numbers" 0 12 (isearch-case-fold-search t isearch-regexp-function nil))))
(setq regexp-search-ring '(#("\\_<Documentation\\_>" 0 19 (isearch-case-fold-search nil)) #("\\_<<main\\+0x57>\\_>" 0 18 (isearch-case-fold-search nil)) #("\\_<ttf-victor-mono-nerd\\_>" 0 26 (isearch-case-fold-search nil)) #("\\_<lsp-ui-sideline-{level}-{tags}-face\\_>" 0 41 (isearch-case-fold-search nil)) #("\\_<c-c\\+\\+\\_>" 0 13 (isearch-case-fold-search nil)) #("\\<\\>" 0 4 (isearch-case-fold-search nil)) #("\\_<filesystem\\_>" 0 16 (isearch-case-fold-search nil)) #("\\_<spell-checking\\_>" 0 20 (isearch-case-fold-search nil)) #("\\_<syntax-checking\\_>" 0 21 (isearch-case-fold-search nil)) #("\\<SHELL\\>" 0 9 (isearch-case-fold-search nil)) #("\\_<init-elpa\\_>" 0 15 (isearch-case-fold-search nil)) #("\\_<init-autoload\\_>" 0 19 (isearch-case-fold-search nil))))
(setq extended-command-history '("mkdir" "package-install" "lsp-describe-session" "eaf-install" "ansi-term" "shell" "eval-buffer" "restart-emacs-start-new-emacs"))
(setq kill-ring '(#("    mov eax, eax
    mov eax, eax
    mov eax, eax

" 0 4 (yank-handler #1=(evil-yank-line-handler nil t) fontified t) 4 5 (yank-handler #1# face font-lock-type-face fontified t) 5 6 (yank-handler #1# face font-lock-type-face fontified t) 6 7 (yank-handler #1# face font-lock-type-face c-type c-decl-id-start fontified t) 7 8 (yank-handler #1# fontified t) 8 9 (yank-handler #1# face font-lock-variable-name-face fontified t) 9 10 (yank-handler #1# face font-lock-variable-name-face fontified t) 10 11 (yank-handler #1# face font-lock-variable-name-face fontified t) 11 12 (yank-handler #1# c-type c-decl-id-start fontified t) 12 13 (yank-handler #1# fontified t) 13 14 (yank-handler #1# face font-lock-variable-name-face fontified t) 14 15 (yank-handler #1# face font-lock-variable-name-face fontified t) 15 16 (yank-handler #1# face font-lock-variable-name-face fontified t) 16 17 (yank-handler #1# fontified t) 17 21 (yank-handler #1# fontified t) 21 22 (yank-handler #1# fontified t) 22 23 (yank-handler #1# fontified t) 23 24 (yank-handler #1# fontified t) 24 25 (yank-handler #1# fontified t) 25 26 (yank-handler #1# fontified t) 26 27 (yank-handler #1# fontified t) 27 28 (yank-handler #1# fontified t) 28 29 (yank-handler #1# c-type c-decl-id-start fontified t) 29 30 (yank-handler #1# fontified t) 30 31 (yank-handler #1# face font-lock-variable-name-face fontified t) 31 32 (yank-handler #1# face font-lock-variable-name-face fontified t) 32 33 (yank-handler #1# face font-lock-variable-name-face fontified t) 33 34 (yank-handler #1# fontified t) 34 38 (yank-handler #1# fontified t) 38 39 (yank-handler #1# fontified t) 39 40 (yank-handler #1# fontified t) 40 41 (yank-handler #1# fontified t) 41 42 (yank-handler #1# fontified t) 42 43 (yank-handler #1# fontified t) 43 44 (yank-handler #1# fontified t) 44 45 (yank-handler #1# fontified t) 45 46 (yank-handler #1# c-type c-decl-id-start fontified t) 46 47 (yank-handler #1# fontified t) 47 48 (yank-handler #1# face font-lock-variable-name-face fontified t) 48 49 (yank-handler #1# face font-lock-variable-name-face fontified t) 49 50 (yank-handler #1# face font-lock-variable-name-face fontified t) 50 51 (yank-handler #1# fontified t) 51 52 (yank-handler #1# fontified t)) #("  __asm{
" 0 2 (yank-handler #2=(evil-yank-line-handler nil t) fontified t) 2 3 (yank-handler #2# fontified t) 3 4 (yank-handler #2# fontified t) 4 5 (yank-handler #2# fontified t) 5 6 (yank-handler #2# fontified t) 6 7 (yank-handler #2# fontified t) 7 8 (yank-handler #2# c-type c-not-decl face (rainbow-delimiters-depth-2-face) fontified t) 8 9 (yank-handler #2# fontified t)) #("  }
" 0 2 (yank-handler #3=(evil-yank-line-handler nil t) fontified t) 2 3 (yank-handler #3# face (rainbow-delimiters-depth-2-face) fontified t) 3 4 (yank-handler #3# fontified t)) #("a" 0 1 (fontified t)) #(" " 0 1 (font-lock-face ((:foreground "#b2b2b2" :background "#292b2e" :inverse-video nil)) fontified t)) #(";" 0 1 (face font-lock-comment-delimiter-face fontified t)) #(";" 0 1 (face font-lock-comment-delimiter-face fontified t)) #("evil-record-macro: Invalid register ‘32’
" 0 41 (yank-handler (evil-yank-line-handler nil t))) "treemacs-use-all-the-icons-theme t" #("               treemacs-indent-guide-style 'line
               ;; treemacs-use-all-the-icons-theme t
               ;; treemacs-use-icons-dired t
               treemacs-load-theme 'Default
               )" 0 64 (fontified t) 64 67 (face font-lock-comment-delimiter-face fontified t) 67 102 (face font-lock-comment-face fontified t) 102 117 (fontified t) 117 120 (face font-lock-comment-delimiter-face fontified t) 120 147 (face font-lock-comment-face fontified t) 147 206 (fontified t) 206 207 (face (rainbow-delimiters-depth-4-face) fontified t)) #("      
" 0 7 (yank-handler (evil-yank-line-handler nil t) fontified t)) "treemacs-evil" "configuration-layer-elpa-archives" #("  a8:	je     af <main+0xaf>
  aa:	call   af <main+0xaf>
" 0 2 (yank-handler #4=(evil-yank-line-handler nil t) fontified t) 2 4 (yank-handler #4# face font-lock-keyword-face fontified t) 4 30 (yank-handler #4# fontified t) 30 32 (yank-handler #4# face font-lock-keyword-face fontified t) 32 56 (yank-handler #4# fontified t)) #("  int data;" 0 2 (fontified t) 2 4 (face font-lock-type-face fontified t) 4 5 (face font-lock-type-face c-type c-decl-id-start fontified t) 5 6 (fontified t) 6 10 (face font-lock-variable-name-face fontified t) 10 11 (fontified t)) "#include <iostream>
#include <boost/shared_ptr.hpp>

// 示例类
class MyClass {
public:
    MyClass(int data) : data(data) {}
    void printData() {
        std::cout << \"Data: \" << data << std::endl;
    }
private:
    int data;
};

int main() {
    // 使用 Boost 的 shared_ptr 创建 MyClass 对象
    boost::shared_ptr<MyClass> ptr(new MyClass(42));

    // 调用对象的方法
    ptr->printData();

    return 0;
}" #("#include <boost/thread/thread.hpp> //包含boost头文件
#include <cstdlib>
#include <iostream>
using namespace std;
volatile bool isRuning = true;
void func1() {
  static int cnt1 = 0;
  while (isRuning) {
    cout << \"func1:\" << cnt1++ << endl;
    sleep(1);
  }
}
void func2() {
  static int cnt2 = 0;
  while (isRuning) {
    cout << \"\\tfunc2:\" << cnt2++ << endl;
    sleep(2);
  }
}
int main() {
  boost::thread thread1(&func1);
  boost::thread thread2(&func2);
  thread2.join();
  thread1.join();
  cout << \"exit\" << endl;
  return 0;
}
" 0 1 (yank-handler #5=(evil-yank-line-handler nil t) face font-lock-preprocessor-face c-is-sws t fontified t) 1 8 (yank-handler #5# face font-lock-preprocessor-face fontified t) 8 9 (yank-handler #5# fontified t) 9 10 (yank-handler #5# category c-<-as-paren-syntax face (rainbow-delimiters-depth-1-face font-lock-string-face) fontified t) 10 33 (yank-handler #5# face font-lock-string-face fontified t) 33 34 (yank-handler #5# category c->-as-paren-syntax face (rainbow-delimiters-depth-1-face font-lock-string-face) fontified t) 34 35 (yank-handler #5# fontified t) 35 37 (yank-handler #5# face font-lock-comment-delimiter-face fontified t) 37 48 (yank-handler #5# face font-lock-comment-face fontified t) 48 49 (yank-handler #5# face font-lock-preprocessor-face c-is-sws t fontified t) 49 56 (yank-handler #5# face font-lock-preprocessor-face fontified t) 56 57 (yank-handler #5# fontified t) 57 58 (yank-handler #5# category c-<-as-paren-syntax face (rainbow-delimiters-depth-1-face font-lock-string-face) fontified t) 58 65 (yank-handler #5# face font-lock-string-face fontified t) 65 66 (yank-handler #5# category c->-as-paren-syntax face (rainbow-delimiters-depth-1-face font-lock-string-face) fontified t) 66 67 (yank-handler #5# fontified t) 67 68 (yank-handler #5# face font-lock-preprocessor-face c-is-sws t fontified t) 68 75 (yank-handler #5# face font-lock-preprocessor-face fontified t) 75 76 (yank-handler #5# fontified t) 76 77 (yank-handler #5# category c-<-as-paren-syntax face (rainbow-delimiters-depth-1-face font-lock-string-face) fontified t) 77 85 (yank-handler #5# face font-lock-string-face fontified t) 85 86 (yank-handler #5# category c->-as-paren-syntax face (rainbow-delimiters-depth-1-face font-lock-string-face) fontified t) 86 87 (yank-handler #5# fontified t) 87 88 (yank-handler #5# face font-lock-keyword-face c-is-sws t fontified t) 88 92 (yank-handler #5# face font-lock-keyword-face fontified t) 92 93 (yank-handler #5# fontified t) 93 102 (yank-handler #5# face font-lock-keyword-face fontified t) 102 103 (yank-handler #5# fontified t) 103 106 (yank-handler #5# face font-lock-constant-face fontified t) 106 108 (yank-handler #5# fontified t) 108 116 (yank-handler #5# face font-lock-keyword-face fontified t) 116 117 (yank-handler #5# fontified t) 117 120 (yank-handler #5# face font-lock-type-face fontified t) 120 121 (yank-handler #5# face font-lock-type-face c-type c-decl-id-start fontified t) 121 122 (yank-handler #5# fontified t) 122 130 (yank-handler #5# face font-lock-variable-name-face fontified t) 130 133 (yank-handler #5# fontified t) 133 137 (yank-handler #5# face font-lock-constant-face fontified t) 137 139 (yank-handler #5# fontified t) 139 142 (yank-handler #5# face font-lock-type-face fontified t) 142 143 (yank-handler #5# face font-lock-type-face c-type c-decl-id-start fontified t) 143 144 (yank-handler #5# fontified t) 144 149 (yank-handler #5# face font-lock-function-name-face fontified t) 149 150 (yank-handler #5# face (rainbow-delimiters-depth-1-face) fontified t) 150 151 (yank-handler #5# face (rainbow-delimiters-depth-1-face) fontified t) 151 152 (yank-handler #5# fontified t) 152 153 (yank-handler #5# face (rainbow-delimiters-depth-1-face) fontified t) 153 156 (yank-handler #5# fontified t) 156 162 (yank-handler #5# face font-lock-keyword-face fontified t) 162 163 (yank-handler #5# fontified t) 163 165 (yank-handler #5# face font-lock-type-face fontified t) 165 166 (yank-handler #5# face font-lock-type-face c-type c-decl-id-start fontified t) 166 167 (yank-handler #5# fontified t) 167 171 (yank-handler #5# face font-lock-variable-name-face fontified t) 171 174 (yank-handler #5# fontified t) 174 175 (yank-handler #5# face highlight-numbers-number fontified t) 175 179 (yank-handler #5# fontified t) 179 184 (yank-handler #5# face font-lock-keyword-face fontified t) 184 185 (yank-handler #5# fontified t) 185 186 (yank-handler #5# face (rainbow-delimiters-depth-2-face) fontified t) 186 194 (yank-handler #5# fontified t) 194 195 (yank-handler #5# face (rainbow-delimiters-depth-2-face) fontified t) 195 196 (yank-handler #5# fontified t) 196 197 (yank-handler #5# face (rainbow-delimiters-depth-2-face) fontified t) 197 210 (yank-handler #5# fontified t) 210 218 (yank-handler #5# face font-lock-string-face fontified t) 218 247 (yank-handler #5# fontified t) 247 248 (yank-handler #5# face (rainbow-delimiters-depth-3-face) fontified t) 248 249 (yank-handler #5# face highlight-numbers-number fontified t) 249 250 (yank-handler #5# face (rainbow-delimiters-depth-3-face) fontified t) 250 254 (yank-handler #5# fontified t) 254 255 (yank-handler #5# face (rainbow-delimiters-depth-2-face) fontified t) 255 256 (yank-handler #5# fontified t) 256 257 (yank-handler #5# face (rainbow-delimiters-depth-1-face) fontified t) 257 258 (yank-handler #5# fontified t) 258 261 (yank-handler #5# face font-lock-type-face fontified t) 261 262 (yank-handler #5# face font-lock-type-face c-type c-decl-id-start fontified t) 262 263 (yank-handler #5# fontified t) 263 268 (yank-handler #5# face font-lock-function-name-face fontified t) 268 269 (yank-handler #5# face (rainbow-delimiters-depth-1-face) fontified t) 269 270 (yank-handler #5# face (rainbow-delimiters-depth-1-face) fontified t) 270 271 (yank-handler #5# fontified t) 271 272 (yank-handler #5# face (rainbow-delimiters-depth-1-face) fontified t) 272 275 (yank-handler #5# fontified t) 275 281 (yank-handler #5# face font-lock-keyword-face fontified t) 281 282 (yank-handler #5# fontified t) 282 284 (yank-handler #5# face font-lock-type-face fontified t) 284 285 (yank-handler #5# face font-lock-type-face c-type c-decl-id-start fontified t) 285 286 (yank-handler #5# fontified t) 286 290 (yank-handler #5# face font-lock-variable-name-face fontified t) 290 293 (yank-handler #5# fontified t) 293 294 (yank-handler #5# face highlight-numbers-number fontified t) 294 298 (yank-handler #5# fontified t) 298 303 (yank-handler #5# face font-lock-keyword-face fontified t) 303 304 (yank-handler #5# fontified t) 304 305 (yank-handler #5# face (rainbow-delimiters-depth-2-face) fontified t) 305 313 (yank-handler #5# fontified t) 313 314 (yank-handler #5# face (rainbow-delimiters-depth-2-face) fontified t) 314 315 (yank-handler #5# fontified t) 315 316 (yank-handler #5# face (rainbow-delimiters-depth-2-face) fontified t) 316 329 (yank-handler #5# fontified t) 329 339 (yank-handler #5# face font-lock-string-face fontified t) 339 368 (yank-handler #5# fontified t) 368 369 (yank-handler #5# face (rainbow-delimiters-depth-3-face) fontified t) 369 370 (yank-handler #5# face highlight-numbers-number fontified t) 370 371 (yank-handler #5# face (rainbow-delimiters-depth-3-face) fontified t) 371 375 (yank-handler #5# fontified t) 375 376 (yank-handler #5# face (rainbow-delimiters-depth-2-face) fontified t) 376 377 (yank-handler #5# fontified t) 377 378 (yank-handler #5# face (rainbow-delimiters-depth-1-face) fontified t) 378 379 (yank-handler #5# fontified t) 379 381 (yank-handler #5# face font-lock-type-face fontified t) 381 382 (yank-handler #5# face font-lock-type-face c-type c-decl-id-start fontified t) 382 383 (yank-handler #5# fontified t) 383 387 (yank-handler #5# face font-lock-function-name-face fontified t) 387 388 (yank-handler #5# face (rainbow-delimiters-depth-1-face) fontified t) 388 389 (yank-handler #5# face (rainbow-delimiters-depth-1-face) fontified t) 389 390 (yank-handler #5# fontified t) 390 391 (yank-handler #5# face (rainbow-delimiters-depth-1-face) fontified t) 391 394 (yank-handler #5# fontified t) 394 399 (yank-handler #5# face font-lock-constant-face fontified t) 399 401 (yank-handler #5# fontified t) 401 406 (yank-handler #5# face font-lock-type-face fontified t) 406 407 (yank-handler #5# face font-lock-type-face c-type c-decl-id-start fontified t) 407 408 (yank-handler #5# fontified t) 408 415 (yank-handler #5# face font-lock-variable-name-face fontified t) 415 416 (yank-handler #5# face (rainbow-delimiters-depth-2-face) fontified t) 416 422 (yank-handler #5# fontified t) 422 423 (yank-handler #5# face (rainbow-delimiters-depth-2-face) fontified t) 423 427 (yank-handler #5# fontified t) 427 432 (yank-handler #5# face font-lock-constant-face fontified t) 432 434 (yank-handler #5# fontified t) 434 439 (yank-handler #5# face font-lock-type-face fontified t) 439 440 (yank-handler #5# face font-lock-type-face c-type c-decl-id-start fontified t) 440 441 (yank-handler #5# fontified t) 441 448 (yank-handler #5# face font-lock-variable-name-face fontified t) 448 449 (yank-handler #5# face (rainbow-delimiters-depth-2-face) fontified t) 449 455 (yank-handler #5# fontified t) 455 456 (yank-handler #5# face (rainbow-delimiters-depth-2-face) fontified t) 456 472 (yank-handler #5# fontified t) 472 473 (yank-handler #5# face (rainbow-delimiters-depth-2-face) fontified t) 473 474 (yank-handler #5# face (rainbow-delimiters-depth-2-face) fontified t) 474 490 (yank-handler #5# fontified t) 490 491 (yank-handler #5# face (rainbow-delimiters-depth-2-face) fontified t) 491 492 (yank-handler #5# face (rainbow-delimiters-depth-2-face) fontified t) 492 504 (yank-handler #5# fontified t) 504 510 (yank-handler #5# face font-lock-string-face fontified t) 510 522 (yank-handler #5# fontified t) 522 528 (yank-handler #5# face font-lock-keyword-face fontified t) 528 529 (yank-handler #5# fontified t) 529 530 (yank-handler #5# face highlight-numbers-number fontified t) 530 532 (yank-handler #5# fontified t) 532 533 (yank-handler #5# face (rainbow-delimiters-depth-1-face) fontified t) 533 534 (yank-handler #5# fontified t)) #("\"" 0 1 (face font-lock-string-face fontified t)) #("\"" 0 1 (face font-lock-string-face fontified t)) "ttf-victor-mono-nerd" #26="" "0xProtoNerdFont.ttf" #("   dotspacemacs-default-font '(\"Source Code Pro\"
" 0 30 (yank-handler #6=(evil-yank-line-handler nil t) fontified t) 30 31 (yank-handler #6# face (rainbow-delimiters-depth-3-face) fontified t) 31 48 (yank-handler #6# face font-lock-string-face fontified t) 48 49 (yank-handler #6# fontified t)) "
                         4   ~/.spacemacs
                         5   /usr/include/boost/thread/detail/thread.hpp" "~/.emacs.d/.cache/layouts/persp-auto-save
     3   ~/.spacemacs
     4   /usr/include/boost/thread/detail/thread.hpp
     5   /usr/include/boost/thread/thread.hpp" #("b" 0 1 (fontified t)) #(" " 0 1 (fontified t)) #("#" 0 1 (face font-lock-comment-delimiter-face fontified t)) #("target_link_libraries(${PROJECT_NAME} PRIVATE ${Boost_LIBRARIES} pthread)
" 0 21 (yank-handler #7=(evil-yank-line-handler nil t) face font-lock-function-name-face fontified t) 21 22 (yank-handler #7# face (rainbow-delimiters-depth-1-face) fontified t) 22 23 (yank-handler #7# fontified t) 23 24 (yank-handler #7# face (rainbow-delimiters-depth-2-face) fontified t) 24 36 (yank-handler #7# face font-lock-variable-name-face fontified t) 36 37 (yank-handler #7# face (rainbow-delimiters-depth-2-face) fontified t) 37 47 (yank-handler #7# fontified t) 47 48 (yank-handler #7# face (rainbow-delimiters-depth-2-face) fontified t) 48 63 (yank-handler #7# face font-lock-variable-name-face fontified t) 63 64 (yank-handler #7# face (rainbow-delimiters-depth-2-face) fontified t) 64 72 (yank-handler #7# fontified t) 72 73 (yank-handler #7# face (rainbow-delimiters-depth-1-face) fontified t rear-nonsticky t) 73 74 (yank-handler #7# fontified t)) #("target_link_libraries(${PROJECT_NAME} PRIVATE boost_thread pthread)
" 0 21 (yank-handler #8=(evil-yank-line-handler nil t) face font-lock-function-name-face fontified t) 21 22 (yank-handler #8# face (rainbow-delimiters-depth-1-face) fontified t) 22 23 (yank-handler #8# fontified t) 23 24 (yank-handler #8# face (rainbow-delimiters-depth-2-face) fontified t) 24 36 (yank-handler #8# face font-lock-variable-name-face fontified t) 36 37 (yank-handler #8# face (rainbow-delimiters-depth-2-face) fontified t) 37 66 (yank-handler #8# fontified t) 66 67 (yank-handler #8# face (rainbow-delimiters-depth-1-face) fontified t rear-nonsticky t) 67 68 (yank-handler #8# fontified t)) #(")" 0 1 (face (rainbow-delimiters-depth-1-face) fontified t)) "target_link_libraries(main PRIVATE boost_thread pthread)" #(" 
" 0 1 (yank-handler #9=(evil-yank-line-handler nil t) fontified t) 1 2 (yank-handler #9#)) #("  \"${PROJECT_SOURCE_DIR}/*.h\"
" 0 2 (yank-handler #10=(evil-yank-line-handler nil t) fontified t) 2 5 (yank-handler #10# face font-lock-string-face fontified t) 5 23 (yank-handler #10# face font-lock-variable-name-face fontified t) 23 29 (yank-handler #10# face font-lock-string-face fontified t) 29 30 (yank-handler #10# fontified t)) "Invalid face reference: lsp-flycheck-info-unnecessary #2255" "https://github.com/emacs-lsp/lsp-mode/issues/2255" "(defface lsp-flycheck-info-unnecessary
  '((t))
  \"Face which apply to side line for symbols not used.
Possibly erroneously redundant of lsp-flycheck-info-unnecessary-face.\"
  :group 'lsp-ui-sideline)" #("          lsp-ui-sideline-{level}-{tags}-face
" 0 10 (yank-handler #11=(evil-yank-line-handler nil t) fontified t) 10 44 (yank-handler #11# fontified t) 44 45 (yank-handler #11# rear-nonsticky t fontified t) 45 46 (yank-handler #11# fontified t)) "lsp-ui-sideline-{level}-{tags}-face" #("————————————————

    版权声明：本文为博主原创文章，遵循 CC 4.0 BY -
    SA 版权协议，转载请附上原文出处链接和本声明。

        原文链接：https: // blog.csdn.net/zeye5731/article/details/122413193
" 0 43 (yank-handler #12=(evil-yank-line-handler nil t) fontified t) 43 46 (yank-handler #12# fontified t face highlight-numbers-number) 46 49 (yank-handler #12# fontified t) 49 50 (yank-handler #12# fontified t) 50 51 (yank-handler #12# fontified t) 51 56 (yank-handler #12# fontified t) 56 81 (yank-handler #12# fontified t) 81 82 (yank-handler #12# fontified t) 82 101 (yank-handler #12# fontified t) 101 102 (yank-handler #12# fontified t) 102 104 (yank-handler #12# fontified t face font-lock-comment-delimiter-face) 104 105 (yank-handler #12# fontified t face font-lock-comment-delimiter-face) 105 152 (yank-handler #12# fontified t face font-lock-comment-face) 152 153 (yank-handler #12# fontified t rear-nonsticky t face font-lock-comment-face) 153 154 (yank-handler #12#)) "#include <boost/thread/thread.hpp> //包含boost头文件
#include <iostream>
#include <cstdlib>
using namespace std;
volatile bool isRuning = true;
void func1()
{
    static int cnt1 = 0;
    while(isRuning)
    {
        cout << \"func1:\" << cnt1++ << endl;
        sleep(1);
    }
}
void func2()
{
    static int cnt2 = 0;
    while(isRuning)
    {
        cout << \"\\tfunc2:\" << cnt2++ << endl;
        sleep(2);
    }
}
int main()
{
    boost::thread thread1(&func1);
    boost::thread thread2(&func2);
    thread2.join();
    thread1.join();
    cout << \"exit\" << endl;
    return 0;
}
————————————————

                            版权声明：本文为博主原创文章，遵循 CC 4.0 BY-SA 版权协议，转载请附上原文出处链接和本声明。
                        
原文链接：https://blog.csdn.net/zeye5731/article/details/122413193" #("#include <iostream>
#include <boost/algorithm/string.hpp>
using namespace std;
using namespace boost;

int main() {
  cout << \"-- -- -- -- -- --测试boost库安装是否正确-- -- -- -- -- --\" << endl;
  std::string s = \"ismileli\";
  // 把字符串小写转换为大写
  getchar();
}
" 0 1 (yank-handler #13=(evil-yank-line-handler nil t) face font-lock-preprocessor-face c-is-sws t fontified t) 1 8 (yank-handler #13# face font-lock-preprocessor-face fontified t) 8 9 (yank-handler #13# fontified t) 9 10 (yank-handler #13# category c-<-as-paren-syntax face (rainbow-delimiters-depth-1-face font-lock-string-face) fontified t) 10 18 (yank-handler #13# face font-lock-string-face fontified t) 18 19 (yank-handler #13# category c->-as-paren-syntax face (rainbow-delimiters-depth-1-face font-lock-string-face) fontified t) 19 20 (yank-handler #13# fontified t) 20 21 (yank-handler #13# face font-lock-preprocessor-face c-is-sws t fontified t) 21 28 (yank-handler #13# face font-lock-preprocessor-face fontified t) 28 29 (yank-handler #13# fontified t) 29 30 (yank-handler #13# category c-<-as-paren-syntax face (rainbow-delimiters-depth-1-face font-lock-string-face) fontified t) 30 56 (yank-handler #13# face font-lock-string-face fontified t) 56 57 (yank-handler #13# category c->-as-paren-syntax face (rainbow-delimiters-depth-1-face font-lock-string-face) fontified t) 57 58 (yank-handler #13# fontified t) 58 59 (yank-handler #13# face font-lock-keyword-face c-is-sws t fontified t) 59 63 (yank-handler #13# face font-lock-keyword-face fontified t) 63 64 (yank-handler #13# fontified t) 64 73 (yank-handler #13# face font-lock-keyword-face fontified t) 73 74 (yank-handler #13# fontified t) 74 77 (yank-handler #13# face font-lock-constant-face fontified t) 77 79 (yank-handler #13# fontified t) 79 84 (yank-handler #13# face font-lock-keyword-face fontified t) 84 85 (yank-handler #13# fontified t) 85 94 (yank-handler #13# face font-lock-keyword-face fontified t) 94 95 (yank-handler #13# fontified t) 95 100 (yank-handler #13# face font-lock-constant-face fontified t) 100 103 (yank-handler #13# fontified t) 103 105 (yank-handler #13# face font-lock-type-face fontified t) 105 106 (yank-handler #13# face font-lock-type-face c-type c-decl-id-start fontified t) 106 107 (yank-handler #13# fontified t) 107 111 (yank-handler #13# face font-lock-function-name-face fontified t) 111 112 (yank-handler #13# face (rainbow-delimiters-depth-1-face) fontified t) 112 113 (yank-handler #13# face (rainbow-delimiters-depth-1-face) fontified t) 113 114 (yank-handler #13# fontified t) 114 115 (yank-handler #13# face (rainbow-delimiters-depth-1-face) fontified t) 115 126 (yank-handler #13# fontified t) 126 176 (yank-handler #13# face font-lock-string-face fontified t) 176 186 (yank-handler #13# fontified t) 186 188 (yank-handler #13# fontified t) 188 191 (yank-handler #13# face font-lock-constant-face fontified t) 191 193 (yank-handler #13# fontified t) 193 198 (yank-handler #13# face font-lock-type-face fontified t) 198 199 (yank-handler #13# face font-lock-type-face c-type c-decl-id-start fontified t) 199 200 (yank-handler #13# fontified t) 200 201 (yank-handler #13# face font-lock-variable-name-face fontified t) 201 204 (yank-handler #13# fontified t) 204 214 (yank-handler #13# face font-lock-string-face fontified t) 214 216 (yank-handler #13# fontified t) 216 218 (yank-handler #13# fontified t c-is-sws t c-in-sws t) 218 219 (yank-handler #13# face font-lock-comment-delimiter-face fontified t c-is-sws t c-in-sws t) 219 221 (yank-handler #13# face font-lock-comment-delimiter-face fontified t c-in-sws t) 221 233 (yank-handler #13# face font-lock-comment-face fontified t c-in-sws t) 233 235 (yank-handler #13# fontified t c-in-sws t c-is-sws t) 235 236 (yank-handler #13# fontified t c-is-sws t) 236 242 (yank-handler #13# fontified t) 242 243 (yank-handler #13# face (rainbow-delimiters-depth-2-face) fontified t) 243 244 (yank-handler #13# face (rainbow-delimiters-depth-2-face) fontified t) 244 246 (yank-handler #13# fontified t) 246 247 (yank-handler #13# face (rainbow-delimiters-depth-1-face) fontified t) 247 248 (yank-handler #13# fontified t)) #(" " 0 1 (fontified t)) #(" " 0 1 (fontified t)) #("#" 0 1 (face font-lock-comment-delimiter-face fontified t)) #("#" 0 1 (face font-lock-comment-delimiter-face fontified t)) #("  (global-set-key (kbd \"SPC '\") 'ansi-term)
" 0 2 (yank-handler #14=(evil-yank-line-handler nil t) fontified t) 2 3 (yank-handler #14# face (rainbow-delimiters-depth-2-face) fontified t) 3 18 (yank-handler #14# fontified t) 18 19 (yank-handler #14# face (rainbow-delimiters-depth-3-face) fontified t) 19 23 (yank-handler #14# fontified t) 23 30 (yank-handler #14# face font-lock-string-face fontified t) 30 31 (yank-handler #14# face (rainbow-delimiters-depth-3-face) fontified t) 31 42 (yank-handler #14# fontified t) 42 43 (yank-handler #14# face (rainbow-delimiters-depth-2-face) fontified t) 43 44 (yank-handler #14# fontified t)) "(define-key evil-normal-state-map (kbd \"SPC '\") 'ansi-term)" #("-" 0 1 (face font-lock-string-face fontified t)) #(" " 0 1 (face font-lock-comment-delimiter-face fontified t)) "(global-set-key (kbd \"C-c t\") 'ansi-term)" #("#if(NOT EXISTS ${PROJECT_SOURCE_DIR}/build)
" 0 1 (yank-handler #15=(evil-yank-line-handler nil t) face font-lock-comment-delimiter-face fontified t) 1 3 (yank-handler #15# face font-lock-comment-face fontified t) 3 4 (yank-handler #15# face font-lock-comment-face fontified t) 4 16 (yank-handler #15# face font-lock-comment-face fontified t) 16 17 (yank-handler #15# face font-lock-comment-face fontified t) 17 35 (yank-handler #15# face font-lock-variable-name-face fontified t) 35 36 (yank-handler #15# face font-lock-comment-face fontified t) 36 42 (yank-handler #15# face font-lock-comment-face fontified t) 42 43 (yank-handler #15# face font-lock-comment-face fontified t) 43 44 (yank-handler #15# face font-lock-comment-face fontified t)) #(")" 0 1 (face font-lock-comment-face fontified t)) #("'" 0 1 (face font-lock-string-face fontified t)) #(" " 0 1 (face font-lock-string-face fontified t)) #("o" 0 1 (face font-lock-string-face fontified t)) #("h" 0 1 (face font-lock-string-face fontified t)) #("c" 0 1 (face font-lock-string-face fontified t)) #("e" 0 1 (face font-lock-string-face fontified t)) #("
" 0 1 (yank-handler (evil-yank-line-handler nil t) fontified t)) #("dd  COMMAND bash -c \"echo 'Hello, world!'\"
" 0 2 (yank-handler #16=(evil-yank-line-handler nil t) fontified t) 2 20 (yank-handler #16# fontified t) 20 42 (yank-handler #16# face font-lock-string-face fontified t) 42 43 (yank-handler #16# fontified t)) #("CMAKE_BINARY_DI" 0 6 (fontified t face font-lock-variable-name-face) 6 13 (face font-lock-variable-name-face fontified t) 13 15 (face font-lock-variable-name-face fontified t)) "if(NOT EXISTS ${CMAKE_BINARY_DIR}/build)
    execute_process(
        COMMAND ${CMAKE_COMMAND} -E make_directory ${CMAKE_BINARY_DIR}/build
    )
endif()" #("  COMMAND bash -c \"echo 'Hello, world!'\"
" 0 18 (yank-handler #17=(evil-yank-line-handler nil t) fontified t) 18 40 (yank-handler #17# face font-lock-string-face fontified t) 40 41 (yank-handler #17# fontified t)) "execute_process(
    COMMAND bash -c \"echo 'Hello, world!'\"
)" #(" " 0 1 (face font-lock-comment-delimiter-face fontified t)) "set(CMAKE_CACHEFILE_DIR ${CMAKE_SOURCE_DIR}/build)" #("# 设置生成的静态库的位置
" 0 2 (yank-handler #18=(evil-yank-line-handler nil t) face font-lock-comment-delimiter-face fontified t) 2 13 (yank-handler #18# face font-lock-comment-face fontified t) 13 14 (yank-handler #18# face font-lock-comment-face fontified t)) #("# 设置构建目录为 build
set(CMAKE_BINARY_DIR ${CMAKE_SOURCE_DIR}/build)
set(EXECUTABLE_OUTPUT_PATH ${CMAKE_BINARY_DIR})
set(LIBRARY_OUTPUT_PATH ${CMAKE_BINARY_DIR})
" 0 2 (yank-handler #19=(evil-yank-line-handler nil t) face font-lock-comment-delimiter-face fontified t) 2 16 (yank-handler #19# face font-lock-comment-face fontified t) 16 19 (yank-handler #19# face font-lock-function-name-face fontified t) 19 20 (yank-handler #19# face (rainbow-delimiters-depth-1-face) fontified t) 20 38 (yank-handler #19# fontified t) 38 39 (yank-handler #19# face (rainbow-delimiters-depth-2-face) fontified t) 39 55 (yank-handler #19# face font-lock-variable-name-face fontified t) 55 56 (yank-handler #19# face (rainbow-delimiters-depth-2-face) fontified t) 56 62 (yank-handler #19# fontified t) 62 63 (yank-handler #19# face (rainbow-delimiters-depth-1-face) fontified t) 63 64 (yank-handler #19# fontified t) 64 67 (yank-handler #19# face font-lock-function-name-face fontified t) 67 68 (yank-handler #19# face (rainbow-delimiters-depth-1-face) fontified t) 68 92 (yank-handler #19# fontified t) 92 93 (yank-handler #19# face (rainbow-delimiters-depth-2-face) fontified t) 93 94 (yank-handler #19# face font-lock-variable-name-face fontified t) 94 95 (yank-handler #19# face font-lock-variable-name-face fontified t) 95 96 (yank-handler #19# face font-lock-variable-name-face fontified t) 96 97 (yank-handler #19# face font-lock-variable-name-face fontified t) 97 98 (yank-handler #19# face font-lock-variable-name-face fontified t) 98 99 (yank-handler #19# face font-lock-variable-name-face fontified t) 99 100 (yank-handler #19# face font-lock-variable-name-face fontified t) 100 101 (yank-handler #19# face font-lock-variable-name-face fontified t) 101 102 (yank-handler #19# face font-lock-variable-name-face fontified t) 102 103 (yank-handler #19# face font-lock-variable-name-face fontified t) 103 104 (yank-handler #19# face font-lock-variable-name-face fontified t) 104 105 (yank-handler #19# face font-lock-variable-name-face fontified t) 105 106 (yank-handler #19# face font-lock-variable-name-face fontified t) 106 107 (yank-handler #19# face font-lock-variable-name-face fontified t) 107 108 (yank-handler #19# face font-lock-variable-name-face fontified t) 108 109 (yank-handler #19# face font-lock-variable-name-face fontified t) 109 110 (yank-handler #19# face (rainbow-delimiters-depth-2-face) fontified t) 110 111 (yank-handler #19# face (rainbow-delimiters-depth-1-face) fontified t) 111 112 (yank-handler #19# fontified t) 112 115 (yank-handler #19# face font-lock-function-name-face fontified t) 115 116 (yank-handler #19# face (rainbow-delimiters-depth-1-face) fontified t) 116 137 (yank-handler #19# fontified t) 137 138 (yank-handler #19# face (rainbow-delimiters-depth-2-face) fontified t) 138 139 (yank-handler #19# face font-lock-variable-name-face fontified t) 139 140 (yank-handler #19# face font-lock-variable-name-face fontified t) 140 141 (yank-handler #19# face font-lock-variable-name-face fontified t) 141 142 (yank-handler #19# face font-lock-variable-name-face fontified t) 142 143 (yank-handler #19# face font-lock-variable-name-face fontified t) 143 144 (yank-handler #19# face font-lock-variable-name-face fontified t) 144 145 (yank-handler #19# face font-lock-variable-name-face fontified t) 145 146 (yank-handler #19# face font-lock-variable-name-face fontified t) 146 147 (yank-handler #19# face font-lock-variable-name-face fontified t) 147 148 (yank-handler #19# face font-lock-variable-name-face fontified t) 148 149 (yank-handler #19# face font-lock-variable-name-face fontified t) 149 150 (yank-handler #19# face font-lock-variable-name-face fontified t) 150 151 (yank-handler #19# face font-lock-variable-name-face fontified t) 151 154 (yank-handler #19# face font-lock-variable-name-face fontified t) 154 155 (yank-handler #19# face (rainbow-delimiters-depth-2-face) fontified t) 155 156 (yank-handler #19# face (rainbow-delimiters-depth-1-face) fontified t) 156 157 (yank-handler #19# fontified t)) "# 设置构建目录为 build
set(CMAKE_BINARY_DIR ${CMAKE_SOURCE_DIR}/build)
set(EXECUTABLE_OUTPUT_PATH ${CMAKE_BINARY_DIR})
set(LIBRARY_OUTPUT_PATH ${CMAKE_BINARY_DIR})" #("  cout << \"HELLO WORLD\" << endl;
" 0 2 (yank-handler #20=(evil-yank-line-handler nil t) fontified t) 2 3 (yank-handler #20# fontified t) 3 4 (yank-handler #20# fontified t) 4 5 (yank-handler #20# fontified t) 5 6 (yank-handler #20# fontified t) 6 7 (yank-handler #20# fontified t) 7 8 (yank-handler #20# fontified t) 8 9 (yank-handler #20# fontified t) 9 10 (yank-handler #20# fontified t) 10 11 (yank-handler #20# face font-lock-string-face fontified t) 11 12 (yank-handler #20# face font-lock-string-face fontified t) 12 13 (yank-handler #20# face font-lock-string-face fontified t) 13 14 (yank-handler #20# face font-lock-string-face fontified t) 14 15 (yank-handler #20# face font-lock-string-face fontified t) 15 16 (yank-handler #20# face font-lock-string-face fontified t) 16 17 (yank-handler #20# face font-lock-string-face fontified t) 17 18 (yank-handler #20# face font-lock-string-face fontified t) 18 19 (yank-handler #20# face font-lock-string-face fontified t) 19 20 (yank-handler #20# face font-lock-string-face fontified t) 20 21 (yank-handler #20# face font-lock-string-face fontified t) 21 22 (yank-handler #20# face font-lock-string-face fontified t) 22 23 (yank-handler #20# face font-lock-string-face fontified t) 23 24 (yank-handler #20# fontified t) 24 25 (yank-handler #20# fontified t) 25 26 (yank-handler #20# fontified t) 26 27 (yank-handler #20# fontified t) 27 28 (yank-handler #20# fontified t) 28 29 (yank-handler #20# fontified t) 29 30 (yank-handler #20# fontified t) 30 31 (yank-handler #20# fontified t) 31 32 (yank-handler #20# fontified t) 32 33 (yank-handler #20# fontified t)) #("
" 0 1 (yank-handler (evil-yank-line-handler nil t))) #("-- Build files have been written to: /home/cam/pro/test_1
" 0 58 (yank-handler (evil-yank-line-handler nil t))) #("# 设置生成目标目录为 build
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${PROJECT_SOURCE_DIR}/build)
set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${PROJECT_SOURCE_DIR}/build)
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${PROJECT_SOURCE_DIR}/build)
" 0 2 (yank-handler #21=(evil-yank-line-handler nil t) face font-lock-comment-delimiter-face fontified t) 2 18 (yank-handler #21# face font-lock-comment-face fontified t) 18 21 (yank-handler #21# face font-lock-function-name-face fontified t) 21 22 (yank-handler #21# face (rainbow-delimiters-depth-1-face) fontified t) 22 54 (yank-handler #21# fontified t) 54 55 (yank-handler #21# face (rainbow-delimiters-depth-2-face) fontified t) 55 73 (yank-handler #21# face font-lock-variable-name-face fontified t) 73 74 (yank-handler #21# face (rainbow-delimiters-depth-2-face) fontified t) 74 80 (yank-handler #21# fontified t) 80 81 (yank-handler #21# face (rainbow-delimiters-depth-1-face) fontified t) 81 82 (yank-handler #21# fontified t) 82 85 (yank-handler #21# face font-lock-function-name-face fontified t) 85 86 (yank-handler #21# face (rainbow-delimiters-depth-1-face) fontified t) 86 118 (yank-handler #21# fontified t) 118 119 (yank-handler #21# face (rainbow-delimiters-depth-2-face) fontified t) 119 137 (yank-handler #21# face font-lock-variable-name-face fontified t) 137 138 (yank-handler #21# face (rainbow-delimiters-depth-2-face) fontified t) 138 144 (yank-handler #21# fontified t) 144 145 (yank-handler #21# face (rainbow-delimiters-depth-1-face) fontified t) 145 146 (yank-handler #21# fontified t) 146 149 (yank-handler #21# face font-lock-function-name-face fontified t) 149 150 (yank-handler #21# face (rainbow-delimiters-depth-1-face) fontified t) 150 182 (yank-handler #21# fontified t) 182 183 (yank-handler #21# face (rainbow-delimiters-depth-2-face) fontified t) 183 201 (yank-handler #21# face font-lock-variable-name-face fontified t) 201 202 (yank-handler #21# face (rainbow-delimiters-depth-2-face) fontified t) 202 208 (yank-handler #21# fontified t) 208 209 (yank-handler #21# face (rainbow-delimiters-depth-1-face) fontified t) 209 210 (yank-handler #21# fontified t)) #("set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_SOURCE_DIR}/build)
" 0 3 (yank-handler #22=(evil-yank-line-handler nil t) face font-lock-function-name-face fontified t) 3 4 (yank-handler #22# face (rainbow-delimiters-depth-1-face) fontified t) 4 36 (yank-handler #22# fontified t) 36 37 (yank-handler #22# face (rainbow-delimiters-depth-2-face) fontified t) 37 53 (yank-handler #22# face font-lock-variable-name-face fontified t) 53 54 (yank-handler #22# face (rainbow-delimiters-depth-2-face) fontified t) 54 60 (yank-handler #22# fontified t) 60 61 (yank-handler #22# face (rainbow-delimiters-depth-1-face) fontified t rear-nonsticky t) 61 62 (yank-handler #22# fontified t)) "set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/build)
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/build)" "include_directories(${Boost_INCLUDE_DIRS})
target_link_libraries(${PROJECT_NAME} ${Boost_LIBRARIES})" "# 设置生成目标目录为 build
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/build)" #("find_package(Boost REQUIRED)

" 0 12 (yank-handler #23=(evil-yank-line-handler nil t) face font-lock-function-name-face fontified t) 12 13 (yank-handler #23# face (rainbow-delimiters-depth-1-face) fontified t) 13 14 (yank-handler #23# fontified t) 14 15 (yank-handler #23# fontified t) 15 27 (yank-handler #23# fontified t) 27 28 (yank-handler #23# face (rainbow-delimiters-depth-1-face) fontified t) 28 29 (yank-handler #23# fontified t) 29 30 (yank-handler #23# fontified t)) #("find_package(Boost REQUIRED)
" 0 12 (yank-handler #24=(evil-yank-line-handler nil t) face font-lock-function-name-face fontified t) 12 13 (yank-handler #24# face (rainbow-delimiters-depth-1-face) fontified t) 13 14 (yank-handler #24# fontified t) 14 15 (yank-handler #24# fontified t) 15 27 (yank-handler #24# fontified t) 27 28 (yank-handler #24# face (rainbow-delimiters-depth-1-face) fontified t) 28 29 (yank-handler #24# fontified t)) #("# find src file
" 0 2 (yank-handler #25=(evil-yank-line-handler nil t) face font-lock-comment-delimiter-face fontified t) 2 16 (yank-handler #25# face font-lock-comment-face fontified t)) "Could not find a package configuration file provided by \"boost\" with any of
  the following names:" #("a" 0 1 (face font-lock-function-name-face fontified t)) "l" #26# #("
" 0 1 (yank-handler (evil-yank-line-handler nil t))) #("
" 0 1 (yank-handler (evil-yank-line-handler nil t) fontified t)) #("  \"${PROJECT_SOURCE_DIR}/*.cpp\"
" 0 2 (yank-handler #27=(evil-yank-line-handler nil t) fontified t) 2 4 (yank-handler #27# face font-lock-string-face fontified t) 4 5 (yank-handler #27# face font-lock-string-face fontified t) 5 23 (yank-handler #27# face font-lock-variable-name-face fontified t) 23 30 (yank-handler #27# face font-lock-string-face fontified t) 30 31 (yank-handler #27# face font-lock-string-face fontified t) 31 32 (yank-handler #27# fontified t)) #("
" 0 1 (yank-handler (evil-yank-line-handler nil t) fontified t)) #(" " 0 1 (fontified t)) #("	rm -f *.o $(TARGET)
" 0 12 (yank-handler #28=(evil-yank-line-handler nil t) fontified t) 12 13 (yank-handler #28# fontified t face (rainbow-delimiters-depth-1-face)) 13 19 (yank-handler #28# fontified t face (font-lock-variable-name-face)) 19 20 (yank-handler #28# fontified t face (rainbow-delimiters-depth-1-face)) 20 21 (yank-handler #28#)) #("  std::cout << boost::algorithm::to_upper_copy(s) << std::endl;
  std::cout << \"Hello Worl\" << endl;
" 0 2 (yank-handler #29=(evil-yank-line-handler nil t) c-in-sws t c-is-sws t fontified t) 2 3 (yank-handler #29# face font-lock-constant-face c-is-sws t fontified t) 3 5 (yank-handler #29# face font-lock-constant-face fontified t) 5 11 (yank-handler #29# fontified t) 11 12 (yank-handler #29# fontified t) 12 15 (yank-handler #29# fontified t) 15 20 (yank-handler #29# face font-lock-constant-face fontified t) 20 22 (yank-handler #29# fontified t) 22 31 (yank-handler #29# face font-lock-constant-face fontified t) 31 46 (yank-handler #29# fontified t) 46 47 (yank-handler #29# face (rainbow-delimiters-depth-2-face) fontified t) 47 48 (yank-handler #29# fontified t) 48 49 (yank-handler #29# face (rainbow-delimiters-depth-2-face) fontified t) 49 52 (yank-handler #29# fontified t) 52 53 (yank-handler #29# fontified t) 53 56 (yank-handler #29# face font-lock-constant-face fontified t) 56 66 (yank-handler #29# fontified t) 66 69 (yank-handler #29# face font-lock-constant-face fontified t) 69 79 (yank-handler #29# fontified t) 79 91 (yank-handler #29# face font-lock-string-face fontified t) 91 101 (yank-handler #29# fontified t)) #("
" 0 1 (yank-handler (evil-yank-line-handler nil t) fontified t)) #("
" 0 1 (yank-handler (evil-yank-line-handler nil t) fontified t)) "cmake-enable-cmake-ide-support t" #("compan" 0 6 (fontified t)) #("            cmake-backend 'company-cmake
" 0 12 (yank-handler #30=(evil-yank-line-handler nil t) fontified t) 12 39 (yank-handler #30# fontified t) 39 40 (yank-handler #30# rear-nonsticky t fontified t) 40 41 (yank-handler #30# fontified t)) #("            :variables spell-checking-enable-by-default nil)
" 0 12 (yank-handler #31=(evil-yank-line-handler nil t) fontified t) 12 22 (yank-handler #31# face font-lock-builtin-face fontified t) 22 59 (yank-handler #31# fontified t) 59 60 (yank-handler #31# face (rainbow-delimiters-depth-4-face) fontified t) 60 61 (yank-handler #31# fontified t)) ":variables cmake-backend 'company-cmake" #("spell-c" 0 6 (fontified t) 6 7 (fontified t)) #("     (spell-checking :variables spell-checking-enable-by-default nil)
" 0 5 (yank-handler #32=(evil-yank-line-handler nil t) fontified t) 5 6 (yank-handler #32# face (rainbow-delimiters-depth-4-face) fontified t) 6 21 (yank-handler #32# fontified t) 21 31 (yank-handler #32# face font-lock-builtin-face fontified t) 31 68 (yank-handler #32# fontified t) 68 69 (yank-handler #32# face (rainbow-delimiters-depth-4-face) fontified t) 69 70 (yank-handler #32# fontified t)) #26# #("\"" 0 1 (face font-lock-string-face fontified t)) #("  std::string s = “ismileli”;
" 0 2 (yank-handler #33=(evil-yank-line-handler nil t) fontified t) 2 5 (yank-handler #33# face font-lock-constant-face fontified t) 5 7 (yank-handler #33# fontified t) 7 12 (yank-handler #33# face font-lock-type-face fontified t) 12 13 (yank-handler #33# face font-lock-type-face c-type c-decl-id-start fontified t) 13 14 (yank-handler #33# fontified t) 14 15 (yank-handler #33# face font-lock-variable-name-face fontified t) 15 30 (yank-handler #33# fontified t)) #("n" 0 1 (fontified t)) #("”" 0 1 (fontified t)) #("\"" 0 1 (syntax-table (1) face font-lock-warning-face fontified t c-fl-syn-tab (15))) #("  cout << “-- -- -- -- -- --测试boost库安装是否正确-- -- -- -- -- --” << endl;
" 0 2 (yank-handler #34=(evil-yank-line-handler nil t) fontified t) 2 13 (yank-handler #34# fontified t) 13 14 (yank-handler #34# fontified t) 14 16 (yank-handler #34# fontified t) 16 17 (yank-handler #34# fontified t) 17 19 (yank-handler #34# fontified t) 19 20 (yank-handler #34# fontified t) 20 22 (yank-handler #34# fontified t) 22 23 (yank-handler #34# fontified t) 23 25 (yank-handler #34# fontified t) 25 26 (yank-handler #34# fontified t) 26 44 (yank-handler #34# fontified t) 44 45 (yank-handler #34# fontified t) 45 47 (yank-handler #34# fontified t) 47 48 (yank-handler #34# fontified t) 48 50 (yank-handler #34# fontified t) 50 51 (yank-handler #34# fontified t) 51 53 (yank-handler #34# fontified t) 53 54 (yank-handler #34# fontified t) 54 56 (yank-handler #34# fontified t) 56 57 (yank-handler #34# fontified t) 57 70 (yank-handler #34# fontified t)) #("#include <iostream>
#include  <boost/filesystem.hpp>

namespace boostfs = boost::filesystem;

int main(int argc, char* argv[])
{
  if(argc <= 1)
  {
    std::cerr << \"Usage:\" << argv[0] << \"<filename>\" << std::endl;
    return 1;
  }

  boostfs::path p (argv[1]);

  if(boostfs::exists(p))
  {
    std::cout << \"File\" << p << \" exists.\" << std::endl;
  }
  else
  {
    std::cout << \"File \" << p << \" not exists.\" << std::endl;
  }

  return 0;
}

" 0 1 (yank-handler #35=(evil-yank-line-handler nil t) c-in-sws t face font-lock-preprocessor-face c-is-sws t fontified t) 1 8 (yank-handler #35# c-in-sws t face font-lock-preprocessor-face fontified t) 8 9 (yank-handler #35# c-in-sws t fontified t) 9 10 (yank-handler #35# c-in-sws t category c-<-as-paren-syntax face (rainbow-delimiters-depth-1-face font-lock-string-face) fontified t) 10 18 (yank-handler #35# c-in-sws t face font-lock-string-face fontified t) 18 19 (yank-handler #35# c-in-sws t category c->-as-paren-syntax face (rainbow-delimiters-depth-1-face font-lock-string-face) fontified t) 19 20 (yank-handler #35# c-in-sws t fontified t) 20 21 (yank-handler #35# c-in-sws t face font-lock-preprocessor-face c-is-sws t fontified t) 21 28 (yank-handler #35# c-in-sws t face font-lock-preprocessor-face fontified t) 28 30 (yank-handler #35# c-in-sws t fontified t) 30 31 (yank-handler #35# c-in-sws t category c-<-as-paren-syntax face (rainbow-delimiters-depth-1-face font-lock-string-face) fontified t) 31 51 (yank-handler #35# c-in-sws t face font-lock-string-face fontified t) 51 52 (yank-handler #35# c-in-sws t category c->-as-paren-syntax face (rainbow-delimiters-depth-1-face font-lock-string-face) fontified t) 52 53 (yank-handler #35# c-in-sws t fontified t) 53 54 (yank-handler #35# c-is-sws t fontified t) 54 55 (yank-handler #35# face font-lock-keyword-face c-is-sws t fontified t) 55 63 (yank-handler #35# face font-lock-keyword-face fontified t) 63 64 (yank-handler #35# fontified t) 64 70 (yank-handler #35# face font-lock-constant-face fontified t) 70 71 (yank-handler #35# face font-lock-constant-face c-type c-decl-id-start fontified t) 71 74 (yank-handler #35# fontified t) 74 79 (yank-handler #35# face font-lock-constant-face fontified t) 79 94 (yank-handler #35# fontified t) 94 96 (yank-handler #35# face font-lock-type-face fontified t) 96 97 (yank-handler #35# face font-lock-type-face c-type c-decl-id-start fontified t) 97 98 (yank-handler #35# fontified t) 98 102 (yank-handler #35# face font-lock-function-name-face fontified t) 102 103 (yank-handler #35# face (rainbow-delimiters-depth-1-face) c-type c-decl-arg-start fontified t) 103 106 (yank-handler #35# face font-lock-type-face fontified t) 106 107 (yank-handler #35# fontified t) 107 111 (yank-handler #35# face font-lock-variable-name-face fontified t) 111 112 (yank-handler #35# c-type c-decl-arg-start fontified t) 112 113 (yank-handler #35# fontified t) 113 117 (yank-handler #35# face font-lock-type-face fontified t) 117 119 (yank-handler #35# fontified t) 119 123 (yank-handler #35# face font-lock-variable-name-face fontified t) 123 124 (yank-handler #35# face (rainbow-delimiters-depth-2-face) fontified t) 124 125 (yank-handler #35# face (rainbow-delimiters-depth-2-face) fontified t) 125 126 (yank-handler #35# face (rainbow-delimiters-depth-1-face) fontified t) 126 127 (yank-handler #35# fontified t) 127 128 (yank-handler #35# face (rainbow-delimiters-depth-1-face) fontified t) 128 131 (yank-handler #35# fontified t) 131 133 (yank-handler #35# face font-lock-keyword-face fontified t) 133 134 (yank-handler #35# face (rainbow-delimiters-depth-2-face) fontified t) 134 142 (yank-handler #35# fontified t) 142 143 (yank-handler #35# face highlight-numbers-number fontified t) 143 144 (yank-handler #35# face (rainbow-delimiters-depth-2-face) fontified t) 144 147 (yank-handler #35# fontified t) 147 148 (yank-handler #35# face (rainbow-delimiters-depth-2-face) fontified t) 148 153 (yank-handler #35# fontified t) 153 156 (yank-handler #35# face font-lock-constant-face fontified t) 156 166 (yank-handler #35# fontified t) 166 174 (yank-handler #35# face font-lock-string-face fontified t) 174 182 (yank-handler #35# fontified t) 182 183 (yank-handler #35# face (rainbow-delimiters-depth-3-face) fontified t) 183 184 (yank-handler #35# face highlight-numbers-number fontified t) 184 185 (yank-handler #35# face (rainbow-delimiters-depth-3-face) fontified t) 185 189 (yank-handler #35# fontified t) 189 201 (yank-handler #35# face font-lock-string-face fontified t) 201 205 (yank-handler #35# fontified t) 205 208 (yank-handler #35# face font-lock-constant-face fontified t) 208 220 (yank-handler #35# fontified t) 220 226 (yank-handler #35# face font-lock-keyword-face fontified t) 226 227 (yank-handler #35# fontified t) 227 228 (yank-handler #35# face highlight-numbers-number fontified t) 228 232 (yank-handler #35# fontified t) 232 233 (yank-handler #35# face (rainbow-delimiters-depth-2-face) fontified t) 233 237 (yank-handler #35# fontified t) 237 244 (yank-handler #35# face font-lock-constant-face fontified t) 244 246 (yank-handler #35# fontified t) 246 249 (yank-handler #35# face font-lock-type-face fontified t) 249 250 (yank-handler #35# face font-lock-type-face c-type c-decl-id-start fontified t) 250 251 (yank-handler #35# fontified t) 251 252 (yank-handler #35# face font-lock-variable-name-face fontified t) 252 253 (yank-handler #35# fontified t) 253 254 (yank-handler #35# face (rainbow-delimiters-depth-2-face) fontified t) 254 258 (yank-handler #35# fontified t) 258 259 (yank-handler #35# face (rainbow-delimiters-depth-3-face) fontified t) 259 260 (yank-handler #35# face highlight-numbers-number fontified t) 260 261 (yank-handler #35# face (rainbow-delimiters-depth-3-face) fontified t) 261 262 (yank-handler #35# face (rainbow-delimiters-depth-2-face) fontified t) 262 267 (yank-handler #35# fontified t) 267 269 (yank-handler #35# face font-lock-keyword-face fontified t) 269 270 (yank-handler #35# face (rainbow-delimiters-depth-2-face) fontified t) 270 277 (yank-handler #35# face font-lock-constant-face fontified t) 277 285 (yank-handler #35# fontified t) 285 286 (yank-handler #35# face (rainbow-delimiters-depth-3-face) fontified t) 286 287 (yank-handler #35# fontified t) 287 288 (yank-handler #35# face (rainbow-delimiters-depth-3-face) fontified t) 288 289 (yank-handler #35# face (rainbow-delimiters-depth-2-face) fontified t) 289 292 (yank-handler #35# fontified t) 292 293 (yank-handler #35# face (rainbow-delimiters-depth-2-face) fontified t) 293 298 (yank-handler #35# fontified t) 298 301 (yank-handler #35# face font-lock-constant-face fontified t) 301 311 (yank-handler #35# fontified t) 311 317 (yank-handler #35# face font-lock-string-face fontified t) 317 326 (yank-handler #35# fontified t) 326 336 (yank-handler #35# face font-lock-string-face fontified t) 336 340 (yank-handler #35# fontified t) 340 343 (yank-handler #35# face font-lock-constant-face fontified t) 343 353 (yank-handler #35# fontified t) 353 354 (yank-handler #35# face (rainbow-delimiters-depth-2-face) fontified t) 354 357 (yank-handler #35# fontified t) 357 361 (yank-handler #35# face font-lock-keyword-face fontified t) 361 364 (yank-handler #35# fontified t) 364 365 (yank-handler #35# face (rainbow-delimiters-depth-2-face) fontified t) 365 370 (yank-handler #35# fontified t) 370 373 (yank-handler #35# face font-lock-constant-face fontified t) 373 383 (yank-handler #35# fontified t) 383 390 (yank-handler #35# face font-lock-string-face fontified t) 390 399 (yank-handler #35# fontified t) 399 413 (yank-handler #35# face font-lock-string-face fontified t) 413 417 (yank-handler #35# fontified t) 417 420 (yank-handler #35# face font-lock-constant-face fontified t) 420 430 (yank-handler #35# fontified t) 430 431 (yank-handler #35# face (rainbow-delimiters-depth-2-face) fontified t) 431 435 (yank-handler #35# fontified t) 435 441 (yank-handler #35# face font-lock-keyword-face fontified t) 441 442 (yank-handler #35# fontified t) 442 443 (yank-handler #35# face highlight-numbers-number fontified t) 443 445 (yank-handler #35# fontified t) 445 446 (yank-handler #35# face (rainbow-delimiters-depth-1-face) fontified t) 446 447 (yank-handler #35# fontified t) 447 448 (yank-handler #35# fontified t)) "#include
#include <boost/algorithm/string.hpp>
using namespace std;
using namespace boost;

int main()
{
cout << “------------测试boost库安装是否正确------------” << endl;
std::string s = “ismileli”;
// 把字符串小写转换为大写
std::cout << boost::algorithm::to_upper_copy(s) << std::endl;
std::cout << “Hello World!\\n”;
getchar();
}" "g++ -o samlpe.out  boost.cpp  -I$BOOST_INCLUDE -L$BOOST_LIB -lboost_thread" #(" " 0 1 (fontified t)) #(";" 0 1 (face font-lock-comment-delimiter-face fontified t)) #(";" 0 1 (face font-lock-comment-delimiter-face fontified t)) ".000s spent in your user-config)
Found 15 new package(s) to install..." #("
Recent Files: (r)
     1   ~/.spacemacs
     2   ~/pro/test_1/a.cpp
     3   ~/.emacs.d/.cache/layouts/persp-auto-save
     4   /usr/include/c++/13.2.1/iostream
     5   ~/pro/test_1/a.o" 1 14 (face font-lock-keyword-face) 14 18 (face font-lock-comment-face)) "     1   ~/.spacemacs
     2   ~/pro/test_1/a.cpp
     3   ~/.emacs.d/.cache/layouts/persp-auto-save
     4   /usr/include/c++/13.2.1/iostream
     5   ~/pro/test_1/a.o" #26# #("o" 0 1 (face font-lock-comment-face fontified t)) #("i" 0 1 (face font-lock-comment-face fontified t))))
